[
  {
    "title": "「Top」工程師必備",
    "date": "2999-01-01T00:00:00.000Z",
    "tags": ["mindset"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "之前帶團隊時給 team member 的「工程師必備」文件，內容大多都是在網路蒐集的",
    "images": ["https://image.cashwu.com/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.225, "time": 373500, "words": 1245 },
    "slug": "must_for_engineers",
    "path": "blog/must_for_engineers",
    "filePath": "blog/must_for_engineers.mdx",
    "toc": [
      { "value": "試用期", "url": "#試用期-1", "depth": 2 },
      { "value": "軟體", "url": "#軟體-1", "depth": 2 },
      { "value": "服務", "url": "#服務-1", "depth": 2 },
      { "value": "Roadmap", "url": "#roadmap-1", "depth": 2 },
      { "value": "Book", "url": "#book-1", "depth": 2 },
      { "value": "Blog", "url": "#blog-1", "depth": 2 },
      { "value": "Video", "url": "#video-1", "depth": 2 },
      { "value": "課程", "url": "#課程-1", "depth": 2 },
      { "value": "更新歷程", "url": "#更新歷程-2", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Top」工程師必備",
      "datePublished": "2999-01-01T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "之前帶團隊時給 team member 的「工程師必備」文件，內容大多都是在網路蒐集的",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/must_for_engineers"
    }
  },
  {
    "title": "「Top」Rider 學習資源",
    "date": "2999-01-01T00:00:00.000Z",
    "tags": ["rider"],
    "draft": false,
    "summary": "這篇文章主要是蒐集相關的 Rider 學習資源",
    "images": ["https://image.cashwu.com/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.735, "time": 44100, "words": 147 },
    "slug": "rider-learning-tutorials",
    "path": "blog/rider-learning-tutorials",
    "filePath": "blog/rider-learning-tutorials.mdx",
    "toc": [
      { "value": "影片", "url": "#影片-1", "depth": 2 },
      { "value": "Git", "url": "#git-1", "depth": 3 },
      { "value": "文章", "url": "#文章-1", "depth": 2 },
      { "value": "更新歷程", "url": "#更新歷程-3", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Top」Rider 學習資源",
      "datePublished": "2999-01-01T00:00:00.000Z",
      "dateModified": "2999-01-01T00:00:00.000Z",
      "summary": "這篇文章主要是蒐集相關的 Rider 學習資源",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider-learning-tutorials"
    }
  },
  {
    "title": "",
    "date": "2099-01-01T00:00:00.000Z",
    "tags": [],
    "lastmod": "2099-01-01T00:00:00.000Z",
    "draft": true,
    "summary": "",
    "images": ["https://image.cashwu.com/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.665, "time": 39900, "words": 133 },
    "slug": "_Draft",
    "path": "blog/_Draft",
    "filePath": "blog/_Draft/index.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-12", "depth": 2 },
      { "value": "原因", "url": "#原因-7", "depth": 2 },
      { "value": "解法", "url": "#解法-12", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-80", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "",
      "datePublished": "2099-01-01T00:00:00.000Z",
      "dateModified": "2099-01-01T00:00:00.000Z",
      "summary": "",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_Draft"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 38 歸途：心路歷程",
    "date": "2024-10-08T00:00:00.000Z",
    "tags": ["ithome2024"],
    "lastmod": "2024-10-08T00:00:00.000Z",
    "draft": false,
    "summary": "這篇文章是整個系列的最後一篇，主要是想分享一下這次寫文章的過程，以及一些心得感想",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day38-epilogue/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.2, "time": 192000, "words": 640 },
    "slug": "2024/ithome/30day-day38-epilogue",
    "path": "blog/2024/ithome/30day-day38-epilogue",
    "filePath": "blog/2024/ithome/30day-day38-epilogue.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 38 歸途：心路歷程",
      "datePublished": "2024-10-08T00:00:00.000Z",
      "dateModified": "2024-10-08T00:00:00.000Z",
      "summary": "這篇文章是整個系列的最後一篇，主要是想分享一下這次寫文章的過程，以及一些心得感想",
      "image": "https://image.cashwu.com/2024/ithome/30day-day38-epilogue/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day38-epilogue"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 37 部署 Spring Boot",
    "date": "2024-10-07T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "deployment"],
    "lastmod": "2024-10-07T00:00:00.000Z",
    "draft": false,
    "summary": "這篇文章詳細介紹了如何將 Spring Boot 應用程式部署到正式環境，包括建立可執行的 JAR 檔、使用 Docker 容器化應用程式，以及透過 Zeabur 平台進行雲端部署。文章首先說明了如何使用 Gradle 或 IDE 生成 JAR 檔，接著介紹如何撰寫 Dockerfile 並建立 Docker Image，最後展示了在 Zeabur 平台上快速部署應用程式的步驟。這些方法各具優勢，開發者可以依據專案需求選擇最適合的部署方式，輕鬆將 Spring Boot 應用程式上線",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day37-deploying-spring-boot/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.3, "time": 318000, "words": 1060 },
    "slug": "2024/ithome/30day-day37-deploying-spring-boot",
    "path": "blog/2024/ithome/30day-day37-deploying-spring-boot",
    "filePath": "blog/2024/ithome/30day-day37-deploying-spring-boot.mdx",
    "toc": [
      { "value": "建立 JAR 檔", "url": "#建立-jar-檔", "depth": 2 },
      { "value": "指令方式", "url": "#指令方式", "depth": 3 },
      { "value": "IDE 方式", "url": "#ide-方式", "depth": 3 },
      { "value": "執行 JAR 檔", "url": "#執行-jar-檔", "depth": 2 },
      { "value": "建立 Docker Image", "url": "#建立-docker-image", "depth": 2 },
      { "value": "使用 Docker 封裝 JAR 檔", "url": "#使用-docker-封裝-jar-檔", "depth": 3 },
      { "value": "讓 Docker 也負責建立 JAR 檔", "url": "#讓-docker-也負責建立-jar-檔", "depth": 3 },
      {
        "value": "同場加映：使用 Zeabur 部署應用程式",
        "url": "#同場加映使用-zeabur-部署應用程式",
        "depth": 2
      },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 37 部署 Spring Boot",
      "datePublished": "2024-10-07T00:00:00.000Z",
      "dateModified": "2024-10-07T00:00:00.000Z",
      "summary": "這篇文章詳細介紹了如何將 Spring Boot 應用程式部署到正式環境，包括建立可執行的 JAR 檔、使用 Docker 容器化應用程式，以及透過 Zeabur 平台進行雲端部署。文章首先說明了如何使用 Gradle 或 IDE 生成 JAR 檔，接著介紹如何撰寫 Dockerfile 並建立 Docker Image，最後展示了在 Zeabur 平台上快速部署應用程式的步驟。這些方法各具優勢，開發者可以依據專案需求選擇最適合的部署方式，輕鬆將 Spring Boot 應用程式上線",
      "image": "https://image.cashwu.com/2024/ithome/30day-day37-deploying-spring-boot/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day37-deploying-spring-boot"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 36 Spring Boot Actuator 監控與管理",
    "date": "2024-10-06T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "actuator"],
    "lastmod": "2024-10-06T00:00:00.000Z",
    "draft": false,
    "summary": "Spring Boot Actuator 是 Spring Boot 框架中的一個強大工具，提供即時監控和管理應用程式的多種功能。本文介紹了 Actuator 的用途，如健康檢查、指標收集、日誌管理和環境屬性查看。加入 Actuator 只需簡單設置依賴和配置檔案，並可利用 Spring Security 設定存取權限。本文還展示了如何自定義應用資訊及測試 Actuator API。Actuator 為開發和維護帶來極大便利，但在正式環境中需注意安全設定",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day36-spring-boot-actuator/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.21, "time": 252600, "words": 842 },
    "slug": "2024/ithome/30day-day36-spring-boot-actuator",
    "path": "blog/2024/ithome/30day-day36-spring-boot-actuator",
    "filePath": "blog/2024/ithome/30day-day36-spring-boot-actuator.mdx",
    "toc": [
      { "value": "什麼是 Spring Boot Actuator", "url": "#什麼是-spring-boot-actuator", "depth": 2 },
      { "value": "Actuator 的用途", "url": "#actuator-的用途", "depth": 3 },
      { "value": "Actuator 的功能", "url": "#actuator-的功能", "depth": 3 },
      {
        "value": "在 Spring Boot 中加入 Actuator",
        "url": "#在-spring-boot-中加入-actuator",
        "depth": 2
      },
      { "value": "增加依賴", "url": "#增加依賴", "depth": 3 },
      { "value": "設定 Spring Security", "url": "#設定-spring-security", "depth": 3 },
      { "value": "設定 application.properties", "url": "#設定applicationproperties", "depth": 3 },
      { "value": "測試 Actuator API", "url": "#測試-actuator-api", "depth": 2 },
      {
        "value": "/actuator 所有啟用的 actuator",
        "url": "#actuator-所有啟用的-actuator",
        "depth": 3
      },
      {
        "value": "/actuator/health 應用程式健康狀況",
        "url": "#actuatorhealth-應用程式健康狀況",
        "depth": 3
      },
      { "value": "/actuator/info 應用程式資訊", "url": "#actuatorinfo-應用程式資訊", "depth": 3 },
      {
        "value": "/actuator/metrics 應用程式指標列表",
        "url": "#actuatormetrics-應用程式指標列表",
        "depth": 3
      },
      {
        "value": "/actuator/metrics/[name] 應用程式單一指標",
        "url": "#actuatormetricsname-應用程式單一指標",
        "depth": 3
      },
      { "value": "/actuator/env 查看環境變數", "url": "#actuatorenv-查看環境變數", "depth": 3 },
      { "value": "結論 ", "url": "#結論-1", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 36 Spring Boot Actuator 監控與管理",
      "datePublished": "2024-10-06T00:00:00.000Z",
      "dateModified": "2024-10-06T00:00:00.000Z",
      "summary": "Spring Boot Actuator 是 Spring Boot 框架中的一個強大工具，提供即時監控和管理應用程式的多種功能。本文介紹了 Actuator 的用途，如健康檢查、指標收集、日誌管理和環境屬性查看。加入 Actuator 只需簡單設置依賴和配置檔案，並可利用 Spring Security 設定存取權限。本文還展示了如何自定義應用資訊及測試 Actuator API。Actuator 為開發和維護帶來極大便利，但在正式環境中需注意安全設定",
      "image": "https://image.cashwu.com/2024/ithome/30day-day36-spring-boot-actuator/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day36-spring-boot-actuator"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 35 JWT 實現無狀態身份驗證",
    "date": "2024-10-05T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "security", "jwt"],
    "lastmod": "2024-10-05T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了 JWT（JSON Web Token）在 API 身分驗證中的應用，並詳細說明了如何在 Spring Boot 專案中實現 JWT 認證。文章解釋了 JWT 的概念、優勢，以及在 Spring Security 中的具體實現步驟，包括添加 JWT 依賴、建立 JWT 服務、配置安全過濾器等。通過這些步驟，我們實現了一個基於 JWT 的無狀態身分驗證系統，提高了 API 的安全性和擴展性",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day35-jwt-stateless-authentication/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.885, "time": 533100, "words": 1777 },
    "slug": "2024/ithome/30day-day35-jwt-stateless-authentication",
    "path": "blog/2024/ithome/30day-day35-jwt-stateless-authentication",
    "filePath": "blog/2024/ithome/30day-day35-jwt-stateless-authentication.mdx",
    "toc": [
      { "value": "什麼是 JWT?", "url": "#什麼是-jwt", "depth": 2 },
      {
        "value": "為什麼 API 使用 JWT 是更好的認證方法 ?",
        "url": "#為什麼-api-使用-jwt-是更好的認證方法-",
        "depth": 3
      },
      {
        "value": "修改 Spring Security 配置,加入 JWT 功能",
        "url": "#修改-spring-security-配置加入-jwt-功能",
        "depth": 2
      },
      { "value": "增加 JWT 依賴", "url": "#增加-jwt-依賴", "depth": 3 },
      { "value": "設定 JWT 的密鑰和過期時間", "url": "#設定-jwt-的密鑰和過期時間", "depth": 3 },
      {
        "value": "建立一個 JwtService 來處理 JWT 的生成和驗證",
        "url": "#建立一個-jwtservice-來處理-jwt-的生成和驗證",
        "depth": 3
      },
      { "value": "建立 JWT 請求過濾器", "url": "#建立-jwt-請求過濾器", "depth": 3 },
      { "value": "修改 Spring Security 配置", "url": "#修改-spring-security-配置", "depth": 3 },
      { "value": "新增獲取 JWT 的 API", "url": "#新增獲取-jwt-的-api", "depth": 3 },
      { "value": "測試 API", "url": "#測試-api", "depth": 2 },
      {
        "value": "同場加映：修改測試程式碼支援 JWT",
        "url": "#同場加映修改測試程式碼支援-jwt",
        "depth": 2
      },
      { "value": "TodoEndToEnd Test", "url": "#todoendtoend-test", "depth": 3 },
      { "value": "TodoController Test", "url": "#todocontroller-test", "depth": 3 },
      { "value": "結論", "url": "#結論-2", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 35 JWT 實現無狀態身份驗證",
      "datePublished": "2024-10-05T00:00:00.000Z",
      "dateModified": "2024-10-05T00:00:00.000Z",
      "summary": "本文介紹了 JWT（JSON Web Token）在 API 身分驗證中的應用，並詳細說明了如何在 Spring Boot 專案中實現 JWT 認證。文章解釋了 JWT 的概念、優勢，以及在 Spring Security 中的具體實現步驟，包括添加 JWT 依賴、建立 JWT 服務、配置安全過濾器等。通過這些步驟，我們實現了一個基於 JWT 的無狀態身分驗證系統，提高了 API 的安全性和擴展性",
      "image": "https://image.cashwu.com/2024/ithome/30day-day35-jwt-stateless-authentication/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day35-jwt-stateless-authentication"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 34 Spring Security 測試",
    "date": "2024-10-04T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "security", "test"],
    "lastmod": "2024-10-04T00:00:00.000Z",
    "draft": false,
    "summary": "這篇文章詳細介紹了如何在 Spring Boot 應用程式中加入 Spring Security 後，調整測試程式碼以支援認證和授權。內容涵蓋了使用 spring-security-test 模擬認證和授權、處理 CSRF 保護，以及使用 Mock 物件進行測試。此外，文章還展示了如何修改相關的測試，並提供了具體的程式碼範例，確保應用程式的安全性和測試的完整性",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day34-spring-security-test/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.43, "time": 325800, "words": 1086 },
    "slug": "2024/ithome/30day-day34-spring-security-test",
    "path": "blog/2024/ithome/30day-day34-spring-security-test",
    "filePath": "blog/2024/ithome/30day-day34-spring-security-test.mdx",
    "toc": [
      { "value": "spring-security-test", "url": "#spring-security-test", "depth": 2 },
      { "value": "主要用途", "url": "#主要用途-1", "depth": 3 },
      { "value": "常用的註解和方法", "url": "#常用的註解和方法", "depth": 3 },
      { "value": "@WithMockUser", "url": "#withmockuser", "depth": 4 },
      { "value": "@WithAnonymousUser", "url": "#withanonymoususer", "depth": 4 },
      { "value": "@WithUserDetails", "url": "#withuserdetails", "depth": 4 },
      {
        "value": "SecurityMockMvcRequestPostProcessors",
        "url": "#securitymockmvcrequestpostprocessors",
        "depth": 4
      },
      {
        "value": "使用 RequestPostProcessor 模擬使用者",
        "url": "#使用requestpostprocessor模擬使用者",
        "depth": 4
      },
      { "value": "修改 TodoController 測試", "url": "#修改-todocontroller-測試", "depth": 2 },
      { "value": "修改 TodoEndToEnd 測試", "url": "#修改-todoendtoend-測試", "depth": 2 },
      { "value": "測試", "url": "#測試", "depth": 2 },
      { "value": "結論", "url": "#結論-4", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-4", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 34 Spring Security 測試",
      "datePublished": "2024-10-04T00:00:00.000Z",
      "dateModified": "2024-10-04T00:00:00.000Z",
      "summary": "這篇文章詳細介紹了如何在 Spring Boot 應用程式中加入 Spring Security 後，調整測試程式碼以支援認證和授權。內容涵蓋了使用 spring-security-test 模擬認證和授權、處理 CSRF 保護，以及使用 Mock 物件進行測試。此外，文章還展示了如何修改相關的測試，並提供了具體的程式碼範例，確保應用程式的安全性和測試的完整性",
      "image": "https://image.cashwu.com/2024/ithome/30day-day34-spring-security-test/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day34-spring-security-test"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 33 Spring Security 進階",
    "date": "2024-10-03T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "security"],
    "lastmod": "2024-10-03T00:00:00.000Z",
    "draft": false,
    "summary": "這篇文章深入探討了如何使用程式碼來自訂 Spring Security 的安全設定，包括記憶體中使用者資料的設定、密碼編碼、HTTP 請求授權設定，以及將使用者資料儲存到 H2 資料庫中。文章詳細介紹了如何使用 BCryptPasswordEncoder 來安全地儲存密碼，並展示了如何自訂 UserDetailsService 和配置 HttpSecurity 以實現更靈活的 API 端點存取控制。此外，還提供了在使用 Spring Security 後，如何安全地存取 H2 console 的相關設定。這些進階設定使應用程式更加安全和可擴展",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day33-spring-security-advanced/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.035, "time": 482100, "words": 1607 },
    "slug": "2024/ithome/30day-day33-spring-security-advanced",
    "path": "blog/2024/ithome/30day-day33-spring-security-advanced",
    "filePath": "blog/2024/ithome/30day-day33-spring-security-advanced.mdx",
    "toc": [
      { "value": "自訂記憶體中的使用者資料", "url": "#自訂記憶體中的使用者資料", "depth": 2 },
      { "value": "使用者資料", "url": "#使用者資料", "depth": 3 },
      { "value": "密碼編碼", "url": "#密碼編碼", "depth": 3 },
      { "value": "測試", "url": "#測試-1", "depth": 3 },
      { "value": "自訂 HttpSecurity ", "url": "#自訂-httpsecurity", "depth": 2 },
      { "value": "請求授權設定", "url": "#請求授權設定", "depth": 3 },
      { "value": "HTTP Basic 設定", "url": "#http-basic-設定", "depth": 3 },
      { "value": "CSRF 設定", "url": "#csrf-設定", "depth": 3 },
      { "value": "登入設定", "url": "#登入設定", "depth": 3 },
      { "value": "登出設定", "url": "#登出設定", "depth": 3 },
      { "value": "IDE 方便的功能", "url": "#ide-方便的功能", "depth": 3 },
      { "value": "將使用者資料儲存到H2資料庫", "url": "#將使用者資料儲存到h2資料庫", "depth": 2 },
      {
        "value": "同場加映：H2 console 的安全存取",
        "url": "#同場加映h2-console的安全存取",
        "depth": 2
      },
      { "value": "結論", "url": "#結論-5", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-5", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 33 Spring Security 進階",
      "datePublished": "2024-10-03T00:00:00.000Z",
      "dateModified": "2024-10-03T00:00:00.000Z",
      "summary": "這篇文章深入探討了如何使用程式碼來自訂 Spring Security 的安全設定，包括記憶體中使用者資料的設定、密碼編碼、HTTP 請求授權設定，以及將使用者資料儲存到 H2 資料庫中。文章詳細介紹了如何使用 BCryptPasswordEncoder 來安全地儲存密碼，並展示了如何自訂 UserDetailsService 和配置 HttpSecurity 以實現更靈活的 API 端點存取控制。此外，還提供了在使用 Spring Security 後，如何安全地存取 H2 console 的相關設定。這些進階設定使應用程式更加安全和可擴展",
      "image": "https://image.cashwu.com/2024/ithome/30day-day33-spring-security-advanced/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day33-spring-security-advanced"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 32.5 Spring Boot 測試進化：三種優雅的 JSON 驗證方法",
    "date": "2024-10-02T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "test"],
    "lastmod": "2024-10-02T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了在 Spring Boot 測試中使用 content().json()、JSONAssert 和物件比對三種方法來驗證 JSON，提高測試的可讀性、可靠性和維護性",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day32-5-spring-boot-testing-evolution-three-elegant-json-validation-methods/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.665, "time": 279900, "words": 933 },
    "slug": "2024/ithome/30day-day32-5-spring-boot-testing-evolution-three-elegant-json-validation-methods",
    "path": "blog/2024/ithome/30day-day32-5-spring-boot-testing-evolution-three-elegant-json-validation-methods",
    "filePath": "blog/2024/ithome/30day-day32-5-spring-boot-testing-evolution-three-elegant-json-validation-methods.mdx",
    "toc": [
      {
        "value": "使用 content().json() 進行直觀的 JSON 比對",
        "url": "#使用-contentjson-進行直觀的-json-比對",
        "depth": 2
      },
      {
        "value": "使用 JSONAssert 進行精確的 JSON 比對",
        "url": "#使用-jsonassert-進行精確的-json-比對",
        "depth": 2
      },
      { "value": "將 JSON 轉換為物件進行比對", "url": "#將-json-轉換為物件進行比對", "depth": 2 },
      { "value": "程式碼", "url": "#程式碼", "depth": 2 },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 32.5 Spring Boot 測試進化：三種優雅的 JSON 驗證方法",
      "datePublished": "2024-10-02T00:00:00.000Z",
      "dateModified": "2024-10-02T00:00:00.000Z",
      "summary": "本文介紹了在 Spring Boot 測試中使用 content().json()、JSONAssert 和物件比對三種方法來驗證 JSON，提高測試的可讀性、可靠性和維護性",
      "image": "https://image.cashwu.com/2024/ithome/30day-day32-5-spring-boot-testing-evolution-three-elegant-json-validation-methods/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day32-5-spring-boot-testing-evolution-three-elegant-json-validation-methods"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 32 Spring Security 基礎",
    "date": "2024-10-02T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "security"],
    "lastmod": "2024-10-02T00:00:00.000Z",
    "draft": false,
    "summary": "Spring Security 是一個功能豐富的安全框架，專門用於保護基於 Spring 的應用程式。本文介紹了 Spring Security 的基礎知識，包括身份驗證、授權、防護常見 Web 攻擊等主要功能。文章詳細說明了如何在 Spring Boot 中安裝和配置 Spring Security，並展示了預設設定、測試及 API 授權的實作方法。通過簡單配置，開發者可以為應用程式添加基本的安全防護",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day32-spring-security-basics/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.425, "time": 445500, "words": 1485 },
    "slug": "2024/ithome/30day-day32-spring-security-basics",
    "path": "blog/2024/ithome/30day-day32-spring-security-basics",
    "filePath": "blog/2024/ithome/30day-day32-spring-security-basics.mdx",
    "toc": [
      { "value": "什麼是 Spring Security？", "url": "#什麼是-spring-security", "depth": 2 },
      { "value": "主要功能", "url": "#主要功能", "depth": 3 },
      { "value": "限制", "url": "#限制", "depth": 3 },
      { "value": "修改程式碼", "url": "#修改程式碼", "depth": 2 },
      { "value": "增加依賴", "url": "#增加依賴", "depth": 3 },
      { "value": "預設設定", "url": "#預設設定", "depth": 3 },
      { "value": "測試 Security", "url": "#測試-security", "depth": 2 },
      { "value": "執行應用程式", "url": "#執行應用程式", "depth": 3 },
      { "value": "預設登入畫面", "url": "#預設登入畫面", "depth": 3 },
      { "value": "Security Cookie ", "url": "#security-cookie", "depth": 3 },
      { "value": "API 測試", "url": "#api-測試", "depth": 3 },
      { "value": "API 相關授權設定", "url": "#api-相關授權設定", "depth": 2 },
      { "value": "調整安全設定", "url": "#調整安全設定", "depth": 2 },
      { "value": "結論", "url": "#結論-1", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 32 Spring Security 基礎",
      "datePublished": "2024-10-02T00:00:00.000Z",
      "dateModified": "2024-10-02T00:00:00.000Z",
      "summary": "Spring Security 是一個功能豐富的安全框架，專門用於保護基於 Spring 的應用程式。本文介紹了 Spring Security 的基礎知識，包括身份驗證、授權、防護常見 Web 攻擊等主要功能。文章詳細說明了如何在 Spring Boot 中安裝和配置 Spring Security，並展示了預設設定、測試及 API 授權的實作方法。通過簡單配置，開發者可以為應用程式添加基本的安全防護",
      "image": "https://image.cashwu.com/2024/ithome/30day-day32-spring-security-basics/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day32-spring-security-basics"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 31 跨來源資源共享（CORS）",
    "date": "2024-10-01T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "cors", "security"],
    "lastmod": "2024-10-01T00:00:00.000Z",
    "draft": false,
    "summary": "CORS（跨來源資源共享）是現代網路開發中的重要概念，允許不同來源的網頁請求資源。本文介紹了在 Spring Boot 中應用 CORS 的方法，包括使用 @CrossOrigin 註解和全局配置。@CrossOrigin 註解適用於特定控制器或方法，而全局配置則適用於整個應用程式。文章還提供了設置和測試 CORS 的實際步驟，並強調了 CORS 在安全性和靈活性方面的重要性。通過適當配置，CORS 能夠有效防止未經授權的存取，同時允許跨網域通信",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day31-spring-boot-cors/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.53, "time": 451800, "words": 1506 },
    "slug": "2024/ithome/30day-day31-spring-boot-cors",
    "path": "blog/2024/ithome/30day-day31-spring-boot-cors",
    "filePath": "blog/2024/ithome/30day-day31-spring-boot-cors.mdx",
    "toc": [
      { "value": "跨來源資源共享（CORS）", "url": "#跨來源資源共享cors", "depth": 2 },
      { "value": "什麼是 CORS", "url": "#什麼是-cors", "depth": 3 },
      { "value": "CORS 對 API 的重要性", "url": "#cors-對-api-的重要性", "depth": 3 },
      { "value": "CORS 的應用場景", "url": "#cors-的應用場景", "depth": 3 },
      { "value": "在 Spring Boot 中設定 CORS", "url": "#在-spring-boot-中設定-cors", "depth": 2 },
      { "value": "使用 @CrossOrigin 註解", "url": "#使用-crossorigin-註解", "depth": 3 },
      { "value": "全局 CORS 配置", "url": "#全局-cors-配置", "depth": 3 },
      { "value": "實際測試 CORS 功能", "url": "#實際測試-cors-功能", "depth": 2 },
      { "value": "設置 Spring Boot 後端", "url": "#設置-spring-boot-後端", "depth": 3 },
      { "value": "建立前端頁面", "url": "#建立前端頁面", "depth": 3 },
      { "value": "運行和測試", "url": "#運行和測試", "depth": 3 },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 31 跨來源資源共享（CORS）",
      "datePublished": "2024-10-01T00:00:00.000Z",
      "dateModified": "2024-10-01T00:00:00.000Z",
      "summary": "CORS（跨來源資源共享）是現代網路開發中的重要概念，允許不同來源的網頁請求資源。本文介紹了在 Spring Boot 中應用 CORS 的方法，包括使用 @CrossOrigin 註解和全局配置。@CrossOrigin 註解適用於特定控制器或方法，而全局配置則適用於整個應用程式。文章還提供了設置和測試 CORS 的實際步驟，並強調了 CORS 在安全性和靈活性方面的重要性。通過適當配置，CORS 能夠有效防止未經授權的存取，同時允許跨網域通信",
      "image": "https://image.cashwu.com/2024/ithome/30day-day31-spring-boot-cors/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day31-spring-boot-cors"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 30 Rest Assured 測試",
    "date": "2024-09-30T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "test"],
    "lastmod": "2024-09-30T00:00:00.000Z",
    "draft": false,
    "summary": "REST Assured 是一個強大的 Java 函式庫，用於測試 RESTful API。本文介紹了 REST Assured 的基本用法，包括設定前置條件、發送請求和驗證回應。透過 BDD 風格的測試，使程式碼更易讀。文章還討論了 REST Assured 與 Hamcrest 和 AssertJ 的整合，進一步提升測試的靈活性和表達力。最後，文章比較了 SpringBootTest 和 REST Assured 的優缺點，強調了 REST Assured 在 API 測試中的優勢及其應用場景",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day30-spring-boot-rest-assured/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.605, "time": 456300, "words": 1521 },
    "slug": "2024/ithome/30day-day30-spring-boot-rest-assured",
    "path": "blog/2024/ithome/30day-day30-spring-boot-rest-assured",
    "filePath": "blog/2024/ithome/30day-day30-spring-boot-rest-assured.mdx",
    "toc": [
      { "value": "REST Assured 簡介", "url": "#rest-assured-簡介", "depth": 2 },
      { "value": "主要用途", "url": "#主要用途", "depth": 3 },
      { "value": "使用方法", "url": "#使用方法", "depth": 3 },
      { "value": "限制", "url": "#限制-1", "depth": 3 },
      { "value": "REST Assured 與測試驗證工具", "url": "#rest-assured-與測試驗證工具", "depth": 2 },
      { "value": "Hamcrest", "url": "#hamcrest", "depth": 3 },
      { "value": "AssertJ", "url": "#assertj", "depth": 3 },
      { "value": "調整端對端測試", "url": "#調整端對端測試", "depth": 2 },
      {
        "value": "SpringBootTest 與 REST Assured 的比較",
        "url": "#springboottest-與-rest-assured-的比較",
        "depth": 2
      },
      { "value": "SpringBootTest", "url": "#springboottest", "depth": 3 },
      { "value": "REST Assured", "url": "#rest-assured", "depth": 3 },
      { "value": "結論", "url": "#結論-2", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 30 Rest Assured 測試",
      "datePublished": "2024-09-30T00:00:00.000Z",
      "dateModified": "2024-09-30T00:00:00.000Z",
      "summary": "REST Assured 是一個強大的 Java 函式庫，用於測試 RESTful API。本文介紹了 REST Assured 的基本用法，包括設定前置條件、發送請求和驗證回應。透過 BDD 風格的測試，使程式碼更易讀。文章還討論了 REST Assured 與 Hamcrest 和 AssertJ 的整合，進一步提升測試的靈活性和表達力。最後，文章比較了 SpringBootTest 和 REST Assured 的優缺點，強調了 REST Assured 在 API 測試中的優勢及其應用場景",
      "image": "https://image.cashwu.com/2024/ithome/30day-day30-spring-boot-rest-assured/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day30-spring-boot-rest-assured"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 29 SpringBootTest 測試",
    "date": "2024-09-29T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "test"],
    "lastmod": "2024-09-29T00:00:00.000Z",
    "draft": false,
    "summary": "SpringBootTest 是一個強大的測試工具，允許在測試環境中啟動完整的 Spring 應用程式，進行整合測試和 EndtoEnd 測試。本文介紹如何為應用程式實作 end-to-end 測試，包括設置測試 properties 文件、撰寫測試類別，並使用 TestRestTemplate 進行 HTTP 請求和驗證回應。通過這種測試方法，可以確保應用程式的各個組件正確協同工作，儘管相比單元測試更耗時和資源，但能捕捉到單元測試可能遺漏的問題，特別是在組件整合方面",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day29-spring-boot-springboottest/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.87, "time": 352200, "words": 1174 },
    "slug": "2024/ithome/30day-day29-spring-boot-springboottest",
    "path": "blog/2024/ithome/30day-day29-spring-boot-springboottest",
    "filePath": "blog/2024/ithome/30day-day29-spring-boot-springboottest.mdx",
    "toc": [
      { "value": "SpringBootTest 簡介", "url": "#springboottest-簡介", "depth": 2 },
      { "value": "主要用途", "url": "#主要用途", "depth": 3 },
      { "value": "限制", "url": "#限制", "depth": 3 },
      { "value": "端對端測試", "url": "#端對端測試", "depth": 2 },
      { "value": "測試 properties 檔案", "url": "#測試-properties-檔案", "depth": 3 },
      { "value": "結論", "url": "#結論-1", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 29 SpringBootTest 測試",
      "datePublished": "2024-09-29T00:00:00.000Z",
      "dateModified": "2024-09-29T00:00:00.000Z",
      "summary": "SpringBootTest 是一個強大的測試工具，允許在測試環境中啟動完整的 Spring 應用程式，進行整合測試和 EndtoEnd 測試。本文介紹如何為應用程式實作 end-to-end 測試，包括設置測試 properties 文件、撰寫測試類別，並使用 TestRestTemplate 進行 HTTP 請求和驗證回應。通過這種測試方法，可以確保應用程式的各個組件正確協同工作，儘管相比單元測試更耗時和資源，但能捕捉到單元測試可能遺漏的問題，特別是在組件整合方面",
      "image": "https://image.cashwu.com/2024/ithome/30day-day29-spring-boot-springboottest/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day29-spring-boot-springboottest"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 28 DataJpaTest 測試",
    "date": "2024-09-28T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "test"],
    "lastmod": "2024-09-28T00:00:00.000Z",
    "draft": false,
    "summary": "使用 Spring 框架的 DataJpaTest 進行 JPA 測試，專注於測試資料庫操作而無需設置完整應用程式。本篇文章介紹如何使用 @DataJpaTest 註解、自動配置記憶體資料庫、執行 @Entity 類別掃描及啟用 SQL 日誌記錄。透過測試 TodoRepository 的自定義查詢方法和 JPQL 方法，確保每個測試方法的初始狀態一致，並驗證查詢結果的正確性。這種方法不僅高效可靠，還能提高程式碼的可靠性，並在重構或優化時提供安全保障。",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day28-spring-boot-datajpatest/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.235, "time": 194100, "words": 647 },
    "slug": "2024/ithome/30day-day28-spring-boot-datajpatest",
    "path": "blog/2024/ithome/30day-day28-spring-boot-datajpatest",
    "filePath": "blog/2024/ithome/30day-day28-spring-boot-datajpatest.mdx",
    "toc": [
      { "value": "DataJpaTest 的主要用途", "url": "#datajpatest-的主要用途", "depth": 2 },
      { "value": "使用方法和限制", "url": "#使用方法和限制", "depth": 2 },
      { "value": "測試 TodoRepository", "url": "#測試-todorepository", "depth": 2 },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 28 DataJpaTest 測試",
      "datePublished": "2024-09-28T00:00:00.000Z",
      "dateModified": "2024-09-28T00:00:00.000Z",
      "summary": "使用 Spring 框架的 DataJpaTest 進行 JPA 測試，專注於測試資料庫操作而無需設置完整應用程式。本篇文章介紹如何使用 @DataJpaTest 註解、自動配置記憶體資料庫、執行 @Entity 類別掃描及啟用 SQL 日誌記錄。透過測試 TodoRepository 的自定義查詢方法和 JPQL 方法，確保每個測試方法的初始狀態一致，並驗證查詢結果的正確性。這種方法不僅高效可靠，還能提高程式碼的可靠性，並在重構或優化時提供安全保障。",
      "image": "https://image.cashwu.com/2024/ithome/30day-day28-spring-boot-datajpatest/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day28-spring-boot-datajpatest"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 27 MockMvc 測試",
    "date": "2024-09-27T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "test"],
    "lastmod": "2024-09-27T00:00:00.000Z",
    "draft": false,
    "summary": "使用 MockMVC 測試 Spring MVC 應用程式的控制器是有效的方法，它允許開發者模擬 HTTP 請求而無需啟動伺服器。本文介紹了如何使用 @WebMvcTest 註解來專門測試控制器，以及如何利用 @MockBean 模擬服務層行為，並通過 MockMvc 模擬 HTTP 請求。文中詳細展示了 CRUD 操作的測試案例，涵蓋了創建、查詢、更新和刪除待辦事項的各種情境，並強調了驗證回應狀態碼和內容的重要性。建議為每個控制器方法編寫全面的測試案例，以提高應用品質",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day27-spring-boot-mockmvc-test/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.06, "time": 303600, "words": 1012 },
    "slug": "2024/ithome/30day-day27-spring-boot-mockmvc-test",
    "path": "blog/2024/ithome/30day-day27-spring-boot-mockmvc-test",
    "filePath": "blog/2024/ithome/30day-day27-spring-boot-mockmvc-test.mdx",
    "toc": [
      { "value": "MockMVC Test 的主要用途", "url": "#mockmvc-test-的主要用途", "depth": 2 },
      { "value": "MockMVC 測試中的重要註解", "url": "#mockmvc-測試中的重要註解", "depth": 2 },
      { "value": "@WebMvcTest", "url": "#webmvctest", "depth": 3 },
      { "value": "@MockBean", "url": "#mockbean", "depth": 3 },
      { "value": "@Autowired", "url": "#autowired", "depth": 3 },
      {
        "value": "TodoController 的 MockMVC 測試",
        "url": "#todocontroller-的-mockmvc-測試",
        "depth": 2
      },
      { "value": "結論", "url": "#結論-3", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-3", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 27 MockMvc 測試",
      "datePublished": "2024-09-27T00:00:00.000Z",
      "dateModified": "2024-09-27T00:00:00.000Z",
      "summary": "使用 MockMVC 測試 Spring MVC 應用程式的控制器是有效的方法，它允許開發者模擬 HTTP 請求而無需啟動伺服器。本文介紹了如何使用 @WebMvcTest 註解來專門測試控制器，以及如何利用 @MockBean 模擬服務層行為，並通過 MockMvc 模擬 HTTP 請求。文中詳細展示了 CRUD 操作的測試案例，涵蓋了創建、查詢、更新和刪除待辦事項的各種情境，並強調了驗證回應狀態碼和內容的重要性。建議為每個控制器方法編寫全面的測試案例，以提高應用品質",
      "image": "https://image.cashwu.com/2024/ithome/30day-day27-spring-boot-mockmvc-test/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day27-spring-boot-mockmvc-test"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 26 單元測試",
    "date": "2024-09-26T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "test"],
    "lastmod": "2024-09-26T00:00:00.000Z",
    "draft": false,
    "summary": "探索如何為 Spring Boot 應用程式撰寫單元測試。單元測試驗證程式碼的最小單位是否按預期運作。文章介紹 Spring Boot 測試工具如 @WebMvcTest、@DataJpaTest、@MockBean 和 @SpringBootTest，並使用 JUnit 5 和 Mockito 撰寫測試。通過這些測試，確保程式碼的品質、可維護性和可靠性。學習如何模擬對象行為並驗證方法呼叫次數",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day26-spring-boot-unit-test/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "11 min read", "minutes": 10.09, "time": 605400, "words": 2018 },
    "slug": "2024/ithome/30day-day26-spring-boot-unit-test",
    "path": "blog/2024/ithome/30day-day26-spring-boot-unit-test",
    "filePath": "blog/2024/ithome/30day-day26-spring-boot-unit-test.mdx",
    "toc": [
      { "value": "什麼是單元測試？", "url": "#什麼是單元測試", "depth": 2 },
      { "value": "測試 3A 原則", "url": "#測試-3a-原則", "depth": 2 },
      { "value": "JUnit 測試框架", "url": "#junit-測試框架", "depth": 2 },
      { "value": "JUnit 5 的相關註解", "url": "#junit-5-的相關註解", "depth": 3 },
      { "value": "JUnit 5 的相關驗證", "url": "#junit-5-的相關驗證", "depth": 3 },
      { "value": "Mokito 單元測試模擬套件", "url": "#mokito-單元測試模擬套件", "depth": 2 },
      { "value": "Mokito 的作用", "url": "#mokito-的作用", "depth": 3 },
      { "value": "Mokito 相關 API", "url": "#mokito-相關-api", "depth": 3 },
      { "value": "TodoService 的單元測試", "url": "#todoservice-的單元測試", "depth": 2 },
      { "value": "save 測試", "url": "#save-測試", "depth": 3 },
      { "value": "findById 測試", "url": "#findbyid-測試", "depth": 3 },
      { "value": "deleteTodo 測試", "url": "#deletetodo-測試", "depth": 3 },
      { "value": "getPagedTodos 測試", "url": "#getpagedtodos-測試", "depth": 3 },
      {
        "value": "同場加映：Spring Boot 的相關工具",
        "url": "#同場加映spring-boot-的相關工具",
        "depth": 2
      },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 26 單元測試",
      "datePublished": "2024-09-26T00:00:00.000Z",
      "dateModified": "2024-09-26T00:00:00.000Z",
      "summary": "探索如何為 Spring Boot 應用程式撰寫單元測試。單元測試驗證程式碼的最小單位是否按預期運作。文章介紹 Spring Boot 測試工具如 @WebMvcTest、@DataJpaTest、@MockBean 和 @SpringBootTest，並使用 JUnit 5 和 Mockito 撰寫測試。通過這些測試，確保程式碼的品質、可維護性和可靠性。學習如何模擬對象行為並驗證方法呼叫次數",
      "image": "https://image.cashwu.com/2024/ithome/30day-day26-spring-boot-unit-test/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day26-spring-boot-unit-test"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 25 從 H2 到 PostgreSQL",
    "date": "2024-09-25T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-25T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹如何在 Spring Boot 專案中從 H2 資料庫轉換到 PostgreSQL，包括使用 Supabase 建立 PostgreSQL 資料庫、修改依賴和配置、調整程式碼等步驟。文章還討論了 PostgreSQL 的優勢、大小寫問題，以及使用 Spring Data JPA 實現無縫資料庫切換的便利性",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day25-spring-data-jpa-migrating-from-h2-to-postgresql/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.84, "time": 350400, "words": 1168 },
    "slug": "2024/ithome/30day-day25-spring-data-jpa-migrating-from-h2-to-postgresql",
    "path": "blog/2024/ithome/30day-day25-spring-data-jpa-migrating-from-h2-to-postgresql",
    "filePath": "blog/2024/ithome/30day-day25-spring-data-jpa-migrating-from-h2-to-postgresql.mdx",
    "toc": [
      { "value": "為什麼選擇 PostgreSQL？", "url": "#為什麼選擇-postgresql", "depth": 2 },
      { "value": "更換成 PostgreSQL", "url": "#更換成-postgresql", "depth": 2 },
      { "value": "使用 supabase", "url": "#使用-supabase", "depth": 3 },
      { "value": "增加依賴", "url": "#增加依賴", "depth": 3 },
      { "value": "修改應用程式配置", "url": "#修改應用程式配置", "depth": 3 },
      { "value": "修改程式碼", "url": "#修改程式碼", "depth": 3 },
      { "value": "其它", "url": "#其它", "depth": 3 },
      { "value": "測試", "url": "#測試", "depth": 3 },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "備註", "url": "#備註", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 25 從 H2 到 PostgreSQL",
      "datePublished": "2024-09-25T00:00:00.000Z",
      "dateModified": "2024-09-25T00:00:00.000Z",
      "summary": "本文介紹如何在 Spring Boot 專案中從 H2 資料庫轉換到 PostgreSQL，包括使用 Supabase 建立 PostgreSQL 資料庫、修改依賴和配置、調整程式碼等步驟。文章還討論了 PostgreSQL 的優勢、大小寫問題，以及使用 Spring Data JPA 實現無縫資料庫切換的便利性",
      "image": "https://image.cashwu.com/2024/ithome/30day-day25-spring-data-jpa-migrating-from-h2-to-postgresql/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day25-spring-data-jpa-migrating-from-h2-to-postgresql"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 24 JPA 交易管理",
    "date": "2024-09-24T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-24T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了 Spring Data JPA 中的交易管理實現。文章首先介紹了交易管理的概念和 ACID 特性，然後詳細說明了如何使用 @Transactional 註解來實現交易控制。文章提供了具體的程式碼示例。此外，文章分析了交易管理的優缺點，包括保證資料一致性的優點，以及可能帶來的性能開銷等缺點。最後，文章提供了一些實務上的建議，如合理劃分交易邊界和避免長時間交易等。這篇文章為 Spring Boot 開發者提供了全面的交易管理實現指南，有助於提高應用程式的資料一致性和完整性",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day24-spring-data-jpa-jpa-transaction-management/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.085, "time": 485100, "words": 1617 },
    "slug": "2024/ithome/30day-day24-spring-data-jpa-jpa-transaction-management",
    "path": "blog/2024/ithome/30day-day24-spring-data-jpa-jpa-transaction-management",
    "filePath": "blog/2024/ithome/30day-day24-spring-data-jpa-jpa-transaction-management.mdx",
    "toc": [
      { "value": "資料庫的交易管理", "url": "#資料庫的交易管理", "depth": 2 },
      { "value": "什麼是交易管理？", "url": "#什麼是交易管理", "depth": 3 },
      { "value": "ACID", "url": "#acid", "depth": 3 },
      { "value": "JPA 的 @Transactional 實作", "url": "#jpa-的-transactional-實作", "depth": 2 },
      { "value": "新增 TodoService", "url": "#新增-todoservice", "depth": 3 },
      { "value": "修改 Controller", "url": "#修改-controller", "depth": 3 },
      { "value": "測試", "url": "#測試", "depth": 3 },
      { "value": "為什麼要加上 TodoService", "url": "#為什麼要加上-todoservice", "depth": 3 },
      { "value": "交易的優缺點", "url": "#交易的優缺點", "depth": 2 },
      { "value": "優點", "url": "#優點", "depth": 3 },
      { "value": "缺點", "url": "#缺點", "depth": 3 },
      { "value": "實務上的建議作法", "url": "#實務上的建議作法", "depth": 2 },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 24 JPA 交易管理",
      "datePublished": "2024-09-24T00:00:00.000Z",
      "dateModified": "2024-09-24T00:00:00.000Z",
      "summary": "本文深入探討了 Spring Data JPA 中的交易管理實現。文章首先介紹了交易管理的概念和 ACID 特性，然後詳細說明了如何使用 @Transactional 註解來實現交易控制。文章提供了具體的程式碼示例。此外，文章分析了交易管理的優缺點，包括保證資料一致性的優點，以及可能帶來的性能開銷等缺點。最後，文章提供了一些實務上的建議，如合理劃分交易邊界和避免長時間交易等。這篇文章為 Spring Boot 開發者提供了全面的交易管理實現指南，有助於提高應用程式的資料一致性和完整性",
      "image": "https://image.cashwu.com/2024/ithome/30day-day24-spring-data-jpa-jpa-transaction-management/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day24-spring-data-jpa-jpa-transaction-management"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 23 JPA 實現分頁與動態排序",
    "date": "2024-09-23T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-23T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了如何在 Spring Data JPA 中實現分頁和動態排序功能。文章首先介紹了分頁的實現方法，包括在程式碼中添加分頁方法，以及在 Controller 中使用 Pageable 物件來處理分頁請求。接著，文章詳細說明了如何實現動態排序，通過在控制器方法中添加排序參數，並使用 Sort 物件來定義排序規則。文章還提供了具體的程式碼示例和測試結果，展示了如何同時使用分頁和排序功能。最後，文章分析了分頁和動態排序的優缺點。這篇文章為 Spring Boot 開發者提供了全面的分頁和動態排序實現指南，有助於提高應用程式處理大量資料的能力。",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day23-spring-data-jpa-pagination-dynamic-sorting/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.215, "time": 372900, "words": 1243 },
    "slug": "2024/ithome/30day-day23-spring-data-jpa-pagination-dynamic-sorting",
    "path": "blog/2024/ithome/30day-day23-spring-data-jpa-pagination-dynamic-sorting",
    "filePath": "blog/2024/ithome/30day-day23-spring-data-jpa-pagination-dynamic-sorting.mdx",
    "toc": [
      { "value": "分頁", "url": "#分頁", "depth": 2 },
      { "value": "修改 Repository", "url": "#修改-repository", "depth": 3 },
      { "value": "修改 Controller", "url": "#修改-controller", "depth": 3 },
      { "value": "測試", "url": "#測試-1", "depth": 3 },
      { "value": "動態排序", "url": "#動態排序", "depth": 2 },
      { "value": "修改 Controller", "url": "#修改-controller-1", "depth": 3 },
      { "value": "測試", "url": "#測試-2", "depth": 3 },
      { "value": "分頁和動態排序的優缺點", "url": "#分頁和動態排序的優缺點", "depth": 2 },
      { "value": "優點", "url": "#優點-1", "depth": 3 },
      { "value": "缺點", "url": "#缺點-1", "depth": 3 },
      { "value": "結論", "url": "#結論-1", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 23 JPA 實現分頁與動態排序",
      "datePublished": "2024-09-23T00:00:00.000Z",
      "dateModified": "2024-09-23T00:00:00.000Z",
      "summary": "本文深入探討了如何在 Spring Data JPA 中實現分頁和動態排序功能。文章首先介紹了分頁的實現方法，包括在程式碼中添加分頁方法，以及在 Controller 中使用 Pageable 物件來處理分頁請求。接著，文章詳細說明了如何實現動態排序，通過在控制器方法中添加排序參數，並使用 Sort 物件來定義排序規則。文章還提供了具體的程式碼示例和測試結果，展示了如何同時使用分頁和排序功能。最後，文章分析了分頁和動態排序的優缺點。這篇文章為 Spring Boot 開發者提供了全面的分頁和動態排序實現指南，有助於提高應用程式處理大量資料的能力。",
      "image": "https://image.cashwu.com/2024/ithome/30day-day23-spring-data-jpa-pagination-dynamic-sorting/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day23-spring-data-jpa-pagination-dynamic-sorting"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 22 JPA JPQL 與原生 SQL",
    "date": "2024-09-22T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-22T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了 Spring Data JPA 中 JPQL（Java Persistence Query Language）的使用。文章首先介紹了 JPQL 的基本概念、規則以及與 SQL 的區別。接著，文章展示了如何在程式碼中使用 @Query 註解實現 JPQL 查詢，並詳細解釋了每個查詢的含義。文章還簡要介紹了如何使用原生 SQL 查詢。此外，文章分析了 JPQL 的優缺點。最後，文章提供了一系列最佳實踐建議。這篇文章為 Spring Boot 開發者提供了全面的 JPQL 使用指南，有助於提高查詢的靈活性和效率",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day22-spring-data-jpa-jpql/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.815, "time": 348900, "words": 1163 },
    "slug": "2024/ithome/30day-day22-spring-data-jpa-jpql",
    "path": "blog/2024/ithome/30day-day22-spring-data-jpa-jpql",
    "filePath": "blog/2024/ithome/30day-day22-spring-data-jpa-jpql.mdx",
    "toc": [
      { "value": "JPQL 簡介", "url": "#jpql-簡介", "depth": 2 },
      { "value": "相關規則", "url": "#相關規則", "depth": 3 },
      { "value": "與 SQL 的區別", "url": "#與-sql-的區別", "depth": 3 },
      { "value": "修改程式碼", "url": "#修改程式碼", "depth": 2 },
      { "value": "測試", "url": "#測試", "depth": 3 },
      { "value": "原生 SQL", "url": "#原生-sql", "depth": 3 },
      { "value": "JPQL 的優缺點", "url": "#jpql-的優缺點", "depth": 2 },
      { "value": "優點", "url": "#優點", "depth": 3 },
      { "value": "缺點", "url": "#缺點", "depth": 3 },
      { "value": "最佳實務", "url": "#最佳實務", "depth": 2 },
      { "value": "結論", "url": "#結論", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 22 JPA JPQL 與原生 SQL",
      "datePublished": "2024-09-22T00:00:00.000Z",
      "dateModified": "2024-09-22T00:00:00.000Z",
      "summary": "本文深入探討了 Spring Data JPA 中 JPQL（Java Persistence Query Language）的使用。文章首先介紹了 JPQL 的基本概念、規則以及與 SQL 的區別。接著，文章展示了如何在程式碼中使用 @Query 註解實現 JPQL 查詢，並詳細解釋了每個查詢的含義。文章還簡要介紹了如何使用原生 SQL 查詢。此外，文章分析了 JPQL 的優缺點。最後，文章提供了一系列最佳實踐建議。這篇文章為 Spring Boot 開發者提供了全面的 JPQL 使用指南，有助於提高查詢的靈活性和效率",
      "image": "https://image.cashwu.com/2024/ithome/30day-day22-spring-data-jpa-jpql/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day22-spring-data-jpa-jpql"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 21 JPA 自定義查詢方法",
    "date": "2024-09-21T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-21T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了 Spring Data JPA 中自定義查詢方法的使用。文章首先介紹了自定義查詢方法的基本規則和語法，包括方法命名規則和常用關鍵字。接著，文章展示了如何實現自定義查詢方法，並使用這些方法。文章還詳細分析了自定義查詢方法的優缺點。最後，文章提供了一系列最佳實踐建議",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day21-spring-data-jpa-query-methods/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.41, "time": 324600, "words": 1082 },
    "slug": "2024/ithome/30day-day21-spring-data-jpa-query-methods",
    "path": "blog/2024/ithome/30day-day21-spring-data-jpa-query-methods",
    "filePath": "blog/2024/ithome/30day-day21-spring-data-jpa-query-methods.mdx",
    "toc": [
      { "value": "相關規則", "url": "#相關規則-1", "depth": 2 },
      { "value": "範例", "url": "#範例", "depth": 3 },
      { "value": "修改程式碼", "url": "#修改程式碼-1", "depth": 2 },
      { "value": "修改 Repository", "url": "#修改-repository-1", "depth": 3 },
      { "value": "修改 Controller", "url": "#修改-controller-2", "depth": 3 },
      { "value": "測試", "url": "#測試-3", "depth": 3 },
      { "value": "自定義查詢方法的優缺點", "url": "#自定義查詢方法的優缺點", "depth": 2 },
      { "value": "優點", "url": "#優點-2", "depth": 3 },
      { "value": "缺點", "url": "#缺點-2", "depth": 3 },
      { "value": "最佳實務", "url": "#最佳實務-1", "depth": 2 },
      { "value": "結論", "url": "#結論-2", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 21 JPA 自定義查詢方法",
      "datePublished": "2024-09-21T00:00:00.000Z",
      "dateModified": "2024-09-21T00:00:00.000Z",
      "summary": "本文深入探討了 Spring Data JPA 中自定義查詢方法的使用。文章首先介紹了自定義查詢方法的基本規則和語法，包括方法命名規則和常用關鍵字。接著，文章展示了如何實現自定義查詢方法，並使用這些方法。文章還詳細分析了自定義查詢方法的優缺點。最後，文章提供了一系列最佳實踐建議",
      "image": "https://image.cashwu.com/2024/ithome/30day-day21-spring-data-jpa-query-methods/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day21-spring-data-jpa-query-methods"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 20 Spring Data JPA",
    "date": "2024-09-20T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-20T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了 Spring Data JPA 的特點及其與 Spring Data JDBC 的比較。文章首先介紹了 Spring Data JPA 的主要特點，包括簡化開發、方法名稱查詢、分頁和排序支援等。接著，文章詳細說明了如何在 Spring Boot 項目中集成 Spring Data JPA，包括添加依賴、修改實體類別和建立 Repository。文章還對比了 Spring Data JPA 和 Spring Data JDBC 在複雜度、效能、查詢能力、關聯處理、延遲載入和事務處理等方面的差異。最後，文章提供了實務上的選擇建議，幫助開發者根據專案需求選擇合適的數據訪問框架。這篇文章為 Spring Boot 開發者提供了全面的 Spring Data JPA 使用指南，有助於理解和選擇適合項目需求的 ORM 框架",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day20-spring-data-jpa/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.69, "time": 341400, "words": 1138 },
    "slug": "2024/ithome/30day-day20-spring-data-jpa",
    "path": "blog/2024/ithome/30day-day20-spring-data-jpa",
    "filePath": "blog/2024/ithome/30day-day20-spring-data-jpa.mdx",
    "toc": [
      { "value": "Spring Data JPA 簡介", "url": "#spring-data-jpa-簡介", "depth": 2 },
      { "value": "主要特點", "url": "#主要特點", "depth": 3 },
      { "value": "預設 ORM 套件", "url": "#預設-orm-套件", "depth": 3 },
      { "value": "調整程式碼", "url": "#調整程式碼", "depth": 2 },
      { "value": "增加依賴", "url": "#增加依賴", "depth": 3 },
      { "value": "修改實體類別", "url": "#修改實體類別", "depth": 3 },
      { "value": "修改 Repository", "url": "#修改-repository", "depth": 3 },
      {
        "value": "Spring Data JDBC 和 Spring Data JPA 的比較",
        "url": "#spring-data-jdbc-和-spring-data-jpa-的比較",
        "depth": 2
      },
      { "value": "複雜度", "url": "#複雜度", "depth": 3 },
      { "value": "效能", "url": "#效能", "depth": 3 },
      { "value": "查詢能力", "url": "#查詢能力", "depth": 3 },
      { "value": "關聯處理", "url": "#關聯處理", "depth": 3 },
      { "value": "延遲載入", "url": "#延遲載入", "depth": 3 },
      { "value": "事務處理", "url": "#事務處理", "depth": 3 },
      { "value": "實務上的建議", "url": "#實務上的建議", "depth": 2 },
      { "value": "總結", "url": "#總結", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 20 Spring Data JPA",
      "datePublished": "2024-09-20T00:00:00.000Z",
      "dateModified": "2024-09-20T00:00:00.000Z",
      "summary": "本文深入探討了 Spring Data JPA 的特點及其與 Spring Data JDBC 的比較。文章首先介紹了 Spring Data JPA 的主要特點，包括簡化開發、方法名稱查詢、分頁和排序支援等。接著，文章詳細說明了如何在 Spring Boot 項目中集成 Spring Data JPA，包括添加依賴、修改實體類別和建立 Repository。文章還對比了 Spring Data JPA 和 Spring Data JDBC 在複雜度、效能、查詢能力、關聯處理、延遲載入和事務處理等方面的差異。最後，文章提供了實務上的選擇建議，幫助開發者根據專案需求選擇合適的數據訪問框架。這篇文章為 Spring Boot 開發者提供了全面的 Spring Data JPA 使用指南，有助於理解和選擇適合項目需求的 ORM 框架",
      "image": "https://image.cashwu.com/2024/ithome/30day-day20-spring-data-jpa/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day20-spring-data-jpa"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 19 Spring Data JDBC",
    "date": "2024-09-19T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-19T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了 Spring Data JDBC 的使用方法及其與 JdbcClient 的比較。文章首先介紹了 Spring Data JDBC 的主要特點，包括簡單性、無狀態概念和自動化 CRUD 操作等。接著，文章詳細說明了如何在 Spring Boot 項目中集成 Spring Data JDBC，包括添加依賴、修改實體類別和創建 Repository。文章還提供了使用 Spring Data JDBC 重寫 TodoController 的完整代碼示例。最後，文章對比了 Spring Data JDBC 和 JdbcClient 在抽象層級、程式碼量、靈活性、學習曲線和性能等方面的差異，並提供了實務上的選擇建議。這篇文章為 Spring Boot 開發者提供了全面的 Spring Data JDBC 使用指南，有助於選擇適合項目需求的數據訪問方法",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day19-spring-data-jdbc/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.405, "time": 384300, "words": 1281 },
    "slug": "2024/ithome/30day-day19-spring-data-jdbc",
    "path": "blog/2024/ithome/30day-day19-spring-data-jdbc",
    "filePath": "blog/2024/ithome/30day-day19-spring-data-jdbc.mdx",
    "toc": [
      { "value": "Spring Data JDBC 簡介", "url": "#spring-data-jdbc-簡介-2", "depth": 2 },
      { "value": "主要特點", "url": "#主要特點-6", "depth": 3 },
      { "value": "調整程式碼", "url": "#調整程式碼-6", "depth": 2 },
      { "value": "增加依賴", "url": "#增加依賴-14", "depth": 3 },
      { "value": "修改實體類別", "url": "#修改實體類別-4", "depth": 3 },
      { "value": "增加 Repository", "url": "#增加-repository-2", "depth": 3 },
      { "value": "修改 TodoController", "url": "#修改-todocontroller-6", "depth": 3 },
      {
        "value": "Spring Data JDBC 與 JdbcClient 的比較",
        "url": "#spring-data-jdbc-與-jdbcclient-的比較-2",
        "depth": 2
      },
      { "value": "抽象層級", "url": "#抽象層級-2", "depth": 3 },
      { "value": "程式碼", "url": "#程式碼-2", "depth": 3 },
      { "value": "靈活性", "url": "#靈活性-2", "depth": 3 },
      { "value": "學習曲線", "url": "#學習曲線-4", "depth": 3 },
      { "value": "性能", "url": "#性能-2", "depth": 3 },
      { "value": "領域模型支援", "url": "#領域模型支援-2", "depth": 3 },
      { "value": "實務上的建議", "url": "#實務上的建議-4", "depth": 3 },
      { "value": "總結", "url": "#總結-23", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-90", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 19 Spring Data JDBC",
      "datePublished": "2024-09-19T00:00:00.000Z",
      "dateModified": "2024-09-19T00:00:00.000Z",
      "summary": "本文深入探討了 Spring Data JDBC 的使用方法及其與 JdbcClient 的比較。文章首先介紹了 Spring Data JDBC 的主要特點，包括簡單性、無狀態概念和自動化 CRUD 操作等。接著，文章詳細說明了如何在 Spring Boot 項目中集成 Spring Data JDBC，包括添加依賴、修改實體類別和創建 Repository。文章還提供了使用 Spring Data JDBC 重寫 TodoController 的完整代碼示例。最後，文章對比了 Spring Data JDBC 和 JdbcClient 在抽象層級、程式碼量、靈活性、學習曲線和性能等方面的差異，並提供了實務上的選擇建議。這篇文章為 Spring Boot 開發者提供了全面的 Spring Data JDBC 使用指南，有助於選擇適合項目需求的數據訪問方法",
      "image": "https://image.cashwu.com/2024/ithome/30day-day19-spring-data-jdbc/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day19-spring-data-jdbc"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 18 JdbcTemplate 與 JdbcClient",
    "date": "2024-09-18T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-18T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入探討了 Spring Boot 中使用 JdbcTemplate 和 JdbcClient 來簡化資料庫操作的方法。文章首先介紹了 JDBC API 和原生 Java SQL 的關係，然後詳細說明了如何使用 JdbcTemplate 和 JdbcClient 改寫之前的 TodoController。文章提供了兩種實現方式的完整程式碼示例，並對比了它們與原生 Java SQL 在程式碼簡潔度、異常處理、資源管理、類型安全性等方面的差異。最後，文章總結了 JdbcTemplate 和 JdbcClient 的主要優勢，並提供了選擇適當工具的建議。這篇文章為 Spring Boot 開發者提供了全面的 JDBC 操作優化指南，有助於提高開發效率和程式碼質量",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day18-jdbcTemplate-jdbcClient/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "13 min read", "minutes": 12.83, "time": 769800, "words": 2566 },
    "slug": "2024/ithome/30day-day18-jdbcTemplate-jdbcClient",
    "path": "blog/2024/ithome/30day-day18-jdbcTemplate-jdbcClient",
    "filePath": "blog/2024/ithome/30day-day18-jdbcTemplate-jdbcClient.mdx",
    "toc": [
      { "value": "JDBC API 和原生 Java SQL", "url": "#jdbc-api-和原生-java-sql-1", "depth": 2 },
      { "value": "主要區別", "url": "#主要區別-1", "depth": 3 },
      {
        "value": "JdbcTemplate 和 JdbcClient 簡介",
        "url": "#jdbctemplate-和-jdbcclient-簡介-1",
        "depth": 2
      },
      { "value": "JdbcTemplate", "url": "#jdbctemplate-1", "depth": 3 },
      { "value": "JdbcClient", "url": "#jdbcclient-1", "depth": 3 },
      { "value": "調整程式碼", "url": "#調整程式碼-5", "depth": 2 },
      { "value": "增加依賴", "url": "#增加依賴-12", "depth": 3 },
      { "value": "相關設定", "url": "#相關設定-1", "depth": 3 },
      { "value": "使用 JdbcTemplate", "url": "#使用-jdbctemplate-1", "depth": 3 },
      { "value": "使用 JdbcClient", "url": "#使用-jdbcclient-1", "depth": 3 },
      {
        "value": "JdbcTemplate、JdbcClient 與原生 Java SQL 的比較",
        "url": "#jdbctemplatejdbcclient-與原生-java-sql-的比較-1",
        "depth": 2
      },
      { "value": "程式碼簡潔度", "url": "#程式碼簡潔度-1", "depth": 3 },
      { "value": "異常處理", "url": "#異常處理-1", "depth": 3 },
      { "value": "資源管理", "url": "#資源管理-1", "depth": 3 },
      { "value": "類型安全", "url": "#類型安全-1", "depth": 3 },
      { "value": "學習曲線", "url": "#學習曲線-3", "depth": 3 },
      { "value": "功能豐富度", "url": "#功能豐富度-1", "depth": 3 },
      { "value": "參數處理", "url": "#參數處理-1", "depth": 3 },
      { "value": "版本要求", "url": "#版本要求-1", "depth": 3 },
      {
        "value": "同場加映：Spring Boot HikariCP",
        "url": "#同場加映spring-boot-hikaricp-1",
        "depth": 2
      },
      { "value": "結論", "url": "#結論-50", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-78", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 18 JdbcTemplate 與 JdbcClient",
      "datePublished": "2024-09-18T00:00:00.000Z",
      "dateModified": "2024-09-18T00:00:00.000Z",
      "summary": "本文深入探討了 Spring Boot 中使用 JdbcTemplate 和 JdbcClient 來簡化資料庫操作的方法。文章首先介紹了 JDBC API 和原生 Java SQL 的關係，然後詳細說明了如何使用 JdbcTemplate 和 JdbcClient 改寫之前的 TodoController。文章提供了兩種實現方式的完整程式碼示例，並對比了它們與原生 Java SQL 在程式碼簡潔度、異常處理、資源管理、類型安全性等方面的差異。最後，文章總結了 JdbcTemplate 和 JdbcClient 的主要優勢，並提供了選擇適當工具的建議。這篇文章為 Spring Boot 開發者提供了全面的 JDBC 操作優化指南，有助於提高開發效率和程式碼質量",
      "image": "https://image.cashwu.com/2024/ithome/30day-day18-jdbcTemplate-jdbcClient/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day18-jdbcTemplate-jdbcClient"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 17 Spring Boot 與 H2 資料庫",
    "date": "2024-09-17T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "database"],
    "lastmod": "2024-09-17T00:00:00.000Z",
    "draft": false,
    "summary": "本文詳細介紹了如何在 Spring Boot 項目中使用 H2 資料庫。文章首先介紹了 H2 資料庫的特點和運行模式，然後展示了如何在 Spring Boot 中配置和使用 H2。文章重點說明了如何將之前的 TodoController 從使用靜態 List 改為使用 H2，並提供了詳細的代碼示例。此外，文章還介紹了 H2 資料庫的配置選項，以及兩種自動創建資料庫表的方法：使用 schema.sql 文件和使用 @PostConstruct 註解。最後，文章總結了使用 H2 資料庫的優點，強調了它在快速原型開發和測試中的重要性。這篇文章為 Spring Boot 開發者提供了一個全面的 H2 資料庫使用指南",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day17-spring-boot-h2-database/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "10 min read", "minutes": 9.525, "time": 571500, "words": 1905 },
    "slug": "2024/ithome/30day-day17-spring-boot-h2-database",
    "path": "blog/2024/ithome/30day-day17-spring-boot-h2-database",
    "filePath": "blog/2024/ithome/30day-day17-spring-boot-h2-database.mdx",
    "toc": [
      { "value": "H2 資料庫簡介", "url": "#h2-資料庫簡介-1", "depth": 2 },
      { "value": "H2 的運行模式", "url": "#h2-的運行模式-1", "depth": 2 },
      {
        "value": "Spring Boot 中使用 H2 和 JDBC API",
        "url": "#spring-boot-中使用-h2-和-jdbc-api-1",
        "depth": 2
      },
      { "value": "增加依賴", "url": "#增加依賴-11", "depth": 3 },
      { "value": "基本設定和 h2-console", "url": "#基本設定和-h2-console-1", "depth": 3 },
      { "value": "修改程式碼", "url": "#修改程式碼-6", "depth": 3 },
      { "value": "測試 API", "url": "#測試-api-3", "depth": 3 },
      { "value": "H2 資料庫配置", "url": "#h2-資料庫配置-1", "depth": 2 },
      { "value": "自動建立資料庫表", "url": "#自動建立資料庫表-1", "depth": 2 },
      { "value": "使用 schema.sql 文件", "url": "#使用-schemasql-文件-1", "depth": 3 },
      { "value": "使用 @PostConstruct 註解", "url": "#使用-postconstruct-註解-1", "depth": 3 },
      { "value": "結論", "url": "#結論-46", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-74", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 17 Spring Boot 與 H2 資料庫",
      "datePublished": "2024-09-17T00:00:00.000Z",
      "dateModified": "2024-09-17T00:00:00.000Z",
      "summary": "本文詳細介紹了如何在 Spring Boot 項目中使用 H2 資料庫。文章首先介紹了 H2 資料庫的特點和運行模式，然後展示了如何在 Spring Boot 中配置和使用 H2。文章重點說明了如何將之前的 TodoController 從使用靜態 List 改為使用 H2，並提供了詳細的代碼示例。此外，文章還介紹了 H2 資料庫的配置選項，以及兩種自動創建資料庫表的方法：使用 schema.sql 文件和使用 @PostConstruct 註解。最後，文章總結了使用 H2 資料庫的優點，強調了它在快速原型開發和測試中的重要性。這篇文章為 Spring Boot 開發者提供了一個全面的 H2 資料庫使用指南",
      "image": "https://image.cashwu.com/2024/ithome/30day-day17-spring-boot-h2-database/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day17-spring-boot-h2-database"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 16 資料驗證",
    "date": "2024-09-16T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "validation"],
    "lastmod": "2024-09-16T00:00:00.000Z",
    "draft": false,
    "summary": "這篇文章介紹了如何在 Java 和 Spring Boot 中使用 Bean Validation 和 Spring Validator 進行資料驗證。文章首先簡介了 Bean Validation，並提供了在 Spring Boot 專案中添加和使用這些驗證的步驟。接著，文章展示了如何修改 Todo 類別和控制器以加入驗證，並提供了測試方法。文章還介紹了 Spring Validator 的使用方法，包括如何建立自定義驗證邏輯。最後，文章比較了 Bean Validation 和 Spring Validator 的優缺點，並建議在實際應用中結合使用兩者來實現全面的數據驗證",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day16-data-validation/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.66, "time": 519600, "words": 1732 },
    "slug": "2024/ithome/30day-day16-data-validation",
    "path": "blog/2024/ithome/30day-day16-data-validation",
    "filePath": "blog/2024/ithome/30day-day16-data-validation.mdx",
    "toc": [
      { "value": "Bean Validation", "url": "#bean-validation-2", "depth": 2 },
      { "value": "使用 Bean Validation", "url": "#使用-bean-validation-1", "depth": 2 },
      { "value": "添加套件依賴", "url": "#添加套件依賴-3", "depth": 3 },
      { "value": "增加 Todo 驗證", "url": "#增加-todo-驗證-1", "depth": 3 },
      { "value": "修改 TodoController", "url": "#修改-todocontroller-4", "depth": 3 },
      { "value": "測試", "url": "#測試-22", "depth": 3 },
      {
        "value": "常見的 Java Bean Validation",
        "url": "#常見的-java-bean-validation-1",
        "depth": 3
      },
      { "value": "Spring Validator", "url": "#spring-validator-2", "depth": 2 },
      { "value": "客製 TodoValidator", "url": "#客製-todovalidator-1", "depth": 3 },
      { "value": "修改 TodoController", "url": "#修改-todocontroller-5", "depth": 3 },
      { "value": "測試", "url": "#測試-23", "depth": 3 },
      {
        "value": "Bean Validation 與 Spring Validator 的比較",
        "url": "#bean-validation-與-spring-validator-的比較-1",
        "depth": 2
      },
      { "value": "Bean Validation", "url": "#bean-validation-3", "depth": 3 },
      { "value": "Spring Validator", "url": "#spring-validator-3", "depth": 3 },
      { "value": "實際應用", "url": "#實際應用-2", "depth": 2 },
      { "value": "總結", "url": "#總結-14", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-65", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 16 資料驗證",
      "datePublished": "2024-09-16T00:00:00.000Z",
      "dateModified": "2024-09-16T00:00:00.000Z",
      "summary": "這篇文章介紹了如何在 Java 和 Spring Boot 中使用 Bean Validation 和 Spring Validator 進行資料驗證。文章首先簡介了 Bean Validation，並提供了在 Spring Boot 專案中添加和使用這些驗證的步驟。接著，文章展示了如何修改 Todo 類別和控制器以加入驗證，並提供了測試方法。文章還介紹了 Spring Validator 的使用方法，包括如何建立自定義驗證邏輯。最後，文章比較了 Bean Validation 和 Spring Validator 的優缺點，並建議在實際應用中結合使用兩者來實現全面的數據驗證",
      "image": "https://image.cashwu.com/2024/ithome/30day-day16-data-validation/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day16-data-validation"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 15 API 文件自動化",
    "date": "2024-09-15T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "API", "Swagger"],
    "lastmod": "2024-09-15T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了如何在 Spring Boot 項目中整合 Swagger 來自動生成 API 文件。文章首先簡要介紹了 Swagger 及其主要功能，然後詳細說明了在 Spring Boot 中整合 Swagger 的步驟，包括添加依賴、配置 Swagger、在控制器中添加 Swagger 註解等。文章還介紹了常用的 Swagger 註解及其用途，以及如何查看生成的 API 文件。此外，文章還提供了一些額外的 Swagger 配置選項。最後，文章總結了整合 Swagger 的好處，強調了它對提高開發效率、改善團隊協作和增強 API 可用性的重要性。這篇文章為 Spring Boot 開發者提供了一個全面的 API 文檔自動化指南",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day15-api-documentation-automation/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.275, "time": 316500, "words": 1055 },
    "slug": "2024/ithome/30day-day15-api-documentation-automation",
    "path": "blog/2024/ithome/30day-day15-api-documentation-automation",
    "filePath": "blog/2024/ithome/30day-day15-api-documentation-automation.mdx",
    "toc": [
      { "value": "Swagger 簡介", "url": "#swagger-簡介-1", "depth": 2 },
      {
        "value": "在 Spring Boot 中整合 Swagger",
        "url": "#在-spring-boot-中整合-swagger-1",
        "depth": 2
      },
      { "value": "添加套件依賴", "url": "#添加套件依賴-2", "depth": 3 },
      { "value": "配置 Swagger", "url": "#配置-swagger-1", "depth": 2 },
      { "value": "添加 Swagger 註解", "url": "#添加-swagger-註解-1", "depth": 3 },
      { "value": "查看生成的文件", "url": "#查看生成的文件-1", "depth": 3 },
      { "value": "額外的 Swagger 配置", "url": "#額外的-swagger-配置-1", "depth": 2 },
      { "value": "結論", "url": "#結論-36", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-58", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 15 API 文件自動化",
      "datePublished": "2024-09-15T00:00:00.000Z",
      "dateModified": "2024-09-15T00:00:00.000Z",
      "summary": "本文介紹了如何在 Spring Boot 項目中整合 Swagger 來自動生成 API 文件。文章首先簡要介紹了 Swagger 及其主要功能，然後詳細說明了在 Spring Boot 中整合 Swagger 的步驟，包括添加依賴、配置 Swagger、在控制器中添加 Swagger 註解等。文章還介紹了常用的 Swagger 註解及其用途，以及如何查看生成的 API 文件。此外，文章還提供了一些額外的 Swagger 配置選項。最後，文章總結了整合 Swagger 的好處，強調了它對提高開發效率、改善團隊協作和增強 API 可用性的重要性。這篇文章為 Spring Boot 開發者提供了一個全面的 API 文檔自動化指南",
      "image": "https://image.cashwu.com/2024/ithome/30day-day15-api-documentation-automation/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day15-api-documentation-automation"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 14 日誌記錄",
    "date": "2024-09-14T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024", "logging"],
    "lastmod": "2024-09-14T00:00:00.000Z",
    "draft": false,
    "summary": "文章首先介紹了 SLF4J 作為日誌抽象層和 Logback 作為具體實現的角色，然後展示了如何在 Todo List API 中實現日誌記錄。文章還詳細說明了 Logback 的文件配置，包括如何實現每日日誌文件切割和大小控制。最後，文章提供了一系列日誌記錄的最佳實踐建議，包括適度記錄、使用適當的日誌級別、避免記錄敏感信息等",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day14-logging-configuration-best-practices/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.11, "time": 366600, "words": 1222 },
    "slug": "2024/ithome/30day-day14-logging-configuration-best-practices",
    "path": "blog/2024/ithome/30day-day14-logging-configuration-best-practices",
    "filePath": "blog/2024/ithome/30day-day14-logging-configuration-best-practices.mdx",
    "toc": [
      { "value": "SLF4J 與 Logback", "url": "#slf4j-與-logback-1", "depth": 2 },
      {
        "value": "SLF4J（Simple Logging Facade for Java）",
        "url": "#slf4jsimple-logging-facade-for-java-1",
        "depth": 3
      },
      { "value": "Logback", "url": "#logback-1", "depth": 3 },
      { "value": "Spring 框架的日誌", "url": "#spring-框架的日誌-1", "depth": 3 },
      { "value": "改造 Todo List API", "url": "#改造-todo-list-api-1", "depth": 2 },
      { "value": "Logback 寫入檔案配置", "url": "#logback-寫入檔案配置-1", "depth": 2 },
      { "value": "配置分析", "url": "#配置分析-1", "depth": 3 },
      { "value": "日誌最佳實踐", "url": "#日誌最佳實踐-1", "depth": 2 },
      { "value": "結語", "url": "#結語-20", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-68", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 14 日誌記錄",
      "datePublished": "2024-09-14T00:00:00.000Z",
      "dateModified": "2024-09-14T00:00:00.000Z",
      "summary": "文章首先介紹了 SLF4J 作為日誌抽象層和 Logback 作為具體實現的角色，然後展示了如何在 Todo List API 中實現日誌記錄。文章還詳細說明了 Logback 的文件配置，包括如何實現每日日誌文件切割和大小控制。最後，文章提供了一系列日誌記錄的最佳實踐建議，包括適度記錄、使用適當的日誌級別、避免記錄敏感信息等",
      "image": "https://image.cashwu.com/2024/ithome/30day-day14-logging-configuration-best-practices/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day14-logging-configuration-best-practices"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 13 - 全域錯誤處理",
    "date": "2024-09-13T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-13T00:00:00.000Z",
    "draft": false,
    "summary": "文章介紹了三種主要的實現方式：使用 @ExceptionHandler 註解（控制器級別）、使用 @ControllerAdvice（全域級別）和使用 ResponseEntityExceptionHandler（Spring MVC 特定異常處理），文章還討論了全域異常處理的整體優缺點，最後，文章強調了全域異常處理在構建健壯 API 中的重要性，特別是對於大型或長期維護的項目",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day13-global-error-handling/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.65, "time": 459000, "words": 1530 },
    "slug": "2024/ithome/30day-day13-global-error-handling",
    "path": "blog/2024/ithome/30day-day13-global-error-handling",
    "filePath": "blog/2024/ithome/30day-day13-global-error-handling.mdx",
    "toc": [
      {
        "value": "使用 @ExceptionHandler 註解（控制器級別）",
        "url": "#使用-exceptionhandler-註解控制器級別-1",
        "depth": 2
      },
      { "value": "實現方式", "url": "#實現方式-4", "depth": 3 },
      { "value": "優點", "url": "#優點-11", "depth": 3 },
      { "value": "缺點", "url": "#缺點-11", "depth": 3 },
      { "value": "測試", "url": "#測試-25", "depth": 3 },
      {
        "value": "使用 @ControllerAdvice（全域級別）",
        "url": "#使用-controlleradvice全域級別-1",
        "depth": 2
      },
      { "value": "實現方式", "url": "#實現方式-5", "depth": 3 },
      { "value": "優點", "url": "#優點-12", "depth": 3 },
      { "value": "缺點", "url": "#缺點-12", "depth": 3 },
      { "value": "測試", "url": "#測試-26", "depth": 3 },
      {
        "value": "使用 ResponseEntityExceptionHandler（Spring MVC 特定異常處理）",
        "url": "#使用-responseentityexceptionhandlerspring-mvc-特定異常處理-1",
        "depth": 2
      },
      { "value": "實現方式", "url": "#實現方式-6", "depth": 3 },
      { "value": "優點", "url": "#優點-13", "depth": 3 },
      { "value": "缺點", "url": "#缺點-13", "depth": 3 },
      { "value": "測試", "url": "#測試-27", "depth": 3 },
      { "value": "全域異常處理的優缺點", "url": "#全域異常處理的優缺點-1", "depth": 2 },
      { "value": "優點", "url": "#優點-14", "depth": 3 },
      { "value": "缺點", "url": "#缺點-14", "depth": 3 },
      { "value": "總結", "url": "#總結-17", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-71", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 13 - 全域錯誤處理",
      "datePublished": "2024-09-13T00:00:00.000Z",
      "dateModified": "2024-09-13T00:00:00.000Z",
      "summary": "文章介紹了三種主要的實現方式：使用 @ExceptionHandler 註解（控制器級別）、使用 @ControllerAdvice（全域級別）和使用 ResponseEntityExceptionHandler（Spring MVC 特定異常處理），文章還討論了全域異常處理的整體優缺點，最後，文章強調了全域異常處理在構建健壯 API 中的重要性，特別是對於大型或長期維護的項目",
      "image": "https://image.cashwu.com/2024/ithome/30day-day13-global-error-handling/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day13-global-error-handling"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 12 統一 API 回應格式",
    "date": "2024-09-12T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-12T00:00:00.000Z",
    "draft": false,
    "summary": "文章首先介紹了 RFC 7807 Problem Details for HTTP APIs 標準，然後詳細說明了如何建立一個通用的 ApiResponse 類別來封裝 API 回應。此外，文章比較了自定義設計與 RFC 7807 標準的異同，並討論了使用統一 API 返回結構的優缺點。最後，文章強調了統一 API 回應格式在提高 API 可用性和一致性方面的重要性，特別是對於大型或長期維護的項目",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day12-unified-api-response-format/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.895, "time": 473700, "words": 1579 },
    "slug": "2024/ithome/30day-day12-unified-api-response-format",
    "path": "blog/2024/ithome/30day-day12-unified-api-response-format",
    "filePath": "blog/2024/ithome/30day-day12-unified-api-response-format.mdx",
    "toc": [
      {
        "value": "RFC 9457 Problem Details for HTTP APIs",
        "url": "#rfc-9457-problem-details-for-http-apis-1",
        "depth": 2
      },
      { "value": "主要特點", "url": "#主要特點-5", "depth": 3 },
      { "value": "通用的 Response 類別", "url": "#通用的-response-類別-1", "depth": 2 },
      {
        "value": "修改程式碼，使用 ApiResponse",
        "url": "#修改程式碼使用-apiresponse-1",
        "depth": 2
      },
      { "value": "與 RFC 7807 的比較", "url": "#與-rfc-7807-的比較-1", "depth": 2 },
      { "value": "相同點", "url": "#相同點-3", "depth": 3 },
      { "value": "差異點", "url": "#差異點-1", "depth": 3 },
      {
        "value": "使用統一 API 返回結構的優缺點",
        "url": "#使用統一-api-返回結構的優缺點-1",
        "depth": 2
      },
      { "value": "優點", "url": "#優點-10", "depth": 3 },
      { "value": "缺點", "url": "#缺點-10", "depth": 3 },
      { "value": "結論", "url": "#結論-41", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-64", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 12 統一 API 回應格式",
      "datePublished": "2024-09-12T00:00:00.000Z",
      "dateModified": "2024-09-12T00:00:00.000Z",
      "summary": "文章首先介紹了 RFC 7807 Problem Details for HTTP APIs 標準，然後詳細說明了如何建立一個通用的 ApiResponse 類別來封裝 API 回應。此外，文章比較了自定義設計與 RFC 7807 標準的異同，並討論了使用統一 API 返回結構的優缺點。最後，文章強調了統一 API 回應格式在提高 API 可用性和一致性方面的重要性，特別是對於大型或長期維護的項目",
      "image": "https://image.cashwu.com/2024/ithome/30day-day12-unified-api-response-format/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day12-unified-api-response-format"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 11 請求參數處理深入探討",
    "date": "2024-09-11T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-11T00:00:00.000Z",
    "draft": false,
    "summary": "文章詳細介紹了 @RequestParam、@PathVariable、@RequestHeader、@CookieValue 和 @RequestBody 等註解的使用，並提供了實際的程式碼。此外，文章還討論了如何設置參數的必要性和默認值，以增加 API 的靈活性和健壯性。最後，文章提供了一些實踐建議，幫助開發者設計更好的 API",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day11-in-depth-request-parameter-handling/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.315, "time": 258900, "words": 863 },
    "slug": "2024/ithome/30day-day11-in-depth-request-parameter-handling",
    "path": "blog/2024/ithome/30day-day11-in-depth-request-parameter-handling",
    "filePath": "blog/2024/ithome/30day-day11-in-depth-request-parameter-handling.mdx",
    "toc": [
      { "value": "Query String", "url": "#query-string-1", "depth": 2 },
      { "value": "Path", "url": "#path-1", "depth": 2 },
      { "value": "Header 和 Cookie", "url": "#header-和-cookie-1", "depth": 2 },
      { "value": "Form Data", "url": "#form-data-1", "depth": 2 },
      { "value": "Request Body", "url": "#request-body-1", "depth": 2 },
      { "value": "File", "url": "#file-2", "depth": 2 },
      { "value": "實踐建議", "url": "#實踐建議-1", "depth": 2 },
      { "value": "總結", "url": "#總結-16", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-70", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 11 請求參數處理深入探討",
      "datePublished": "2024-09-11T00:00:00.000Z",
      "dateModified": "2024-09-11T00:00:00.000Z",
      "summary": "文章詳細介紹了 @RequestParam、@PathVariable、@RequestHeader、@CookieValue 和 @RequestBody 等註解的使用，並提供了實際的程式碼。此外，文章還討論了如何設置參數的必要性和默認值，以增加 API 的靈活性和健壯性。最後，文章提供了一些實踐建議，幫助開發者設計更好的 API",
      "image": "https://image.cashwu.com/2024/ithome/30day-day11-in-depth-request-parameter-handling/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day11-in-depth-request-parameter-handling"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 10 RESTful API 設計與實作",
    "date": "2024-09-10T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-10T00:00:00.000Z",
    "draft": false,
    "summary": "文章介紹了如何使用 Spring Boot 建立一個簡單的 Todo List RESTful API，實現基本的 CRUD（創建、讀取、更新、刪除）操作。最後，文章介紹了如何使用 JetBrains HTTP Client 來測試這些 API 端點。這個實例為讀者提供了一個實用的 RESTful API 設計和實現的指南，適合初學者學習 Spring Boot API 開發",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day10-restful-api-design-and-implementation/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.525, "time": 271500, "words": 905 },
    "slug": "2024/ithome/30day-day10-restful-api-design-and-implementation",
    "path": "blog/2024/ithome/30day-day10-restful-api-design-and-implementation",
    "filePath": "blog/2024/ithome/30day-day10-restful-api-design-and-implementation.mdx",
    "toc": [
      { "value": "前置作業", "url": "#前置作業-1", "depth": 2 },
      { "value": "建立 Todo 類別", "url": "#建立-todo-類別-1", "depth": 3 },
      { "value": "建立 TodoController", "url": "#建立-todocontroller-1", "depth": 3 },
      { "value": "實現 CRUD 操作", "url": "#實現-crud-操作-1", "depth": 2 },
      { "value": "建立 Todo (Create)", "url": "#建立-todo-create-1", "depth": 3 },
      { "value": "取得所有 Todo (Read)", "url": "#取得所有-todo-read-1", "depth": 3 },
      {
        "value": "使用 id 取得單一 Todo (Read)",
        "url": "#使用-id-取得單一-todo-read-1",
        "depth": 3
      },
      { "value": "更新 Todo (Update)", "url": "#更新-todo-update-1", "depth": 3 },
      { "value": "刪除 Todo (Delete)", "url": "#刪除-todo-delete-1", "depth": 3 },
      {
        "value": "使用 JetBrains HTTP Client 測試 API",
        "url": "#使用-jetbrains-http-client-測試-api-1",
        "depth": 2
      },
      { "value": "創建 Todo", "url": "#創建-todo-1", "depth": 3 },
      { "value": "獲取所有 Todo", "url": "#獲取所有-todo-1", "depth": 3 },
      { "value": "獲取單個 Todo", "url": "#獲取單個-todo-1", "depth": 3 },
      { "value": "更新 Todo", "url": "#更新-todo-1", "depth": 3 },
      { "value": "刪除 Todo", "url": "#刪除-todo-1", "depth": 3 },
      { "value": "總結", "url": "#總結-15", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-67", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 10 RESTful API 設計與實作",
      "datePublished": "2024-09-10T00:00:00.000Z",
      "dateModified": "2024-09-10T00:00:00.000Z",
      "summary": "文章介紹了如何使用 Spring Boot 建立一個簡單的 Todo List RESTful API，實現基本的 CRUD（創建、讀取、更新、刪除）操作。最後，文章介紹了如何使用 JetBrains HTTP Client 來測試這些 API 端點。這個實例為讀者提供了一個實用的 RESTful API 設計和實現的指南，適合初學者學習 Spring Boot API 開發",
      "image": "https://image.cashwu.com/2024/ithome/30day-day10-restful-api-design-and-implementation/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day10-restful-api-design-and-implementation"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 09 探討 Spring Boot 自動配置",
    "date": "2024-09-09T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-09T00:00:00.000Z",
    "draft": false,
    "summary": "文章解釋了自動配置的概念、工作原理和流程，包括類別路徑掃描、條件評估、配置類別加載和 Bean 建立。通過 Redis 配置的例子，文章展示了自動配置的實際應用。此外，文章還介紹了如何自定義和覆蓋自動配置，包括使用屬性配置、自定義配置類別和排除特定自動配置的方法。最後，文章提供了自動配置除錯的技巧，幫助開發者更好地理解和控制 Spring Boot 的自動配置過程。這些知識對於充分利用 Spring Boot 的便利性和靈活性至關重要",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day09-explore-spring-boot-auto-configuration/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.575, "time": 394500, "words": 1315 },
    "slug": "2024/ithome/30day-day09-explore-spring-boot-auto-configuration",
    "path": "blog/2024/ithome/30day-day09-explore-spring-boot-auto-configuration",
    "filePath": "blog/2024/ithome/30day-day09-explore-spring-boot-auto-configuration.mdx",
    "toc": [
      { "value": "什麼是自動配置？", "url": "#什麼是自動配置-1", "depth": 2 },
      { "value": "自動配置是如何工作的？", "url": "#自動配置是如何工作的-1", "depth": 2 },
      { "value": "條件化配置", "url": "#條件化配置-1", "depth": 2 },
      { "value": "自動配置的工作流程", "url": "#自動配置的工作流程-1", "depth": 2 },
      {
        "value": "讓我們通過一個例子來說明這個過程",
        "url": "#讓我們通過一個例子來說明這個過程-1",
        "depth": 3
      },
      { "value": "自定義和覆蓋自動配置", "url": "#自定義和覆蓋自動配置-1", "depth": 2 },
      { "value": "自動配置除錯", "url": "#自動配置除錯-1", "depth": 2 },
      { "value": "結論", "url": "#結論-52", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-81", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 09 探討 Spring Boot 自動配置",
      "datePublished": "2024-09-09T00:00:00.000Z",
      "dateModified": "2024-09-09T00:00:00.000Z",
      "summary": "文章解釋了自動配置的概念、工作原理和流程，包括類別路徑掃描、條件評估、配置類別加載和 Bean 建立。通過 Redis 配置的例子，文章展示了自動配置的實際應用。此外，文章還介紹了如何自定義和覆蓋自動配置，包括使用屬性配置、自定義配置類別和排除特定自動配置的方法。最後，文章提供了自動配置除錯的技巧，幫助開發者更好地理解和控制 Spring Boot 的自動配置過程。這些知識對於充分利用 Spring Boot 的便利性和靈活性至關重要",
      "image": "https://image.cashwu.com/2024/ithome/30day-day09-explore-spring-boot-auto-configuration/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day09-explore-spring-boot-auto-configuration"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 08 Spring 和 Spring Boot 中 Bean 的概念",
    "date": "2024-09-08T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-08T00:00:00.000Z",
    "draft": false,
    "summary": "文章介紹了 Bean 的定義方式，包括 XML 配置、Java 程式配置和注解方式。同時，詳細解釋了 Bean 的作用域，如 singleton、prototype 等。文章還闡述了依賴注入（DI）的三種主要方式：建構子注入、Setter 注入和 field 注入，並討論了它們的優缺點。最後，文章概述了 Bean 的生命週期，並提供了如何通過實現特定接口來干預 Bean 生命週期的示例。這些知識對於理解 Spring Boot 應用程式的開發和提高代碼質量至關重要",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day08-bean-concept-in-spring-and-spring-boot/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.8, "time": 348000, "words": 1160 },
    "slug": "2024/ithome/30day-day08-bean-concept-in-spring-and-spring-boot",
    "path": "blog/2024/ithome/30day-day08-bean-concept-in-spring-and-spring-boot",
    "filePath": "blog/2024/ithome/30day-day08-bean-concept-in-spring-and-spring-boot.mdx",
    "toc": [
      { "value": "Bean 的相關概念", "url": "#bean-的相關概念-1", "depth": 2 },
      { "value": "Bean 的定義方式", "url": "#bean-的定義方式-1", "depth": 2 },
      { "value": "Bean 的作用域", "url": "#bean-的作用域-1", "depth": 2 },
      { "value": "常用的 Bean annotation", "url": "#常用的-bean-annotation-1", "depth": 2 },
      { "value": "依賴注入（DI）", "url": "#依賴注入di-1", "depth": 2 },
      { "value": "Bean 的生命週期", "url": "#bean-的生命週期-1", "depth": 2 },
      { "value": "結論", "url": "#結論-51", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-79", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 08 Spring 和 Spring Boot 中 Bean 的概念",
      "datePublished": "2024-09-08T00:00:00.000Z",
      "dateModified": "2024-09-08T00:00:00.000Z",
      "summary": "文章介紹了 Bean 的定義方式，包括 XML 配置、Java 程式配置和注解方式。同時，詳細解釋了 Bean 的作用域，如 singleton、prototype 等。文章還闡述了依賴注入（DI）的三種主要方式：建構子注入、Setter 注入和 field 注入，並討論了它們的優缺點。最後，文章概述了 Bean 的生命週期，並提供了如何通過實現特定接口來干預 Bean 生命週期的示例。這些知識對於理解 Spring Boot 應用程式的開發和提高代碼質量至關重要",
      "image": "https://image.cashwu.com/2024/ithome/30day-day08-bean-concept-in-spring-and-spring-boot/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day08-bean-concept-in-spring-and-spring-boot"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 07 application.properties 多環境配置",
    "date": "2024-09-07T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-07T00:00:00.000Z",
    "draft": false,
    "summary": "文章詳細說明了 Profile 的概念、設置方法、命名規則，以及如何啟用特定 Profile。同時，文章還解釋了 Profile 的運作原理、多個 Profile 同時啟用時的處理順序，以及 Spring Boot 配置的優先順序。最後，文章提供了 Profile 使用的最佳實踐建議，強調了 Profile 機制在提高開發效率和簡化部署維護方面的重要性",
    "images": [
      "/static/images/2024/ithome/30day-day07-application-properties-multi-environment-configuration/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.065, "time": 363900, "words": 1213 },
    "slug": "2024/ithome/30day-day07-application-properties-multi-environment-configuration",
    "path": "blog/2024/ithome/30day-day07-application-properties-multi-environment-configuration",
    "filePath": "blog/2024/ithome/30day-day07-application-properties-multi-environment-configuration.mdx",
    "toc": [
      { "value": "什麼是 Profile？", "url": "#什麼是-profile", "depth": 2 },
      { "value": "如何設定不同環境的 Profile？", "url": "#如何設定不同環境的-profile", "depth": 2 },
      { "value": "命名規則", "url": "#命名規則", "depth": 3 },
      { "value": "如何啟用 Profile", "url": "#如何啟用-profile", "depth": 3 },
      { "value": "多 Profile 啟用", "url": "#多-profile-啟用", "depth": 3 },
      { "value": "Profile 的運作原理", "url": "#profile-的運作原理", "depth": 2 },
      { "value": "Spring Boot 配置的優先順序：", "url": "#spring-boot-配置的優先順序", "depth": 2 },
      { "value": "Profile 特定配置的優先順序：", "url": "#profile-特定配置的優先順序", "depth": 2 },
      { "value": "Profile 最佳實踐：", "url": "#profile-最佳實踐", "depth": 2 },
      { "value": "結論", "url": "#結論-9", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-20", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 07 application.properties 多環境配置",
      "datePublished": "2024-09-07T00:00:00.000Z",
      "dateModified": "2024-09-07T00:00:00.000Z",
      "summary": "文章詳細說明了 Profile 的概念、設置方法、命名規則，以及如何啟用特定 Profile。同時，文章還解釋了 Profile 的運作原理、多個 Profile 同時啟用時的處理順序，以及 Spring Boot 配置的優先順序。最後，文章提供了 Profile 使用的最佳實踐建議，強調了 Profile 機制在提高開發效率和簡化部署維護方面的重要性",
      "image": "/static/images/2024/ithome/30day-day07-application-properties-multi-environment-configuration/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day07-application-properties-multi-environment-configuration"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 06 掌握 application.properties",
    "date": "2024-09-06T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-06T00:00:00.000Z",
    "draft": false,
    "summary": "文章介紹了配置文件的格式選擇（Properties vs YAML），展示了如何定義和使用自定義屬性，並比較了 @Value 注入和 @ConfigurationProperties 綁定兩種方法的優缺點。同時，文章還討論了第三方 Starter 的配置方式，並將 Spring Boot 的 application.properties 與 .NET Core 的 appsettings.json 進行了比較，突出了它們的相似點和差異。通過實例說明，本文為讀者提供了全面掌握 Spring Boot 配置管理的指南",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day06-master-application-properties/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.68, "time": 400800, "words": 1336 },
    "slug": "2024/ithome/30day-day06-master-application-properties",
    "path": "blog/2024/ithome/30day-day06-master-application-properties",
    "filePath": "blog/2024/ithome/30day-day06-master-application-properties.mdx",
    "toc": [
      {
        "value": "application.properties 設定檔的用途",
        "url": "#applicationproperties-設定檔的用途-1",
        "depth": 2
      },
      {
        "value": "配置檔格式：Properties vs YAML",
        "url": "#配置檔格式properties-vs-yaml-1",
        "depth": 2
      },
      { "value": "Properties 格式", "url": "#properties-格式-1", "depth": 3 },
      { "value": "YAML 格式", "url": "#yaml-格式-1", "depth": 3 },
      { "value": "自定義 properties 和 SpEL", "url": "#自定義-properties-和-spel-1", "depth": 2 },
      { "value": "基本配置", "url": "#基本配置-1", "depth": 3 },
      { "value": "使用 @Value 注入", "url": "#使用-value-注入-1", "depth": 3 },
      { "value": "使用中文請注意 !!", "url": "#使用中文請注意--1", "depth": 3 },
      {
        "value": "使用 @ConfigurationProperties",
        "url": "#使用-configurationproperties-1",
        "depth": 3
      },
      {
        "value": "第三方 Starter 和套件的配置",
        "url": "#第三方-starter-和套件的配置-1",
        "depth": 2
      },
      {
        "value": "與 .NET Core 的 appsettings.json 比較",
        "url": "#與-net-core-的-appsettingsjson-比較-1",
        "depth": 2
      },
      { "value": "相同點", "url": "#相同點-4", "depth": 3 },
      { "value": "不同點", "url": "#不同點-2", "depth": 3 },
      { "value": "結論", "url": "#結論-55", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-83", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 06 掌握 application.properties",
      "datePublished": "2024-09-06T00:00:00.000Z",
      "dateModified": "2024-09-06T00:00:00.000Z",
      "summary": "文章介紹了配置文件的格式選擇（Properties vs YAML），展示了如何定義和使用自定義屬性，並比較了 @Value 注入和 @ConfigurationProperties 綁定兩種方法的優缺點。同時，文章還討論了第三方 Starter 的配置方式，並將 Spring Boot 的 application.properties 與 .NET Core 的 appsettings.json 進行了比較，突出了它們的相似點和差異。通過實例說明，本文為讀者提供了全面掌握 Spring Boot 配置管理的指南",
      "image": "https://image.cashwu.com/2024/ithome/30day-day06-master-application-properties/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day06-master-application-properties"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 05 Spring Boot Starter",
    "date": "2024-09-05T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-05T00:00:00.000Z",
    "draft": false,
    "summary": "本文深入解析了 Spring Boot Starter 的概念和重要性。文章首先分析了 build.gradle 文件的結構，然後詳細介紹了 Starter 的作用和優勢，包括簡化依賴管理、確保版本兼容性、快速啟動項目等。文章還比較了 Spring Boot Starter 與 C# NuGet Packages 的異同，並簡要對比了 Maven 和 Gradle 這兩種常用的構建工具",
    "images": ["https://image.cashwu.com/2024/ithome/30day-day05-spring-boot-starter/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.44, "time": 506400, "words": 1688 },
    "slug": "2024/ithome/30day-day05-spring-boot-starter",
    "path": "blog/2024/ithome/30day-day05-spring-boot-starter",
    "filePath": "blog/2024/ithome/30day-day05-spring-boot-starter.mdx",
    "toc": [
      { "value": "build.gradle 解析", "url": "#buildgradle-解析-1", "depth": 2 },
      {
        "value": "什麼是 Spring Boot Starter？",
        "url": "#什麼是-spring-boot-starter-1",
        "depth": 2
      },
      { "value": "Starter 的重要性", "url": "#starter-的重要性-1", "depth": 2 },
      { "value": "一些常用的 Starter", "url": "#一些常用的-starter-1", "depth": 3 },
      { "value": "實際應用", "url": "#實際應用-3", "depth": 2 },
      { "value": "尋找 Spring Boot Starter", "url": "#尋找-spring-boot-starter-1", "depth": 2 },
      {
        "value": "Spring Boot Starter vs C# NuGet Packages",
        "url": "#spring-boot-starter-vs-c-nuget-packages-1",
        "depth": 2
      },
      { "value": "相同點：", "url": "#相同點-5", "depth": 3 },
      { "value": "不同點：", "url": "#不同點-3", "depth": 3 },
      {
        "value": "同場加映：Maven 與 Gradle 比較",
        "url": "#同場加映maven-與-gradle-比較-1",
        "depth": 2
      },
      { "value": "總結", "url": "#總結-20", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-84", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 05 Spring Boot Starter",
      "datePublished": "2024-09-05T00:00:00.000Z",
      "dateModified": "2024-09-05T00:00:00.000Z",
      "summary": "本文深入解析了 Spring Boot Starter 的概念和重要性。文章首先分析了 build.gradle 文件的結構，然後詳細介紹了 Starter 的作用和優勢，包括簡化依賴管理、確保版本兼容性、快速啟動項目等。文章還比較了 Spring Boot Starter 與 C# NuGet Packages 的異同，並簡要對比了 Maven 和 Gradle 這兩種常用的構建工具",
      "image": "https://image.cashwu.com/2024/ithome/30day-day05-spring-boot-starter/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day05-spring-boot-starter"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 04 剖析 Spring Boot 專案結構",
    "date": "2024-09-04T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-04T00:00:00.000Z",
    "draft": false,
    "summary": "本文詳細剖析了 Spring Boot 專案的結構，包括根目錄、src 目錄（main 和 test）的內容及其作用。重點解釋了關鍵檔案如 TodolistApplication.java、application.properties 和 build.gradle 的功能。文章還闡述了 Spring Boot 專案結構的設計理念，包括關注點分離、約定優於配置、模組化、測試友好和配置集中化。這種結構設計不僅使專案易於理解和維護，還為擴展和測試提供了良好的基礎，有助於提高開發效率和團隊協作。",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day04-analyze-spring-boot-project-structure/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.945, "time": 236700, "words": 789 },
    "slug": "2024/ithome/30day-day04-analyze-spring-boot-project-structure",
    "path": "blog/2024/ithome/30day-day04-analyze-spring-boot-project-structure",
    "filePath": "blog/2024/ithome/30day-day04-analyze-spring-boot-project-structure.mdx",
    "toc": [
      { "value": "根目錄", "url": "#根目錄-1", "depth": 2 },
      { "value": "src 目錄", "url": "#src-目錄-1", "depth": 2 },
      { "value": "main 目錄", "url": "#main-目錄-1", "depth": 3 },
      { "value": "test 目錄", "url": "#test-目錄-1", "depth": 3 },
      { "value": "重要檔案解析", "url": "#重要檔案解析-1", "depth": 2 },
      { "value": "專案結構的設計理念", "url": "#專案結構的設計理念-1", "depth": 2 },
      { "value": "總結", "url": "#總結-19", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 04 剖析 Spring Boot 專案結構",
      "datePublished": "2024-09-04T00:00:00.000Z",
      "dateModified": "2024-09-04T00:00:00.000Z",
      "summary": "本文詳細剖析了 Spring Boot 專案的結構，包括根目錄、src 目錄（main 和 test）的內容及其作用。重點解釋了關鍵檔案如 TodolistApplication.java、application.properties 和 build.gradle 的功能。文章還闡述了 Spring Boot 專案結構的設計理念，包括關注點分離、約定優於配置、模組化、測試友好和配置集中化。這種結構設計不僅使專案易於理解和維護，還為擴展和測試提供了良好的基礎，有助於提高開發效率和團隊協作。",
      "image": "https://image.cashwu.com/2024/ithome/30day-day04-analyze-spring-boot-project-structure/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day04-analyze-spring-boot-project-structure"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 03 建立你的第一個 Spring Boot API",
    "date": "2024-09-03T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-03T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹如何使用 Spring Initializr 或 IntelliJ IDEA 建立第一個 Spring Boot API 專案。文章詳細說明了專案設置過程，包括使用 Gradle、Java 17 和最新版 Spring Boot。通過創建一個簡單的 HelloController，展示了如何實現基本的 API 端點",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day03-create-your-first-spring-boot-api/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.675, "time": 280500, "words": 935 },
    "slug": "2024/ithome/30day-day03-create-your-first-spring-boot-api",
    "path": "blog/2024/ithome/30day-day03-create-your-first-spring-boot-api",
    "filePath": "blog/2024/ithome/30day-day03-create-your-first-spring-boot-api.mdx",
    "toc": [
      { "value": "準備工作", "url": "#準備工作-1", "depth": 2 },
      { "value": "建立 Spring Boot 專案", "url": "#建立-spring-boot-專案-1", "depth": 2 },
      { "value": "使用 Spring Initializr", "url": "#使用-spring-initializr-1", "depth": 3 },
      {
        "value": "使用 IDE（以 IntelliJ IDEA 為例）",
        "url": "#使用-ide以-intellij-idea-為例-1",
        "depth": 3
      },
      { "value": "建立第一個 API ", "url": "#建立第一個-api-1", "depth": 2 },
      {
        "value": "同場加映： Spring Boot 的 annotation",
        "url": "#同場加映-spring-boot-的-annotation-1",
        "depth": 2
      },
      { "value": "@RestController", "url": "#restcontroller-1", "depth": 3 },
      { "value": "@GetMapping ", "url": "#getmapping-1", "depth": 3 },
      { "value": "總結", "url": "#總結-22", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-86", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 03 建立你的第一個 Spring Boot API",
      "datePublished": "2024-09-03T00:00:00.000Z",
      "dateModified": "2024-09-03T00:00:00.000Z",
      "summary": "本文介紹如何使用 Spring Initializr 或 IntelliJ IDEA 建立第一個 Spring Boot API 專案。文章詳細說明了專案設置過程，包括使用 Gradle、Java 17 和最新版 Spring Boot。通過創建一個簡單的 HelloController，展示了如何實現基本的 API 端點",
      "image": "https://image.cashwu.com/2024/ithome/30day-day03-create-your-first-spring-boot-api/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day03-create-your-first-spring-boot-api"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 02 理解 Spring 和 Spring Boot",
    "date": "2024-09-02T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-02T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了 Spring 和 Spring Boot 兩個 Java 生態系統中重要的框架。Spring 是一個開源 Java 平台，提供依賴注入、AOP、事務管理等功能。Spring Boot 則建立在 Spring 之上，提供自動配置、獨立運行、內嵌服務器等特性，大大簡化了 Spring 應用的開發過程。文章比較了兩者在配置複雜度、依賴管理、應用服務器等方面的區別，總結 Spring Boot 讓 Spring 開發變得更加簡單和便捷。",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day02-understand-spring-and-spring-boot/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.755, "time": 405300, "words": 1351 },
    "slug": "2024/ithome/30day-day02-understand-spring-and-spring-boot",
    "path": "blog/2024/ithome/30day-day02-understand-spring-and-spring-boot",
    "filePath": "blog/2024/ithome/30day-day02-understand-spring-and-spring-boot.mdx",
    "toc": [
      { "value": "Spring", "url": "#spring-1", "depth": 2 },
      { "value": "Spring 框架的主要特點包括：", "url": "#spring-框架的主要特點包括-1", "depth": 3 },
      { "value": "Spring Boot", "url": "#spring-boot-1", "depth": 2 },
      {
        "value": "Spring Boot 的主要特點包括：",
        "url": "#spring-boot-的主要特點包括-1",
        "depth": 3
      },
      {
        "value": "Spring 和 Spring Boot 的區別",
        "url": "#spring-和-spring-boot-的區別-1",
        "depth": 2
      },
      { "value": "配置複雜度：", "url": "#配置複雜度-1", "depth": 3 },
      { "value": "依賴管理：", "url": "#依賴管理-1", "depth": 3 },
      { "value": "應用服務器：", "url": "#應用服務器-1", "depth": 3 },
      { "value": "Production ready：", "url": "#production-ready-1", "depth": 3 },
      { "value": "靈活性與約定：", "url": "#靈活性與約定-1", "depth": 3 },
      { "value": "範例程式碼", "url": "#範例程式碼-1", "depth": 2 },
      { "value": "總結", "url": "#總結-21", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-85", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 02 理解 Spring 和 Spring Boot",
      "datePublished": "2024-09-02T00:00:00.000Z",
      "dateModified": "2024-09-02T00:00:00.000Z",
      "summary": "本文介紹了 Spring 和 Spring Boot 兩個 Java 生態系統中重要的框架。Spring 是一個開源 Java 平台，提供依賴注入、AOP、事務管理等功能。Spring Boot 則建立在 Spring 之上，提供自動配置、獨立運行、內嵌服務器等特性，大大簡化了 Spring 應用的開發過程。文章比較了兩者在配置複雜度、依賴管理、應用服務器等方面的區別，總結 Spring Boot 讓 Spring 開發變得更加簡單和便捷。",
      "image": "https://image.cashwu.com/2024/ithome/30day-day02-understand-spring-and-spring-boot/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day02-understand-spring-and-spring-boot"
    }
  },
  {
    "title": "「Spring Boot API 開發：從 0 到 1」Day 01 緣起：起心動念",
    "date": "2024-09-01T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "ithome2024"],
    "lastmod": "2024-09-01T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹作者因新工作需求重新學習 Java 和 Spring Boot，並計劃通過一個 ToDo List API 項目來分享學習經驗。作者將撰寫一系列共 35 篇的文章，涵蓋從基礎到進階的 Spring Boot API 開發知識，旨在為繁體中文社群提供最新、實用的 Spring Boot 學習資源。",
    "images": [
      "https://image.cashwu.com/2024/ithome/30day-day01-origin-intent-motivation/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.295, "time": 317700, "words": 1059 },
    "slug": "2024/ithome/30day-day01-origin-intent-motivation",
    "path": "blog/2024/ithome/30day-day01-origin-intent-motivation",
    "filePath": "blog/2024/ithome/30day-day01-origin-intent-motivation.mdx",
    "toc": [
      { "value": "前言", "url": "#前言", "depth": 2 },
      { "value": "Spring Boot 基本概念", "url": "#spring-boot-基本概念", "depth": 2 },
      { "value": "Spring Boot API 實作", "url": "#spring-boot-api-實作", "depth": 2 },
      { "value": "Spring Boot 與資料庫", "url": "#spring-boot-與資料庫", "depth": 2 },
      { "value": "Spring Boot 測試", "url": "#spring-boot-測試", "depth": 2 },
      { "value": "Spring Boot 安全性", "url": "#spring-boot-安全性", "depth": 2 },
      { "value": "Spring Boot 部署與監控", "url": "#spring-boot-部署與監控", "depth": 2 },
      { "value": "後記", "url": "#後記", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "「Spring Boot API 開發：從 0 到 1」Day 01 緣起：起心動念",
      "datePublished": "2024-09-01T00:00:00.000Z",
      "dateModified": "2024-09-01T00:00:00.000Z",
      "summary": "本文介紹作者因新工作需求重新學習 Java 和 Spring Boot，並計劃通過一個 ToDo List API 項目來分享學習經驗。作者將撰寫一系列共 35 篇的文章，涵蓋從基礎到進階的 Spring Boot API 開發知識，旨在為繁體中文社群提供最新、實用的 Spring Boot 學習資源。",
      "image": "https://image.cashwu.com/2024/ithome/30day-day01-origin-intent-motivation/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/ithome/30day-day01-origin-intent-motivation"
    }
  },
  {
    "title": "Spring Boot 中的 RestTemplate 配置",
    "date": "2024-08-30T00:00:00.000Z",
    "tags": ["Spring Boot", "RestTemplate", "Configuration"],
    "lastmod": "2024-08-30T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了在 Spring Boot 中配置 RestTemplate 的方法，解釋了為什麼會出現 required a bean of type 'org.springframework.web.client.RestTemplate' that could not be found 錯誤，並提供了基本和進階的配置示例",
    "images": ["https://image.cashwu.com/2024/spring-boot-resttemplate-configuration/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.015, "time": 240900, "words": 803 },
    "slug": "2024/spring-boot-resttemplate-configuration",
    "path": "blog/2024/spring-boot-resttemplate-configuration",
    "filePath": "blog/2024/spring-boot-resttemplate-configuration.mdx",
    "toc": [
      {
        "value": "問題的根源：RestTemplate 去哪兒了？",
        "url": "#問題的根源resttemplate-去哪兒了-1",
        "depth": 2
      },
      { "value": "解決方法", "url": "#解決方法-2", "depth": 2 },
      { "value": "為什麼要這樣做？", "url": "#為什麼要這樣做-1", "depth": 2 },
      {
        "value": "進階技巧：自定義你的 RestTemplate",
        "url": "#進階技巧自定義你的-resttemplate-1",
        "depth": 2
      },
      { "value": "結語", "url": "#結語-21", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Spring Boot 中的 RestTemplate 配置",
      "datePublished": "2024-08-30T00:00:00.000Z",
      "dateModified": "2024-08-30T00:00:00.000Z",
      "summary": "本文介紹了在 Spring Boot 中配置 RestTemplate 的方法，解釋了為什麼會出現 required a bean of type 'org.springframework.web.client.RestTemplate' that could not be found 錯誤，並提供了基本和進階的配置示例",
      "image": "https://image.cashwu.com/2024/spring-boot-resttemplate-configuration/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/spring-boot-resttemplate-configuration"
    }
  },
  {
    "title": "Java EnumMap：高效處理 Enum 類型的映射",
    "date": "2024-08-29T00:00:00.000Z",
    "tags": ["Java", "EnumMap", "Enum"],
    "lastmod": "2024-08-29T00:00:00.000Z",
    "draft": false,
    "summary": "深入探討 Java EnumMap 的特點、用法和優勢，包括基本操作、分組計數、替代 switch 語句等實例，幫助開發者更好地利用這一強大工具",
    "images": [
      "https://image.cashwu.com/2024/java-enummap-efficient-mapping-for-enum-types/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.425, "time": 265500, "words": 885 },
    "slug": "2024/java-enummap-efficient-mapping-for-enum-types",
    "path": "blog/2024/java-enummap-efficient-mapping-for-enum-types",
    "filePath": "blog/2024/java-enummap-efficient-mapping-for-enum-types.mdx",
    "toc": [
      { "value": "EnumMap 的主要特點", "url": "#enummap-的主要特點-1", "depth": 2 },
      { "value": "基本用法", "url": "#基本用法-1", "depth": 2 },
      { "value": "1. 創建 EnumMap", "url": "#1-創建-enummap-1", "depth": 3 },
      {
        "value": "2. 使用 EnumMap 進行分組或計數",
        "url": "#2-使用-enummap-進行分組或計數-1",
        "depth": 3
      },
      {
        "value": "3. 在 switch 語句中使用 EnumMap",
        "url": "#3-在-switch-語句中使用-enummap-1",
        "depth": 3
      },
      { "value": "優勢", "url": "#優勢-1", "depth": 2 },
      { "value": "注意事項", "url": "#注意事項-5", "depth": 2 },
      { "value": "C# 的 EnumMap 型別", "url": "#c-的-enummap-型別-1", "depth": 2 },
      { "value": "總結", "url": "#總結-18", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Java EnumMap：高效處理 Enum 類型的映射",
      "datePublished": "2024-08-29T00:00:00.000Z",
      "dateModified": "2024-08-29T00:00:00.000Z",
      "summary": "深入探討 Java EnumMap 的特點、用法和優勢，包括基本操作、分組計數、替代 switch 語句等實例，幫助開發者更好地利用這一強大工具",
      "image": "https://image.cashwu.com/2024/java-enummap-efficient-mapping-for-enum-types/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/java-enummap-efficient-mapping-for-enum-types"
    }
  },
  {
    "title": "Java 中的數值型別：基本型別與包裝類別在 POJO、DTO 和實體中的選擇",
    "date": "2024-08-28T00:00:00.000Z",
    "tags": ["Java"],
    "lastmod": "2024-08-28T00:00:00.000Z",
    "draft": false,
    "summary": "深入探討 Java 中基本數值型別和包裝類別的選擇問題，特別是在 POJO、DTO 和數據庫實體中的應用。本文提供了詳細的技術分析、代碼示例和最佳實踐建議。",
    "images": ["https://image.cashwu.com/2024/java-numeric-types-selection-guide/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.915, "time": 354900, "words": 1183 },
    "slug": "2024/java-numeric-types-selection-guide",
    "path": "blog/2024/java-numeric-types-selection-guide",
    "filePath": "blog/2024/java-numeric-types-selection-guide.mdx",
    "toc": [
      { "value": "基本型別和包裝類別的特性", "url": "#基本型別和包裝類別的特性-1", "depth": 2 },
      { "value": "Java 與 C# 數值型別的比較", "url": "#java-與-c-數值型別的比較-1", "depth": 2 },
      { "value": "POJO 和 DTO 中的應用", "url": "#pojo-和-dto-中的應用-1", "depth": 2 },
      { "value": "數據庫實體中的應用", "url": "#數據庫實體中的應用-1", "depth": 2 },
      { "value": "效能考慮", "url": "#效能考慮-1", "depth": 2 },
      { "value": "選擇建議", "url": "#選擇建議-1", "depth": 2 },
      { "value": "結論", "url": "#結論-54", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Java 中的數值型別：基本型別與包裝類別在 POJO、DTO 和實體中的選擇",
      "datePublished": "2024-08-28T00:00:00.000Z",
      "dateModified": "2024-08-28T00:00:00.000Z",
      "summary": "深入探討 Java 中基本數值型別和包裝類別的選擇問題，特別是在 POJO、DTO 和數據庫實體中的應用。本文提供了詳細的技術分析、代碼示例和最佳實踐建議。",
      "image": "https://image.cashwu.com/2024/java-numeric-types-selection-guide/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/java-numeric-types-selection-guide"
    }
  },
  {
    "title": "資料庫交易隔離級別與讀取現象：髒讀、不可重複讀和幻讀",
    "date": "2024-08-27T00:00:00.000Z",
    "tags": ["database", "transaction", "sql"],
    "lastmod": "2024-08-27T00:00:00.000Z",
    "draft": false,
    "summary": "探討資料庫中的三大讀取問題：髒讀、不可重複讀和幻讀。通過簡單的比喻和 C# 和 Java 程式碼範例，幫助讀者理解這些概念及其在資料庫交易中的重要性",
    "images": [
      "https://image.cashwu.com/2024/database-transaction-isolation-levels-and-read-phenomena/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.965, "time": 537900, "words": 1793 },
    "slug": "2024/database-transaction-isolation-levels-and-read-phenomena",
    "path": "blog/2024/database-transaction-isolation-levels-and-read-phenomena",
    "filePath": "blog/2024/database-transaction-isolation-levels-and-read-phenomena.mdx",
    "toc": [
      { "value": "交易隔離級別", "url": "#交易隔離級別-1", "depth": 2 },
      { "value": "髒讀（Dirty Read）", "url": "#髒讀dirty-read-1", "depth": 2 },
      { "value": "C# 範例", "url": "#c-範例-3", "depth": 3 },
      { "value": "Java 範例", "url": "#java-範例-3", "depth": 3 },
      {
        "value": "不可重複讀（Non-repeatable Read）",
        "url": "#不可重複讀non-repeatable-read-1",
        "depth": 2
      },
      { "value": "C# 範例", "url": "#c-範例-4", "depth": 3 },
      { "value": "Java 範例", "url": "#java-範例-4", "depth": 3 },
      { "value": "幻讀（Phantom Read）", "url": "#幻讀phantom-read-1", "depth": 2 },
      { "value": "C# 範例", "url": "#c-範例-5", "depth": 3 },
      { "value": "Java 範例", "url": "#java-範例-5", "depth": 3 },
      { "value": "參考資料", "url": "#參考資料-3", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "資料庫交易隔離級別與讀取現象：髒讀、不可重複讀和幻讀",
      "datePublished": "2024-08-27T00:00:00.000Z",
      "dateModified": "2024-08-27T00:00:00.000Z",
      "summary": "探討資料庫中的三大讀取問題：髒讀、不可重複讀和幻讀。通過簡單的比喻和 C# 和 Java 程式碼範例，幫助讀者理解這些概念及其在資料庫交易中的重要性",
      "image": "https://image.cashwu.com/2024/database-transaction-isolation-levels-and-read-phenomena/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/database-transaction-isolation-levels-and-read-phenomena"
    }
  },
  {
    "title": "揭秘 JavaScript 的 compose 函數：從 0 到 1",
    "date": "2024-08-26T00:00:00.000Z",
    "tags": ["js", "function", "composition"],
    "lastmod": "2024-08-26T00:00:00.000Z",
    "draft": false,
    "summary": "深入探討 JavaScript 中 compose 函數的魔力，通過淺顯易懂的例子，從基礎到高級，展示如何優雅地組合多個函數，提升代碼的可讀性和可維護性",
    "images": ["https://image.cashwu.com/2024/javascript-function-composition-tutorial/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.515, "time": 270900, "words": 903 },
    "slug": "2024/javascript-function-composition-tutorial",
    "path": "blog/2024/javascript-function-composition-tutorial",
    "filePath": "blog/2024/javascript-function-composition-tutorial.mdx",
    "toc": [
      {
        "value": "什麼是函數組合 (function composition)？",
        "url": "#什麼是函數組合-function-composition-1",
        "depth": 2
      },
      { "value": "來玩玩看吧！", "url": "#來玩玩看吧-1", "depth": 2 },
      { "value": "注意事項", "url": "#注意事項-4", "depth": 2 },
      { "value": "結語", "url": "#結語-19", "depth": 2 },
      { "value": "參考資料", "url": "#參考資料-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "揭秘 JavaScript 的 compose 函數：從 0 到 1",
      "datePublished": "2024-08-26T00:00:00.000Z",
      "dateModified": "2024-08-26T00:00:00.000Z",
      "summary": "深入探討 JavaScript 中 compose 函數的魔力，通過淺顯易懂的例子，從基礎到高級，展示如何優雅地組合多個函數，提升代碼的可讀性和可維護性",
      "image": "https://image.cashwu.com/2024/javascript-function-composition-tutorial/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/javascript-function-composition-tutorial"
    }
  },
  {
    "title": "VS Code 自定義標籤：讓你的 Next.js 專案更有條理！",
    "date": "2024-08-25T00:00:00.000Z",
    "tags": ["VSCode", "Next.js"],
    "lastmod": "2024-08-25T00:00:00.000Z",
    "draft": false,
    "summary": "學習如何使用 VS Code 的自定義標籤功能來改善 Next.js app 路由開發體驗，提高效率並減少錯誤。",
    "images": [
      "https://image.cashwu.com/2024/vscode-custom-labels-for-nextjs-app-router/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.335, "time": 200100, "words": 667 },
    "slug": "2024/vscode-custom-labels-for-nextjs-app-router",
    "path": "blog/2024/vscode-custom-labels-for-nextjs-app-router",
    "filePath": "blog/2024/vscode-custom-labels-for-nextjs-app-router.mdx",
    "toc": [
      { "value": "什麼是自定義標籤？", "url": "#什麼是自定義標籤-1", "depth": 2 },
      { "value": "如何設定？", "url": "#如何設定-1", "depth": 2 },
      { "value": "實際效果如何？", "url": "#實際效果如何-1", "depth": 2 },
      { "value": "為什麼這很重要？", "url": "#為什麼這很重要-1", "depth": 2 },
      { "value": "結語", "url": "#結語-18", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-54", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "VS Code 自定義標籤：讓你的 Next.js 專案更有條理！",
      "datePublished": "2024-08-25T00:00:00.000Z",
      "dateModified": "2024-08-25T00:00:00.000Z",
      "summary": "學習如何使用 VS Code 的自定義標籤功能來改善 Next.js app 路由開發體驗，提高效率並減少錯誤。",
      "image": "https://image.cashwu.com/2024/vscode-custom-labels-for-nextjs-app-router/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/vscode-custom-labels-for-nextjs-app-router"
    }
  },
  {
    "title": "Next.js 環境變數設定大冒險！",
    "date": "2024-08-24T00:00:00.000Z",
    "tags": ["Next.js", "Cloudflare Pages", "env"],
    "lastmod": "2024-08-24T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了如何在 Next.js 中使用環境變數，以及如何在 Cloudflare Pages 上設定和使用這些變數。文章以輕鬆幽默的方式解釋了環境變數的概念，並提供了實用的代碼示例和步驟說明",
    "images": [
      "https://image.cashwu.com/2024/nextjs-environment-variables-cloudflare-pages/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.82, "time": 229200, "words": 764 },
    "slug": "2024/nextjs-environment-variables-cloudflare-pages",
    "path": "blog/2024/nextjs-environment-variables-cloudflare-pages",
    "filePath": "blog/2024/nextjs-environment-variables-cloudflare-pages.mdx",
    "toc": [
      { "value": "Next.js 中的環境變數魔法", "url": "#nextjs-中的環境變數魔法-1", "depth": 2 },
      { "value": "環境變數的多重宇宙", "url": "#環境變數的多重宇宙-1", "depth": 2 },
      {
        "value": "Cloudflare Pages 上的環境變數派對",
        "url": "#cloudflare-pages-上的環境變數派對-1",
        "depth": 2
      },
      { "value": "結語", "url": "#結語-17", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Next.js 環境變數設定大冒險！",
      "datePublished": "2024-08-24T00:00:00.000Z",
      "dateModified": "2024-08-24T00:00:00.000Z",
      "summary": "本文介紹了如何在 Next.js 中使用環境變數，以及如何在 Cloudflare Pages 上設定和使用這些變數。文章以輕鬆幽默的方式解釋了環境變數的概念，並提供了實用的代碼示例和步驟說明",
      "image": "https://image.cashwu.com/2024/nextjs-environment-variables-cloudflare-pages/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/nextjs-environment-variables-cloudflare-pages"
    }
  },
  {
    "title": "Lombok @Data 的魔法與陷阱：深入探討 @EqualsAndHashCode",
    "date": "2024-08-22T00:00:00.000Z",
    "tags": ["Java", "Lombok", "EqualsAndHashCode"],
    "lastmod": "2024-08-22T00:00:00.000Z",
    "draft": false,
    "summary": "探討 Java Lombok 的 @Data 注解，特別是其中包含的 @EqualsAndHashCode 注解的默認實現和限制，包括繼承時的問題和如何排除特定field的比較。",
    "images": [
      "https://image.cashwu.com/2024/java-lombok-data-annotation-equals-and-hashcode/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.105, "time": 246300, "words": 821 },
    "slug": "2024/java-lombok-data-annotation-equals-and-hashcode",
    "path": "blog/2024/java-lombok-data-annotation-equals-and-hashcode",
    "filePath": "blog/2024/java-lombok-data-annotation-equals-and-hashcode.mdx",
    "toc": [
      { "value": "@Data 的神奇力量", "url": "#data-的神奇力量-1", "depth": 2 },
      {
        "value": "@EqualsAndHashCode：隱藏的驚喜",
        "url": "#equalsandhashcode隱藏的驚喜-1",
        "depth": 2
      },
      { "value": "默認行為", "url": "#默認行為-1", "depth": 3 },
      { "value": "繼承時的陷阱", "url": "#繼承時的陷阱-1", "depth": 3 },
      { "value": "解決方案：callSuper", "url": "#解決方案callsuper-1", "depth": 3 },
      { "value": "排除不想比較的 field", "url": "#排除不想比較的-field-1", "depth": 2 },
      { "value": "結論", "url": "#結論-57", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Lombok @Data 的魔法與陷阱：深入探討 @EqualsAndHashCode",
      "datePublished": "2024-08-22T00:00:00.000Z",
      "dateModified": "2024-08-22T00:00:00.000Z",
      "summary": "探討 Java Lombok 的 @Data 注解，特別是其中包含的 @EqualsAndHashCode 注解的默認實現和限制，包括繼承時的問題和如何排除特定field的比較。",
      "image": "https://image.cashwu.com/2024/java-lombok-data-annotation-equals-and-hashcode/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/java-lombok-data-annotation-equals-and-hashcode"
    }
  },
  {
    "title": "Spring Boot 中的 @Transactional：輕鬆駕馭資料庫交易",
    "date": "2024-08-21T00:00:00.000Z",
    "tags": ["Spring Boot", "Java", "Transactional"],
    "lastmod": "2024-08-21T00:00:00.000Z",
    "draft": false,
    "summary": "探索 Spring Boot 中 @Transactional 註解的使用方法和最佳實踐，學習如何有效管理資料庫交易，確保數據一致性和應用程序可靠性。",
    "images": [
      "https://image.cashwu.com/2024/spring-boot-transactional-usage-and-best-practices/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.51, "time": 330600, "words": 1102 },
    "slug": "2024/spring-boot-transactional-usage-and-best-practices",
    "path": "blog/2024/spring-boot-transactional-usage-and-best-practices",
    "filePath": "blog/2024/spring-boot-transactional-usage-and-best-practices.mdx",
    "toc": [
      { "value": "@Transactional 是什麼？", "url": "#transactional-是什麼-1", "depth": 2 },
      { "value": "如何使用 @Transactional？", "url": "#如何使用-transactional-1", "depth": 2 },
      { "value": "@Transactional 的注意事項", "url": "#transactional-的注意事項-1", "depth": 2 },
      { "value": "實戰示例", "url": "#實戰示例-1", "depth": 2 },
      { "value": "如何 Debug", "url": "#如何-debug-1", "depth": 2 },
      { "value": "結語", "url": "#結語-16", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Spring Boot 中的 @Transactional：輕鬆駕馭資料庫交易",
      "datePublished": "2024-08-21T00:00:00.000Z",
      "dateModified": "2024-08-21T00:00:00.000Z",
      "summary": "探索 Spring Boot 中 @Transactional 註解的使用方法和最佳實踐，學習如何有效管理資料庫交易，確保數據一致性和應用程序可靠性。",
      "image": "https://image.cashwu.com/2024/spring-boot-transactional-usage-and-best-practices/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/spring-boot-transactional-usage-and-best-practices"
    }
  },
  {
    "title": "React Context Provider：輕鬆管理全局狀態的魔法工具",
    "date": "2024-08-20T00:00:00.000Z",
    "tags": ["react", "js", "hook"],
    "lastmod": "2024-08-20T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了 React Context Provider 的使用方法和優點，包括如何創建 Context、Provider 組件和自定義 Hook，以及在實際應用中的使用示例和常見應用場景。",
    "images": ["https://image.cashwu.com/2024/react-context-provider-tutorial/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.425, "time": 325500, "words": 1085 },
    "slug": "2024/react-context-provider-tutorial",
    "path": "blog/2024/react-context-provider-tutorial",
    "filePath": "blog/2024/react-context-provider-tutorial.mdx",
    "toc": [
      {
        "value": "為什麼要用 Context Provider？",
        "url": "#為什麼要用-context-provider-1",
        "depth": 2
      },
      { "value": "如何使用 Context Provider？", "url": "#如何使用-context-provider-1", "depth": 2 },
      { "value": "Context Provider value", "url": "#context-provider-value-1", "depth": 3 },
      { "value": "如何在應用中使用？", "url": "#如何在應用中使用-1", "depth": 2 },
      {
        "value": "Context Provider 的應用場景",
        "url": "#context-provider-的應用場景-1",
        "depth": 2
      },
      { "value": "結語", "url": "#結語-14", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "React Context Provider：輕鬆管理全局狀態的魔法工具",
      "datePublished": "2024-08-20T00:00:00.000Z",
      "dateModified": "2024-08-20T00:00:00.000Z",
      "summary": "本文介紹了 React Context Provider 的使用方法和優點，包括如何創建 Context、Provider 組件和自定義 Hook，以及在實際應用中的使用示例和常見應用場景。",
      "image": "https://image.cashwu.com/2024/react-context-provider-tutorial/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/react-context-provider-tutorial"
    }
  },
  {
    "title": "打造你的 React 神器：React 共用 Input Hook",
    "date": "2024-08-19T00:00:00.000Z",
    "tags": ["react", "js", "hook"],
    "lastmod": "2024-08-19T00:00:00.000Z",
    "draft": false,
    "summary": "學習如何創建一個強大的 React 共用 input hook，來簡化表單處理，提高代碼可重用性，還可以添加驗證功能。",
    "images": [
      "https://image.cashwu.com/2024/react-custom-input-hook-for-easy-form-handling/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.135, "time": 248100, "words": 827 },
    "slug": "2024/react-custom-input-hook-for-easy-form-handling",
    "path": "blog/2024/react-custom-input-hook-for-easy-form-handling",
    "filePath": "blog/2024/react-custom-input-hook-for-easy-form-handling.mdx",
    "toc": [
      { "value": "為什麼需要共用 Input Hook？", "url": "#為什麼需要共用-input-hook-1", "depth": 2 },
      { "value": "開始打造我們的神兵利器", "url": "#開始打造我們的神兵利器-1", "depth": 2 },
      { "value": "如何使用這個超強武器？", "url": "#如何使用這個超強武器-1", "depth": 2 },
      { "value": "進階技巧：添加驗證功能", "url": "#進階技巧添加驗證功能-1", "depth": 2 },
      { "value": "結語", "url": "#結語-15", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "打造你的 React 神器：React 共用 Input Hook",
      "datePublished": "2024-08-19T00:00:00.000Z",
      "dateModified": "2024-08-19T00:00:00.000Z",
      "summary": "學習如何創建一個強大的 React 共用 input hook，來簡化表單處理，提高代碼可重用性，還可以添加驗證功能。",
      "image": "https://image.cashwu.com/2024/react-custom-input-hook-for-easy-form-handling/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/react-custom-input-hook-for-easy-form-handling"
    }
  },
  {
    "title": "打造你的 React 神器：自定義 Hook 實現超強大的陣列操作！",
    "date": "2024-08-18T00:00:00.000Z",
    "tags": ["react", "js", "hook"],
    "lastmod": "2024-08-18T00:00:00.000Z",
    "draft": false,
    "summary": "介紹如何使用自定義 Hook useArrayState 來簡化 React 中的陣列操作，包括新增、刪除、更新等功能，並展示如何應用於待辦事項清單。",
    "images": [
      "https://image.cashwu.com/2024/react-custom-hook-useArrayState-simplified-array-operations/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.17, "time": 250200, "words": 834 },
    "slug": "2024/react-custom-hook-useArrayState-simplified-array-operations",
    "path": "blog/2024/react-custom-hook-useArrayState-simplified-array-operations",
    "filePath": "blog/2024/react-custom-hook-useArrayState-simplified-array-operations.mdx",
    "toc": [
      {
        "value": "useArrayState：你的陣列好幫手",
        "url": "#usearraystate你的陣列好幫手-1",
        "depth": 2
      },
      {
        "value": "實戰應用：打造一個酷炫的待辦事項清單",
        "url": "#實戰應用打造一個酷炫的待辦事項清單-1",
        "depth": 2
      },
      {
        "value": "為什麼要使用 useArrayState？",
        "url": "#為什麼要使用-usearraystate-1",
        "depth": 2
      },
      { "value": "結語", "url": "#結語-11", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "打造你的 React 神器：自定義 Hook 實現超強大的陣列操作！",
      "datePublished": "2024-08-18T00:00:00.000Z",
      "dateModified": "2024-08-18T00:00:00.000Z",
      "summary": "介紹如何使用自定義 Hook useArrayState 來簡化 React 中的陣列操作，包括新增、刪除、更新等功能，並展示如何應用於待辦事項清單。",
      "image": "https://image.cashwu.com/2024/react-custom-hook-useArrayState-simplified-array-operations/cover.webp",
      "url": "https://blog.cashwu.com/blog/2024/react-custom-hook-useArrayState-simplified-array-operations"
    }
  },
  {
    "title": "Git Include：輕鬆管理多重身份的神奇魔法",
    "date": "2024-08-17T00:00:00.000Z",
    "tags": ["git"],
    "lastmod": "2024-08-17T00:00:00.000Z",
    "draft": false,
    "summary": "本文介紹了 Git Include 功能，解釋如何使用它來管理不同專案的 Git 配置。文章詳細說明了設置過程，包括在全局 .gitconfig 文件中使用 includeIf 指令，以及如何為特定目錄創建自定義配置。通過實際例子展示了如何在個人和公司專案中自動切換 Git 身份，並提供了進階使用技巧。這個強大的功能可以大大提高開發效率，幫助開發者更好地組織和管理多個 Git 身份。",
    "images": ["https://image.cashwu.com/git.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 3.005, "time": 180300, "words": 601 },
    "slug": "2024/git-include-easily-manage-multiple-identities",
    "path": "blog/2024/git-include-easily-manage-multiple-identities",
    "filePath": "blog/2024/git-include-easily-manage-multiple-identities.mdx",
    "toc": [
      { "value": "Git Include 是什麼？", "url": "#git-include-是什麼-1", "depth": 2 },
      { "value": "如何設置 Git Include", "url": "#如何設置-git-include-1", "depth": 2 },
      { "value": "實際操作：見證奇蹟的時刻", "url": "#實際操作見證奇蹟的時刻-1", "depth": 2 },
      { "value": "進階技巧：條件性 Include", "url": "#進階技巧條件性-include-1", "depth": 2 },
      { "value": "結語", "url": "#結語-13", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Git Include：輕鬆管理多重身份的神奇魔法",
      "datePublished": "2024-08-17T00:00:00.000Z",
      "dateModified": "2024-08-17T00:00:00.000Z",
      "summary": "本文介紹了 Git Include 功能，解釋如何使用它來管理不同專案的 Git 配置。文章詳細說明了設置過程，包括在全局 .gitconfig 文件中使用 includeIf 指令，以及如何為特定目錄創建自定義配置。通過實際例子展示了如何在個人和公司專案中自動切換 Git 身份，並提供了進階使用技巧。這個強大的功能可以大大提高開發效率，幫助開發者更好地組織和管理多個 Git 身份。",
      "image": "https://image.cashwu.com/git.webp",
      "url": "https://blog.cashwu.com/blog/2024/git-include-easily-manage-multiple-identities"
    }
  },
  {
    "title": "Warp Launch Configurations",
    "date": "2024-03-21T00:00:00.000Z",
    "tags": ["warp"],
    "draft": false,
    "summary": "Warp 的 Launch Configurations，我個人覺得有點類似 Workspace 的概念，它可以把自己目前操作的視窗相關資訊存起來，下次可以快速的回復，而且還可以跑指定的 command，會讓整個操作變的很自動化",
    "images": ["https://image.cashwu.com/2024/warp-workspace-launch-configurations/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.15, "time": 129000, "words": 430 },
    "slug": "warp-workspace-launch-configurations",
    "path": "blog/warp-workspace-launch-configurations",
    "filePath": "blog/warp-workspace-launch-configurations.mdx",
    "toc": [
      { "value": "儲存設定檔", "url": "#儲存設定檔-1", "depth": 2 },
      { "value": "使用設定檔", "url": "#使用設定檔-1", "depth": 2 },
      { "value": "修改設定檔", "url": "#修改設定檔-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Warp Launch Configurations",
      "datePublished": "2024-03-21T00:00:00.000Z",
      "dateModified": "2024-03-21T00:00:00.000Z",
      "summary": "Warp 的 Launch Configurations，我個人覺得有點類似 Workspace 的概念，它可以把自己目前操作的視窗相關資訊存起來，下次可以快速的回復，而且還可以跑指定的 command，會讓整個操作變的很自動化",
      "image": "https://image.cashwu.com/2024/warp-workspace-launch-configurations/cover.webp",
      "url": "https://blog.cashwu.com/blog/warp-workspace-launch-configurations"
    }
  },
  {
    "title": "ideavim 自動根據不同的 IDE 選擇 ideavimrc 設定檔",
    "date": "2024-03-18T00:00:00.000Z",
    "tags": ["ideavim", "jetbrains"],
    "draft": false,
    "summary": "ideavim 自動根據不同的 ide 選擇 ideavimrc 設定檔",
    "images": [
      "https://image.cashwu.com/2024/ideavim-ide-specific-options-auto-switch-ideavimrc-setting/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.205, "time": 132300, "words": 441 },
    "slug": "ideavim-ide-specific-options-auto-switch-ideavimrc-setting",
    "path": "blog/ideavim-ide-specific-options-auto-switch-ideavimrc-setting",
    "filePath": "blog/ideavim-ide-specific-options-auto-switch-ideavimrc-setting.mdx",
    "toc": [
      { "value": "ideavimrc 設定檔", "url": "#ideavimrc-設定檔-1", "depth": 3 },
      { "value": "intellij.ideavimrc 設定檔", "url": "#intellijideavimrc-設定檔-1", "depth": 3 },
      { "value": "rider.ideavimrc 設定檔", "url": "#riderideavimrc-設定檔-1", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ideavim 自動根據不同的 IDE 選擇 ideavimrc 設定檔",
      "datePublished": "2024-03-18T00:00:00.000Z",
      "dateModified": "2024-03-18T00:00:00.000Z",
      "summary": "ideavim 自動根據不同的 ide 選擇 ideavimrc 設定檔",
      "image": "https://image.cashwu.com/2024/ideavim-ide-specific-options-auto-switch-ideavimrc-setting/cover.webp",
      "url": "https://blog.cashwu.com/blog/ideavim-ide-specific-options-auto-switch-ideavimrc-setting"
    }
  },
  {
    "title": "Spring Boot api 取得參數的幾種方式",
    "date": "2024-03-18T00:00:00.000Z",
    "tags": ["springboot"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": true,
    "summary": "Spring Boot api 取得參數的幾種方式",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.405, "time": 144300, "words": 481 },
    "slug": "_Draft/spring-boot-api-get-parameter-argument",
    "path": "blog/_Draft/spring-boot-api-get-parameter-argument",
    "filePath": "blog/_Draft/spring-boot-api-get-parameter-argument.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-15", "depth": 2 },
      { "value": "原因", "url": "#原因-9", "depth": 2 },
      { "value": "解法", "url": "#解法-15", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-21", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Spring Boot api 取得參數的幾種方式",
      "datePublished": "2024-03-18T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Spring Boot api 取得參數的幾種方式",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_Draft/spring-boot-api-get-parameter-argument"
    }
  },
  {
    "title": "Ubuntu mount windows share folder",
    "date": "2024-03-18T00:00:00.000Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": true,
    "summary": "Ubuntu mount windows share folder",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.885, "time": 53100, "words": 177 },
    "slug": "_Draft/ubuntu-mount-windows-share-folder",
    "path": "blog/_Draft/ubuntu-mount-windows-share-folder",
    "filePath": "blog/_Draft/ubuntu-mount-windows-share-folder.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-16", "depth": 2 },
      { "value": "原因", "url": "#原因-10", "depth": 2 },
      { "value": "解法", "url": "#解法-16", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-22", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu mount windows share folder",
      "datePublished": "2024-03-18T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu mount windows share folder",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_Draft/ubuntu-mount-windows-share-folder"
    }
  },
  {
    "title": "CSM SBE",
    "date": "2024-03-18T00:00:00.000Z",
    "tags": ["agile", "sbe", "csm"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": true,
    "summary": "CSM SBE",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.42, "time": 25200, "words": 84 },
    "slug": "_Draft/CSM-SBE/CSM-SBE",
    "path": "blog/_Draft/CSM-SBE/CSM-SBE",
    "filePath": "blog/_Draft/CSM-SBE/CSM-SBE.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-17", "depth": 2 },
      { "value": "原因", "url": "#原因-11", "depth": 2 },
      { "value": "解法", "url": "#解法-17", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-23", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "CSM SBE",
      "datePublished": "2024-03-18T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "CSM SBE",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_Draft/CSM-SBE/CSM-SBE"
    }
  },
  {
    "title": "Martin Fowler 的企業級軟體架構模式 提到的幾個模式 Gateway、Facade、Adapter、Mediator 大亂鬥",
    "date": "2024-03-17T00:00:00.000Z",
    "tags": ["programming", "看書人生"],
    "draft": false,
    "summary": "這個章節主要是在講 Gateway 這個 pattern，然後因為跟一些 pattern 很像，所以就列出了相關 pattern 的比較",
    "images": [
      "/static/images/2024/martin-fowler-patterns-of-enterprise-application-architecture-gateway-facade-adapter-mediator/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.99, "time": 239400, "words": 798 },
    "slug": "martin-fowler-patterns-of-enterprise-application-architecture-gateway-facade-adapter-mediator",
    "path": "blog/martin-fowler-patterns-of-enterprise-application-architecture-gateway-facade-adapter-mediator",
    "filePath": "blog/martin-fowler-patterns-of-enterprise-application-architecture-gateway-facade-adapter-mediator.mdx",
    "toc": [
      {
        "value": "Martin Fowler 的企業級軟體架構模式",
        "url": "#martin-fowler-的企業級軟體架構模式",
        "depth": 2
      },
      { "value": "ChatGPT", "url": "#chatgpt", "depth": 2 },
      { "value": "用途", "url": "#用途", "depth": 3 },
      { "value": "作用範圍", "url": "#作用範圍", "depth": 3 },
      { "value": "實現方式", "url": "#實現方式", "depth": 3 },
      { "value": "相關程式碼", "url": "#相關程式碼", "depth": 2 },
      { "value": "結論", "url": "#結論-4", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Martin Fowler 的企業級軟體架構模式 提到的幾個模式 Gateway、Facade、Adapter、Mediator 大亂鬥",
      "datePublished": "2024-03-17T00:00:00.000Z",
      "dateModified": "2024-03-17T00:00:00.000Z",
      "summary": "這個章節主要是在講 Gateway 這個 pattern，然後因為跟一些 pattern 很像，所以就列出了相關 pattern 的比較",
      "image": "/static/images/2024/martin-fowler-patterns-of-enterprise-application-architecture-gateway-facade-adapter-mediator/cover.webp",
      "url": "https://blog.cashwu.com/blog/martin-fowler-patterns-of-enterprise-application-architecture-gateway-facade-adapter-mediator"
    }
  },
  {
    "title": "Shell - 同步 Git remote 下面的所有分支到另外一個新的 remote",
    "date": "2024-03-16T00:00:00.000Z",
    "tags": ["shell", "git"],
    "draft": false,
    "summary": "這是一個很神奇的需求，要把一個遠端 remote 下面的所有分支，推到一個新的 remote 分支",
    "images": ["https://image.cashwu.com/git.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.415, "time": 84900, "words": 283 },
    "slug": "git-sync-remote-all-branch-to-another-remote-using-shell",
    "path": "blog/git-sync-remote-all-branch-to-another-remote-using-shell",
    "filePath": "blog/git-sync-remote-all-branch-to-another-remote-using-shell.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Shell - 同步 Git remote 下面的所有分支到另外一個新的 remote",
      "datePublished": "2024-03-16T00:00:00.000Z",
      "dateModified": "2024-03-16T00:00:00.000Z",
      "summary": "這是一個很神奇的需求，要把一個遠端 remote 下面的所有分支，推到一個新的 remote 分支",
      "image": "https://image.cashwu.com/git.webp",
      "url": "https://blog.cashwu.com/blog/git-sync-remote-all-branch-to-another-remote-using-shell"
    }
  },
  {
    "title": "spring-boot-設定中文亂碼",
    "date": "2024-03-14T00:00:00.000Z",
    "tags": ["springboot"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": true,
    "summary": "spring-boot-設定中文亂碼",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.42, "time": 25200, "words": 84 },
    "slug": "_Draft/spring-boot-設定中文亂碼",
    "path": "blog/_Draft/spring-boot-設定中文亂碼",
    "filePath": "blog/_Draft/spring-boot-設定中文亂碼/index.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-18", "depth": 2 },
      { "value": "原因", "url": "#原因-12", "depth": 2 },
      { "value": "解法", "url": "#解法-18", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-24", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "spring-boot-設定中文亂碼",
      "datePublished": "2024-03-14T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "spring-boot-設定中文亂碼",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_Draft/spring-boot-設定中文亂碼"
    }
  },
  {
    "title": "基礎還是很重要的",
    "date": "2024-03-13T00:00:00.000Z",
    "tags": ["動畫人生"],
    "draft": false,
    "summary": "就算只有練習基礎 (基本) 的話，練到極致的話，也是非常恐怖 (厲害) 的，有些看起來很厲害的花拳秀腿，不一定可以打的",
    "images": ["https://image.cashwu.com/2024/fundamentals-are-important/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.12, "time": 67200, "words": 224 },
    "slug": "fundamentals-are-important",
    "path": "blog/fundamentals-are-important",
    "filePath": "blog/fundamentals-are-important.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "基礎還是很重要的",
      "datePublished": "2024-03-13T00:00:00.000Z",
      "dateModified": "2024-03-13T00:00:00.000Z",
      "summary": "就算只有練習基礎 (基本) 的話，練到極致的話，也是非常恐怖 (厲害) 的，有些看起來很厲害的花拳秀腿，不一定可以打的",
      "image": "https://image.cashwu.com/2024/fundamentals-are-important/cover.webp",
      "url": "https://blog.cashwu.com/blog/fundamentals-are-important"
    }
  },
  {
    "title": "幫 MonoLisa 字型補上 icon 字型 Nerd Fonts",
    "date": "2024-03-13T00:00:00.000Z",
    "tags": ["monolisa", "programming"],
    "draft": false,
    "summary": "MonoLisa 本身並不支援 Nerd Fonts，不過我們可以自己幫它補上去，就來看怎麼幫 MonoLisa 補上 NerFonts",
    "images": ["https://image.cashwu.com/2024/monolisa-patch-icon-nerd-fonts/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.035, "time": 122100, "words": 407 },
    "slug": "monolisa-patch-icon-nerd-fonts",
    "path": "blog/monolisa-patch-icon-nerd-fonts",
    "filePath": "blog/monolisa-patch-icon-nerd-fonts.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "幫 MonoLisa 字型補上 icon 字型 Nerd Fonts",
      "datePublished": "2024-03-13T00:00:00.000Z",
      "dateModified": "2024-03-13T00:00:00.000Z",
      "summary": "MonoLisa 本身並不支援 Nerd Fonts，不過我們可以自己幫它補上去，就來看怎麼幫 MonoLisa 補上 NerFonts",
      "image": "https://image.cashwu.com/2024/monolisa-patch-icon-nerd-fonts/cover.webp",
      "url": "https://blog.cashwu.com/blog/monolisa-patch-icon-nerd-fonts"
    }
  },
  {
    "title": "Shell - 如何備份 Parallels 資料夾",
    "date": "2024-03-13T00:00:00.000Z",
    "tags": ["shell"],
    "draft": false,
    "summary": "如何備份 Parallels 資料夾",
    "images": ["https://image.cashwu.com/2024/shell-backup-parallels/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.01, "time": 60600, "words": 202 },
    "slug": "shell-backup-parallels",
    "path": "blog/shell-backup-parallels",
    "filePath": "blog/shell-backup-parallels.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Shell - 如何備份 Parallels 資料夾",
      "datePublished": "2024-03-13T00:00:00.000Z",
      "dateModified": "2024-03-13T00:00:00.000Z",
      "summary": "如何備份 Parallels 資料夾",
      "image": "https://image.cashwu.com/2024/shell-backup-parallels/cover.webp",
      "url": "https://blog.cashwu.com/blog/shell-backup-parallels"
    }
  },
  {
    "title": "Spring Boot 使用官方 spring initializr 建立專案",
    "date": "2024-03-12T00:00:00.000Z",
    "tags": ["java", "springboot"],
    "draft": false,
    "summary": "官方有提供一個非常方便的方式，可以在線上產生 Spring Boot 專案，或是也可以直接用 IntelliJ 產生專案",
    "images": [
      "https://image.cashwu.com/2024/spring-boot-spring-initializr-generate-project/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.6, "time": 156000, "words": 520 },
    "slug": "spring-boot-spring-initializr-generate-project",
    "path": "blog/spring-boot-spring-initializr-generate-project",
    "filePath": "blog/spring-boot-spring-initializr-generate-project.mdx",
    "toc": [
      {
        "value": "官方 spring initializr 網頁",
        "url": "#官方-spring-initializr-網頁-1",
        "depth": 2
      },
      { "value": "IntelliJ IDEA", "url": "#intellij-idea-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Spring Boot 使用官方 spring initializr 建立專案",
      "datePublished": "2024-03-12T00:00:00.000Z",
      "dateModified": "2024-03-12T00:00:00.000Z",
      "summary": "官方有提供一個非常方便的方式，可以在線上產生 Spring Boot 專案，或是也可以直接用 IntelliJ 產生專案",
      "image": "https://image.cashwu.com/2024/spring-boot-spring-initializr-generate-project/cover.webp",
      "url": "https://blog.cashwu.com/blog/spring-boot-spring-initializr-generate-project"
    }
  },
  {
    "title": "Raycast - 非常方便的 Quicklinks",
    "date": "2024-03-11T00:00:00.000Z",
    "tags": ["raycast"],
    "draft": false,
    "summary": "Raycast 的 Quicklinks 是很方便的功能，用的好的話，還可以搭配 extensions 來做到自動化的效果",
    "images": ["https://image.cashwu.com/2024/raycast-quicklink/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.46, "time": 207600, "words": 692 },
    "slug": "raycast-quicklink",
    "path": "blog/raycast-quicklink",
    "filePath": "blog/raycast-quicklink.mdx",
    "toc": [
      { "value": "建立", "url": "#建立-1", "depth": 2 },
      { "value": "使用", "url": "#使用-3", "depth": 2 },
      { "value": "修改", "url": "#修改-2", "depth": 2 },
      { "value": "搜尋", "url": "#搜尋-1", "depth": 2 },
      { "value": "快捷鍵", "url": "#快捷鍵-1", "depth": 2 },
      { "value": "後記", "url": "#後記-28", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-53", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Raycast - 非常方便的 Quicklinks",
      "datePublished": "2024-03-11T00:00:00.000Z",
      "dateModified": "2024-03-11T00:00:00.000Z",
      "summary": "Raycast 的 Quicklinks 是很方便的功能，用的好的話，還可以搭配 extensions 來做到自動化的效果",
      "image": "https://image.cashwu.com/2024/raycast-quicklink/cover.webp",
      "url": "https://blog.cashwu.com/blog/raycast-quicklink"
    }
  },
  {
    "title": "使用 SDKMAN 來管理 JDK 的版本",
    "date": "2024-03-10T00:00:00.000Z",
    "tags": ["java"],
    "draft": false,
    "summary": "在 學習 Spring Boot 3.0 這本書裡面，看到可以使用 SDKMAN 來管理 java 的 jdk，感覺還蠻方便的",
    "images": ["https://image.cashwu.com/2024/sdkman-management-java-sdk/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.805, "time": 168300, "words": 561 },
    "slug": "sdkman-management-java-sdk",
    "path": "blog/sdkman-management-java-sdk",
    "filePath": "blog/sdkman-management-java-sdk.mdx",
    "toc": [
      { "value": "安裝", "url": "#安裝-5", "depth": 2 },
      { "value": "管理", "url": "#管理-1", "depth": 2 },
      { "value": "list", "url": "#list-1", "depth": 3 },
      { "value": "install", "url": "#install-2", "depth": 3 },
      { "value": "use", "url": "#use-2", "depth": 3 },
      { "value": "default", "url": "#default-1", "depth": 3 },
      { "value": "查看已經安裝的版本", "url": "#查看已經安裝的版本-1", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "使用 SDKMAN 來管理 JDK 的版本",
      "datePublished": "2024-03-10T00:00:00.000Z",
      "dateModified": "2024-03-10T00:00:00.000Z",
      "summary": "在 學習 Spring Boot 3.0 這本書裡面，看到可以使用 SDKMAN 來管理 java 的 jdk，感覺還蠻方便的",
      "image": "https://image.cashwu.com/2024/sdkman-management-java-sdk/cover.webp",
      "url": "https://blog.cashwu.com/blog/sdkman-management-java-sdk"
    }
  },
  {
    "title": "Shell - 把 zip 替換成 7z",
    "date": "2024-03-09T00:00:00.000Z",
    "tags": ["shell"],
    "draft": false,
    "summary": "因為之前存檔 (備份) 的檔案有蠻多都是 zip 的，想說可不可以一次把它換成 7z 的檔案",
    "images": ["https://image.cashwu.com/2024/shell-covert-zip-to-7z/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.37, "time": 82200, "words": 274 },
    "slug": "shell-covert-zip-to-7z",
    "path": "blog/shell-covert-zip-to-7z",
    "filePath": "blog/shell-covert-zip-to-7z.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Shell - 把 zip 替換成 7z",
      "datePublished": "2024-03-09T00:00:00.000Z",
      "dateModified": "2024-03-09T00:00:00.000Z",
      "summary": "因為之前存檔 (備份) 的檔案有蠻多都是 zip 的，想說可不可以一次把它換成 7z 的檔案",
      "image": "https://image.cashwu.com/2024/shell-covert-zip-to-7z/cover.webp",
      "url": "https://blog.cashwu.com/blog/shell-covert-zip-to-7z"
    }
  },
  {
    "title": "CopyCopter AI 工具",
    "date": "2024-03-08T00:00:00.000Z",
    "tags": ["ai"],
    "draft": false,
    "summary": "CopyCopter 是一個把文字轉成影片的 AI 工具，給它一個網址，就可以根據網址裡面的文字內容產生一個影片",
    "images": ["https://image.cashwu.com/2024/ai-text-covert-to-video-copycopter-ai/01.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.035, "time": 62100, "words": 207 },
    "slug": "ai-text-covert-to-video-copycopter-ai",
    "path": "blog/ai-text-covert-to-video-copycopter-ai",
    "filePath": "blog/ai-text-covert-to-video-copycopter-ai.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "CopyCopter AI 工具",
      "datePublished": "2024-03-08T00:00:00.000Z",
      "dateModified": "2024-03-08T00:00:00.000Z",
      "summary": "CopyCopter 是一個把文字轉成影片的 AI 工具，給它一個網址，就可以根據網址裡面的文字內容產生一個影片",
      "image": "https://image.cashwu.com/2024/ai-text-covert-to-video-copycopter-ai/01.webp",
      "url": "https://blog.cashwu.com/blog/ai-text-covert-to-video-copycopter-ai"
    }
  },
  {
    "title": "我分享，你選擇",
    "date": "2024-03-07T00:00:00.000Z",
    "tags": ["murmur"],
    "draft": false,
    "summary": "分享了一篇 Pair Programming 的相關文章「Pair Programming 說明書」在 Twitter (X) 上面的心得文",
    "images": ["https://image.cashwu.com/2024/sharing-vs-expectations/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.545, "time": 92700, "words": 309 },
    "slug": "sharing-vs-expectations",
    "path": "blog/sharing-vs-expectations",
    "filePath": "blog/sharing-vs-expectations.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "我分享，你選擇",
      "datePublished": "2024-03-07T00:00:00.000Z",
      "dateModified": "2024-03-07T00:00:00.000Z",
      "summary": "分享了一篇 Pair Programming 的相關文章「Pair Programming 說明書」在 Twitter (X) 上面的心得文",
      "image": "https://image.cashwu.com/2024/sharing-vs-expectations/cover.webp",
      "url": "https://blog.cashwu.com/blog/sharing-vs-expectations"
    }
  },
  {
    "title": "Book - 易讀程式之美學－提升程式碼可讀性的簡單法則 (The Art of Readable Code)",
    "date": "2024-03-05T00:00:00.000Z",
    "tags": ["book"],
    "draft": false,
    "summary": "「易讀程式之美學」這本書，我覺得比 無瑕的程式碼 (Clean Code) 來的輕薄容易看，可以看成是一本前導書。文章內容，是在之前公司內，我舉辦的讀書會，我整理的一些內容，基本上都是我要特別點出來跟大家分享的重點。",
    "images": ["https://image.cashwu.com/2024/the-art-of-readable-code/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "15 min read", "minutes": 14.605, "time": 876300, "words": 2921 },
    "slug": "the-art-of-readable-code",
    "path": "blog/the-art-of-readable-code",
    "filePath": "blog/the-art-of-readable-code.mdx",
    "toc": [
      { "value": "第一章 程式碼應該易於理解", "url": "#第一章-程式碼應該易於理解-1", "depth": 2 },
      { "value": "第一部份 表層改善", "url": "#第一部份-表層改善-1", "depth": 1 },
      { "value": "第二章 富含資訊的名稱", "url": "#第二章-富含資訊的名稱-1", "depth": 2 },
      { "value": "01 選擇詞彙", "url": "#01-選擇詞彙-1", "depth": 3 },
      {
        "value": "02 避免 tmp 與 result 通用名稱",
        "url": "#02-避免-tmp-與-result-通用名稱-1",
        "depth": 3
      },
      {
        "value": "03 優先使用具體名稱而非抽象名稱",
        "url": "#03-優先使用具體名稱而非抽象名稱-1",
        "depth": 3
      },
      { "value": "04 在名稱中加入額外資訊", "url": "#04-在名稱中加入額外資訊-1", "depth": 3 },
      { "value": "05 名稱該有多長", "url": "#05-名稱該有多長-1", "depth": 3 },
      {
        "value": "06 利用名稱格式加入更多意義",
        "url": "#06-利用名稱格式加入更多意義-1",
        "depth": 3
      },
      { "value": "第三章 不被誤解的名稱", "url": "#第三章-不被誤解的名稱-1", "depth": 2 },
      { "value": "邊界的極值 min, max", "url": "#邊界的極值-min-max-1", "depth": 3 },
      { "value": "封閉區間 first, last", "url": "#封閉區間-first-last-1", "depth": 3 },
      { "value": "半開放區間 begin, end", "url": "#半開放區間-begin-end-1", "depth": 3 },
      { "value": "bool 名稱", "url": "#bool-名稱-1", "depth": 3 },
      { "value": "符合使用者的預期", "url": "#符合使用者的預期-1", "depth": 3 },
      { "value": "評估多個可用名稱", "url": "#評估多個可用名稱-1", "depth": 3 },
      { "value": "第四章 美學", "url": "#第四章-美學-1", "depth": 2 },
      {
        "value": "調整斷行讓程式更加一致與簡潔",
        "url": "#調整斷行讓程式更加一致與簡潔-1",
        "depth": 3
      },
      { "value": "用方法消除混亂", "url": "#用方法消除混亂-1", "depth": 3 },
      { "value": "適當使用列對齊", "url": "#適當使用列對齊-1", "depth": 3 },
      { "value": "選擇有意義的順序並堅守到底", "url": "#選擇有意義的順序並堅守到底-1", "depth": 3 },
      { "value": "將宣告組織成區塊", "url": "#將宣告組織成區塊-1", "depth": 3 },
      { "value": "區分程式碼「段落」", "url": "#區分程式碼段落-1", "depth": 3 },
      { "value": "個人風格與一致性", "url": "#個人風格與一致性-1", "depth": 3 },
      { "value": "第五章 認識註解", "url": "#第五章-認識註解-1", "depth": 2 },
      { "value": "不該註解的部份", "url": "#不該註解的部份-1", "depth": 3 },
      { "value": "記錄自己的想法", "url": "#記錄自己的想法-1", "depth": 3 },
      { "value": "為讀者設想", "url": "#為讀者設想-1", "depth": 3 },
      { "value": "避免寫作抗拒", "url": "#避免寫作抗拒-1", "depth": 3 },
      { "value": "第六章 讓註解精確與簡潔", "url": "#第六章-讓註解精確與簡潔-1", "depth": 2 },
      { "value": "避免模稜兩可的代名詞", "url": "#避免模稜兩可的代名詞-1", "depth": 3 },
      {
        "value": "使用具代表性的輸入 / 輸出範列",
        "url": "#使用具代表性的輸入--輸出範列-1",
        "depth": 3
      },
      { "value": "函數參數名稱的註解", "url": "#函數參數名稱的註解-1", "depth": 3 },
      { "value": "使用訊息密集的詞彙", "url": "#使用訊息密集的詞彙-1", "depth": 3 },
      { "value": "第二部份 簡化迴圈與邏輯", "url": "#第二部份-簡化迴圈與邏輯-1", "depth": 1 },
      { "value": "第七章 提高控制流程可讀性", "url": "#第七章-提高控制流程可讀性-1", "depth": 2 },
      { "value": "01 條件式中的條件順序", "url": "#01-條件式中的條件順序-1", "depth": 3 },
      { "value": "02 if/else 區塊順序", "url": "#02-ifelse-區塊順序-1", "depth": 3 },
      { "value": "03 ?: 三元運算式", "url": "#03--三元運算式-1", "depth": 3 },
      { "value": "04 避免 do/while 迴圈", "url": "#04-避免-dowhile-迴圈-1", "depth": 3 },
      { "value": "05 儘早由函數中返回", "url": "#05-儘早由函數中返回-1", "depth": 3 },
      { "value": "06 惡名昭彰的 goto", "url": "#06-惡名昭彰的-goto-1", "depth": 3 },
      { "value": "07 減少巢狀結構", "url": "#07-減少巢狀結構-1", "depth": 3 },
      { "value": "08 能否理解執行流程", "url": "#08-能否理解執行流程-1", "depth": 3 },
      { "value": "第八章 分解巨大表示式", "url": "#第八章-分解巨大表示式-1", "depth": 2 },
      { "value": "01 解釋性變數", "url": "#01-解釋性變數-1", "depth": 3 },
      { "value": "02 摘要變數", "url": "#02-摘要變數-1", "depth": 3 },
      { "value": "03 利用笛摩根定律", "url": "#03-利用笛摩根定律-1", "depth": 3 },
      { "value": "04 誤用捷徑邏輯", "url": "#04-誤用捷徑邏輯-1", "depth": 3 },
      { "value": "06 分解巨大的敘述", "url": "#06-分解巨大的敘述-1", "depth": 3 },
      { "value": "07 另一個有創意的簡化手法", "url": "#07-另一個有創意的簡化手法-1", "depth": 3 },
      { "value": "第九章 變數與可讀性", "url": "#第九章-變數與可讀性-1", "depth": 2 },
      { "value": "01 消除變數", "url": "#01-消除變數-1", "depth": 3 },
      { "value": "02 縮限變數的範圍", "url": "#02-縮限變數的範圍-1", "depth": 3 },
      { "value": "03 偏好單次寫入的變數", "url": "#03-偏好單次寫入的變數-1", "depth": 3 },
      { "value": "第三部份 重新組織程式碼", "url": "#第三部份-重新組織程式碼-1", "depth": 1 },
      { "value": "第十章 抽離不相關子問題", "url": "#第十章-抽離不相關子問題-1", "depth": 2 },
      { "value": "01 說明範例", "url": "#01-說明範例-1", "depth": 3 },
      { "value": "02 純工具程式碼", "url": "#02-純工具程式碼-1", "depth": 3 },
      { "value": "03 其它通用程式碼", "url": "#03-其它通用程式碼-1", "depth": 3 },
      { "value": "04 建立大量通用程式碼", "url": "#04-建立大量通用程式碼-1", "depth": 3 },
      { "value": "05 專案專屬功能", "url": "#05-專案專屬功能-1", "depth": 3 },
      { "value": "06 簡化既有介面", "url": "#06-簡化既有介面-1", "depth": 3 },
      { "value": "07 依需求重塑介面", "url": "#07-依需求重塑介面-1", "depth": 3 },
      { "value": "08 過猶不及", "url": "#08-過猶不及-1", "depth": 3 },
      { "value": "第十一章 一次一項工作", "url": "#第十一章-一次一項工作-1", "depth": 2 },
      { "value": "01 工作可以很小", "url": "#01-工作可以很小-1", "depth": 3 },
      { "value": "02 從物件抽取數值", "url": "#02-從物件抽取數值-1", "depth": 3 },
      { "value": "結語", "url": "#結語-12", "depth": 3 },
      {
        "value": "第十二章 將想法轉化為程式碼",
        "url": "#第十二章-將想法轉化為程式碼-1",
        "depth": 2
      },
      { "value": "01 清楚描述邏輯", "url": "#01-清楚描述邏輯-1", "depth": 3 },
      { "value": "02 認識函數庫能提供的協助", "url": "#02-認識函數庫能提供的協助-1", "depth": 3 },
      { "value": "03 應用在較大的問題", "url": "#03-應用在較大的問題-1", "depth": 3 },
      { "value": "04 結語", "url": "#04-結語-1", "depth": 3 },
      { "value": "第十三章 撰寫較少的程式碼", "url": "#第十三章-撰寫較少的程式碼-1", "depth": 2 },
      {
        "value": "01 不開發那些功能 - 不會需要",
        "url": "#01-不開發那些功能---不會需要-1",
        "depth": 3
      },
      { "value": "02 詢問與分解需求", "url": "#02-詢問與分解需求-1", "depth": 3 },
      { "value": "03 維持程式碼小而美", "url": "#03-維持程式碼小而美-1", "depth": 3 },
      { "value": "04 熟悉使用的函式庫", "url": "#04-熟悉使用的函式庫-1", "depth": 3 },
      { "value": "05 範例", "url": "#05-範例-1", "depth": 3 },
      { "value": "第四部份 精選主題", "url": "#第四部份-精選主題-1", "depth": 1 },
      { "value": "第十四章 測試與可讀性", "url": "#第十四章-測試與可讀性-1", "depth": 2 },
      { "value": "01 讓測試易讀與維護", "url": "#01-讓測試易讀與維護-1", "depth": 3 },
      { "value": "03 讓測試更易讀", "url": "#03-讓測試更易讀-1", "depth": 3 },
      { "value": "04 讓錯誤訊息易讀", "url": "#04-讓錯誤訊息易讀-1", "depth": 3 },
      { "value": "05 選擇良好的測試輸入資料", "url": "#05-選擇良好的測試輸入資料-1", "depth": 3 },
      { "value": "06 測試函數的命名", "url": "#06-測試函數的命名-1", "depth": 3 },
      { "value": "07 那些測試有何問題 ?", "url": "#07-那些測試有何問題--1", "depth": 3 },
      { "value": "08 測試友善的開發", "url": "#08-測試友善的開發-1", "depth": 3 },
      { "value": "09 過度應用本原則", "url": "#09-過度應用本原則-1", "depth": 3 },
      { "value": "10 結語", "url": "#10-結語-1", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Book - 易讀程式之美學－提升程式碼可讀性的簡單法則 (The Art of Readable Code)",
      "datePublished": "2024-03-05T00:00:00.000Z",
      "dateModified": "2024-03-05T00:00:00.000Z",
      "summary": "「易讀程式之美學」這本書，我覺得比 無瑕的程式碼 (Clean Code) 來的輕薄容易看，可以看成是一本前導書。文章內容，是在之前公司內，我舉辦的讀書會，我整理的一些內容，基本上都是我要特別點出來跟大家分享的重點。",
      "image": "https://image.cashwu.com/2024/the-art-of-readable-code/cover.webp",
      "url": "https://blog.cashwu.com/blog/the-art-of-readable-code"
    }
  },
  {
    "title": "Book - 高效程序員的 45 個習慣 (Practices of an Agile Developer:Working in the Real World)",
    "date": "2024-03-04T00:00:00.000Z",
    "tags": ["book"],
    "draft": false,
    "summary": "文章內容，是在之前公司內，我舉辦的讀書會，我整理的一些內容，基本上都是我要特別點出來跟大家分享的重點。",
    "images": [
      "https://image.cashwu.com/2024/practices-of-an-agile-developer-working-in-the-real-world/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "17 min read", "minutes": 16.08, "time": 964800, "words": 3216 },
    "slug": "practices-of-an-agile-developer-working-in-the-real-world",
    "path": "blog/practices-of-an-agile-developer-working-in-the-real-world",
    "filePath": "blog/practices-of-an-agile-developer-working-in-the-real-world.mdx",
    "toc": [
      {
        "value": "第一章 敏捷 - 高效軟體開發之道",
        "url": "#第一章-敏捷---高效軟體開發之道-1",
        "depth": 2
      },
      { "value": "第二章 態度決定一切", "url": "#第二章-態度決定一切-1", "depth": 2 },
      { "value": "01 做事", "url": "#01-做事-1", "depth": 3 },
      { "value": "02 欲速則不達", "url": "#02-欲速則不達-1", "depth": 3 },
      { "value": "03 對事不對人", "url": "#03-對事不對人-1", "depth": 3 },
      { "value": "04 排除萬難，奮勇前進", "url": "#04-排除萬難奮勇前進-1", "depth": 3 },
      { "value": "第三章 學無止境", "url": "#第三章-學無止境-1", "depth": 2 },
      { "value": "05 跟蹤變化", "url": "#05-跟蹤變化-1", "depth": 3 },
      { "value": "06 對團隊投資", "url": "#06-對團隊投資-1", "depth": 3 },
      { "value": "07 懂的丟棄", "url": "#07-懂的丟棄-1", "depth": 3 },
      { "value": "08 打破砂鍋問到底", "url": "#08-打破砂鍋問到底-1", "depth": 3 },
      { "value": "09 把握開發節奏", "url": "#09-把握開發節奏-1", "depth": 3 },
      { "value": "第四章 交付用戶想要的軟件", "url": "#第四章-交付用戶想要的軟件-1", "depth": 2 },
      { "value": "10 讓客戶做決定", "url": "#10-讓客戶做決定-1", "depth": 3 },
      {
        "value": "11 讓設計指導而不是操縱開發",
        "url": "#11-讓設計指導而不是操縱開發-1",
        "depth": 3
      },
      { "value": "12 合理的使用 (新) 技術", "url": "#12-合理的使用-新-技術-1", "depth": 3 },
      { "value": "13 保持可以發布", "url": "#13-保持可以發布-1", "depth": 3 },
      { "value": "平衡的藝術", "url": "#平衡的藝術-1", "depth": 4 },
      { "value": "14 提早集成，頻繁集成", "url": "#14-提早集成頻繁集成-1", "depth": 3 },
      { "value": "15 提早實現自動化部署", "url": "#15-提早實現自動化部署-1", "depth": 3 },
      { "value": "16 使用演示獲得頻繁反饋", "url": "#16-使用演示獲得頻繁反饋-1", "depth": 3 },
      { "value": "17 使用短迭代，增量發布", "url": "#17-使用短迭代增量發布-1", "depth": 3 },
      {
        "value": "18 固定的價格就意味著背叛承諾",
        "url": "#18-固定的價格就意味著背叛承諾-1",
        "depth": 3
      },
      { "value": "第五章 敏捷回饋", "url": "#第五章-敏捷回饋-1", "depth": 2 },
      { "value": "19 守護天使", "url": "#19-守護天使-1", "depth": 3 },
      { "value": "20 先用它再實現它", "url": "#20-先用它再實現它-1", "depth": 3 },
      { "value": "21 不同環境，就有不同的問題", "url": "#21-不同環境就有不同的問題-1", "depth": 3 },
      { "value": "22 自動驗收測試", "url": "#22-自動驗收測試-1", "depth": 3 },
      { "value": "23 度量真實的進度", "url": "#23-度量真實的進度-1", "depth": 3 },
      { "value": "24 傾聽用戶的聲音", "url": "#24-傾聽用戶的聲音-1", "depth": 3 },
      { "value": "第六章 敏捷編碼", "url": "#第六章-敏捷編碼-1", "depth": 2 },
      { "value": "25 代碼要清晰的表達意圖", "url": "#25-代碼要清晰的表達意圖-1", "depth": 3 },
      { "value": "26 用代碼溝通", "url": "#26-用代碼溝通-1", "depth": 3 },
      { "value": "27 動態評估取捨", "url": "#27-動態評估取捨-1", "depth": 3 },
      { "value": "28 增量式編程", "url": "#28-增量式編程-1", "depth": 3 },
      { "value": "29 保持簡單", "url": "#29-保持簡單-1", "depth": 3 },
      { "value": "30 編寫內聚的代碼", "url": "#30-編寫內聚的代碼-1", "depth": 3 },
      { "value": "31 告知，不要詢問", "url": "#31-告知不要詢問-1", "depth": 3 },
      { "value": "32 根據契約進行替換", "url": "#32-根據契約進行替換-1", "depth": 3 },
      { "value": "第七章 敏捷調試", "url": "#第七章-敏捷調試-1", "depth": 2 },
      { "value": "33 記錄解決問題的日志", "url": "#33-記錄解決問題的日志-1", "depth": 3 },
      { "value": "34 警告就是錯誤", "url": "#34-警告就是錯誤-1", "depth": 3 },
      { "value": "35 對問題各個擊破", "url": "#35-對問題各個擊破-1", "depth": 3 },
      { "value": "36 報告所有的異常", "url": "#36-報告所有的異常-1", "depth": 3 },
      { "value": "37 提供有用的錯誤信息", "url": "#37-提供有用的錯誤信息-1", "depth": 3 },
      { "value": "第八章 敏捷協作", "url": "#第八章-敏捷協作-1", "depth": 2 },
      { "value": "38 定期安排會面時間", "url": "#38-定期安排會面時間-1", "depth": 3 },
      { "value": "39 架構師必需寫代碼", "url": "#39-架構師必需寫代碼-1", "depth": 3 },
      { "value": "40 實行代碼集體所有制", "url": "#40-實行代碼集體所有制-1", "depth": 3 },
      { "value": "41 成為指導者", "url": "#41-成為指導者-1", "depth": 3 },
      { "value": "42 允許大家自己想辦法", "url": "#42-允許大家自己想辦法-1", "depth": 3 },
      { "value": "43 準備好後再共享代碼", "url": "#43-準備好後再共享代碼-1", "depth": 3 },
      { "value": "44 做代碼複查", "url": "#44-做代碼複查-1", "depth": 3 },
      { "value": "45 及時通報進展與問題", "url": "#45-及時通報進展與問題-1", "depth": 3 },
      { "value": "第九章 尾聲：走向敏捷", "url": "#第九章-尾聲走向敏捷-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Book - 高效程序員的 45 個習慣 (Practices of an Agile Developer:Working in the Real World)",
      "datePublished": "2024-03-04T00:00:00.000Z",
      "dateModified": "2024-03-04T00:00:00.000Z",
      "summary": "文章內容，是在之前公司內，我舉辦的讀書會，我整理的一些內容，基本上都是我要特別點出來跟大家分享的重點。",
      "image": "https://image.cashwu.com/2024/practices-of-an-agile-developer-working-in-the-real-world/cover.webp",
      "url": "https://blog.cashwu.com/blog/practices-of-an-agile-developer-working-in-the-real-world"
    }
  },
  {
    "title": "如果安於現狀，就會止步不前",
    "date": "2024-03-03T00:00:00.000Z",
    "tags": ["日劇人生"],
    "draft": false,
    "summary": "如果安於現狀，就會止步不前",
    "images": ["https://image.cashwu.com/2024/complacency-leads-to-stagnation/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.53, "time": 31800, "words": 106 },
    "slug": "complacency-leads-to-stagnation",
    "path": "blog/complacency-leads-to-stagnation",
    "filePath": "blog/complacency-leads-to-stagnation.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "如果安於現狀，就會止步不前",
      "datePublished": "2024-03-03T00:00:00.000Z",
      "dateModified": "2024-03-03T00:00:00.000Z",
      "summary": "如果安於現狀，就會止步不前",
      "image": "https://image.cashwu.com/2024/complacency-leads-to-stagnation/cover.webp",
      "url": "https://blog.cashwu.com/blog/complacency-leads-to-stagnation"
    }
  },
  {
    "title": "Pair Programming 說明書",
    "date": "2024-03-02T00:00:00.000Z",
    "tags": ["programming"],
    "draft": false,
    "summary": "之前被叫去救火一個專案，因為成員都是 junior，而且對於要改的 domain 都不是很熟的情況下，我覺得使用 Pair Programming 可以有效的解決遇到的問題，於是就寫了長文來說服高層，最後這個專案也是提早約一個月完成，我把可以公開的部份公開。",
    "images": ["https://image.cashwu.com/2024/pair-programming-company-instructions/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.83, "time": 49800, "words": 166 },
    "slug": "pair-programming-company-instructions",
    "path": "blog/pair-programming-company-instructions",
    "filePath": "blog/pair-programming-company-instructions.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Pair Programming 說明書",
      "datePublished": "2024-03-02T00:00:00.000Z",
      "dateModified": "2024-03-02T00:00:00.000Z",
      "summary": "之前被叫去救火一個專案，因為成員都是 junior，而且對於要改的 domain 都不是很熟的情況下，我覺得使用 Pair Programming 可以有效的解決遇到的問題，於是就寫了長文來說服高層，最後這個專案也是提早約一個月完成，我把可以公開的部份公開。",
      "image": "https://image.cashwu.com/2024/pair-programming-company-instructions/cover.webp",
      "url": "https://blog.cashwu.com/blog/pair-programming-company-instructions"
    }
  },
  {
    "title": "通往極速開發的最後一哩路 Structural Search and Replace (SSR)",
    "date": "2024-02-27T00:00:00.000Z",
    "tags": ["jetbrains"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": true,
    "summary": "ReSharper 裡面有一個非常強大的功能叫 Structural Search and Replace (簡稱 SSR)，類似 Regular Expression 一樣，可以找到類似 Structural 的程式碼，也可以把它 Replace 掉，更可以變成 VS (Rider) 裡面的燈泡",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.05, "time": 183000, "words": 610 },
    "slug": "_Draft/jetbrains-structural-search-and-replace/jetbrains-structural-search-and-replace",
    "path": "blog/_Draft/jetbrains-structural-search-and-replace/jetbrains-structural-search-and-replace",
    "filePath": "blog/_Draft/jetbrains-structural-search-and-replace/jetbrains-structural-search-and-replace.mdx",
    "toc": [
      { "value": "定義 Search Pattern", "url": "#定義-search-pattern", "depth": 2 },
      { "value": "定義 Replace Pattern", "url": "#定義-replace-pattern", "depth": 2 },
      { "value": "提示燈泡", "url": "#提示燈泡", "depth": 2 },
      { "value": "後記", "url": "#後記-32", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "通往極速開發的最後一哩路 Structural Search and Replace (SSR)",
      "datePublished": "2024-02-27T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ReSharper 裡面有一個非常強大的功能叫 Structural Search and Replace (簡稱 SSR)，類似 Regular Expression 一樣，可以找到類似 Structural 的程式碼，也可以把它 Replace 掉，更可以變成 VS (Rider) 裡面的燈泡",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_Draft/jetbrains-structural-search-and-replace/jetbrains-structural-search-and-replace"
    }
  },
  {
    "title": "Git - 更新資料夾內所有的 git repo",
    "date": "2024-02-23T00:00:00.000Z",
    "tags": ["git", "shell"],
    "draft": false,
    "summary": "今天突然想到，之前用 tfs 的時候，可以直接用 cli 的方式來更新所有資料夾下面的 repo，不知道 git 是不是也可以寫一個 shell 來更新，於是就有了這篇文章",
    "images": ["https://image.cashwu.com/git.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.935, "time": 116100, "words": 387 },
    "slug": "git-folder-repo-pull-update-all",
    "path": "blog/git-folder-repo-pull-update-all",
    "filePath": "blog/git-folder-repo-pull-update-all.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Git - 更新資料夾內所有的 git repo",
      "datePublished": "2024-02-23T00:00:00.000Z",
      "dateModified": "2024-02-23T00:00:00.000Z",
      "summary": "今天突然想到，之前用 tfs 的時候，可以直接用 cli 的方式來更新所有資料夾下面的 repo，不知道 git 是不是也可以寫一個 shell 來更新，於是就有了這篇文章",
      "image": "https://image.cashwu.com/git.webp",
      "url": "https://blog.cashwu.com/blog/git-folder-repo-pull-update-all"
    }
  },
  {
    "title": "Spring Boot Hello World 從 0 到 1 建立專案 - gradle",
    "date": "2024-02-17T00:00:00.000Z",
    "tags": ["java", "springboot"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "不使用範本的方式建立 spring 的專案，而是自己從空的專案建立起來",
    "images": ["https://image.cashwu.com/2024/spring-boot-hello-world-gradle/01.png"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.425, "time": 85500, "words": 285 },
    "slug": "spring-boot-hello-world-gradle",
    "path": "blog/spring-boot-hello-world-gradle",
    "filePath": "blog/spring-boot-hello-world-gradle.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Spring Boot Hello World 從 0 到 1 建立專案 - gradle",
      "datePublished": "2024-02-17T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "不使用範本的方式建立 spring 的專案，而是自己從空的專案建立起來",
      "image": "https://image.cashwu.com/2024/spring-boot-hello-world-gradle/01.png",
      "url": "https://blog.cashwu.com/blog/spring-boot-hello-world-gradle"
    }
  },
  {
    "title": "Spring Boot Hello World 從 0 到 1 建立專案 - maven",
    "date": "2024-02-15T00:00:00.000Z",
    "tags": ["java", "springboot"],
    "draft": false,
    "summary": "不使用範本的方式建立 spring 的專案，而是自己從空的專案建立起來",
    "images": ["https://image.cashwu.com/2024/spring-boot-hello-world-maven/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.185, "time": 131100, "words": 437 },
    "slug": "spring-boot-hello-world-maven",
    "path": "blog/spring-boot-hello-world-maven",
    "filePath": "blog/spring-boot-hello-world-maven.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Spring Boot Hello World 從 0 到 1 建立專案 - maven",
      "datePublished": "2024-02-15T00:00:00.000Z",
      "dateModified": "2024-02-15T00:00:00.000Z",
      "summary": "不使用範本的方式建立 spring 的專案，而是自己從空的專案建立起來",
      "image": "https://image.cashwu.com/2024/spring-boot-hello-world-maven/cover.webp",
      "url": "https://blog.cashwu.com/blog/spring-boot-hello-world-maven"
    }
  },
  {
    "title": "就像油燈一樣",
    "date": "2023-12-17T04:20:34.000Z",
    "tags": ["murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "images": ["https://image.cashwu.com/2023/like-an-oil-lamp/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.145, "time": 8700, "words": 29 },
    "slug": "like-an-oil-lamp",
    "path": "blog/like-an-oil-lamp",
    "filePath": "blog/like-an-oil-lamp.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "就像油燈一樣",
      "datePublished": "2023-12-17T04:20:34.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "image": "https://image.cashwu.com/2023/like-an-oil-lamp/cover.webp",
      "url": "https://blog.cashwu.com/blog/like-an-oil-lamp"
    }
  },
  {
    "title": "如果 lock 的區塊發生 exception 之後，會不會 unlock",
    "date": "2023-08-18T09:17:01.000Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如果 lock 的區塊發生 exception 之後，會不會 unlock ?",
    "images": [
      "https://image.cashwu.com/2023/csharp-what-happens-if-lock-object-block-raises-exception/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.89, "time": 53400, "words": 178 },
    "slug": "csharp-what-happens-if-lock-object-block-raises-exception",
    "path": "blog/csharp-what-happens-if-lock-object-block-raises-exception",
    "filePath": "blog/csharp-what-happens-if-lock-object-block-raises-exception.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "如果 lock 的區塊發生 exception 之後，會不會 unlock",
      "datePublished": "2023-08-18T09:17:01.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如果 lock 的區塊發生 exception 之後，會不會 unlock ?",
      "image": "https://image.cashwu.com/2023/csharp-what-happens-if-lock-object-block-raises-exception/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-what-happens-if-lock-object-block-raises-exception"
    }
  },
  {
    "title": "學習的「守破離」",
    "date": "2023-04-30T01:09:34.624Z",
    "tags": ["murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "學習的「守破離」",
    "images": ["https://image.cashwu.com/2023/learn-shuhari/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.2, "time": 72000, "words": 240 },
    "slug": "learn-shuhari",
    "path": "blog/learn-shuhari",
    "filePath": "blog/learn-shuhari.mdx",
    "toc": [
      { "value": "守", "url": "#守-1", "depth": 2 },
      { "value": "破", "url": "#破-1", "depth": 2 },
      { "value": "離", "url": "#離-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "學習的「守破離」",
      "datePublished": "2023-04-30T01:09:34.624Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "學習的「守破離」",
      "image": "https://image.cashwu.com/2023/learn-shuhari/cover.webp",
      "url": "https://blog.cashwu.com/blog/learn-shuhari"
    }
  },
  {
    "title": "Rider covert class to record",
    "date": "2023-01-31T06:56:38.214Z",
    "tags": ["refactor", "rider"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "使用 Rider 轉換沒有在使用的 class 變成 record",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.12, "time": 7200, "words": 24 },
    "slug": "rider-covert-class-to-record",
    "path": "blog/rider-covert-class-to-record",
    "filePath": "blog/rider-covert-class-to-record.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Rider covert class to record",
      "datePublished": "2023-01-31T06:56:38.214Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "使用 Rider 轉換沒有在使用的 class 變成 record",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider-covert-class-to-record"
    }
  },
  {
    "title": "C# Dictionary 的 Key 使用 Enum 會不會有 Boxing 的效能問題 ?",
    "date": "2022-11-13T05:42:27.873Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "看到在其它的 blog 中有留言說：如果 C# 的 Dictionary 的 Key 使用 Enum 型別的話，會有 Boxing/Unboxing 的效能問題，引起了我的好奇，用了這麼久的方式，到底會不會有問題",
    "images": [
      "https://image.cashwu.com/2022/csharp-dictionary-key-enum-boxing-unboxing-issue/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.99, "time": 179400, "words": 598 },
    "slug": "csharp-dictionary-key-enum-boxing-unboxing-issue",
    "path": "blog/csharp-dictionary-key-enum-boxing-unboxing-issue",
    "filePath": "blog/csharp-dictionary-key-enum-boxing-unboxing-issue.mdx",
    "toc": [
      { "value": "前言", "url": "#前言-4", "depth": 2 },
      { "value": "Question", "url": "#question-1", "depth": 2 },
      { "value": "Research", "url": "#research-1", "depth": 2 },
      { "value": "Prove", "url": "#prove-1", "depth": 2 },
      { "value": "結論", "url": "#結論-33", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# Dictionary 的 Key 使用 Enum 會不會有 Boxing 的效能問題 ?",
      "datePublished": "2022-11-13T05:42:27.873Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "看到在其它的 blog 中有留言說：如果 C# 的 Dictionary 的 Key 使用 Enum 型別的話，會有 Boxing/Unboxing 的效能問題，引起了我的好奇，用了這麼久的方式，到底會不會有問題",
      "image": "https://image.cashwu.com/2022/csharp-dictionary-key-enum-boxing-unboxing-issue/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-dictionary-key-enum-boxing-unboxing-issue"
    }
  },
  {
    "title": "DevOpsDays Taipei 2022",
    "date": "2022-09-17T09:05:09.595Z",
    "tags": ["event"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "這是參加 DevOpsDays Taipei 2022 一些議程的心得。另外這次拿到的報到序號是 777 XD",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "17 min read", "minutes": 16.505, "time": 990300, "words": 3301 },
    "slug": "devopsdays-taipei-2022",
    "path": "blog/devopsdays-taipei-2022",
    "filePath": "blog/devopsdays-taipei-2022.mdx",
    "toc": [
      {
        "value": "多雲整合企業應用平台 DevOps SRE 落地實踐",
        "url": "#多雲整合企業應用平台-devops-sre-落地實踐",
        "depth": 2
      },
      { "value": "右移測試的實作分享", "url": "#右移測試的實作分享", "depth": 2 },
      { "value": "走過 DevOps 風雨的下一步", "url": "#走過-devops-風雨的下一步", "depth": 2 },
      {
        "value": "DevOps 潮流下的 API First 開發策略",
        "url": "#devops-潮流下的-api-first-開發策略",
        "depth": 2
      },
      { "value": "為 DevOps 插上商業的翅膀", "url": "#為-devops-插上商業的翅膀", "depth": 2 },
      { "value": "後記", "url": "#後記-23", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "DevOpsDays Taipei 2022",
      "datePublished": "2022-09-17T09:05:09.595Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "這是參加 DevOpsDays Taipei 2022 一些議程的心得。另外這次拿到的報到序號是 777 XD",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/devopsdays-taipei-2022"
    }
  },
  {
    "title": "C# StreamWriter write file line by line",
    "date": "2022-08-13T03:28:04.000Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "因為要寫一個小工具需要逐行寫入檔案，突然想到之前有寫過兩篇文章 C# - Simple StreamWriter and StreamReader 和 C# - Simple FileStream Write and Read，結果好像沒有逐行寫檔的程式碼，簡單的記錄一下使用 StreamWriter 來逐行寫檔",
    "images": [
      "https://image.cashwu.com/2022/csharp-streamwriter-write-file-line-by-line/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.685, "time": 41100, "words": 137 },
    "slug": "csharp-streamwriter-write-file-line-by-line",
    "path": "blog/csharp-streamwriter-write-file-line-by-line",
    "filePath": "blog/csharp-streamwriter-write-file-line-by-line.mdx",
    "toc": [
      { "value": "同步", "url": "#同步-1", "depth": 3 },
      { "value": "非同步", "url": "#非同步-1", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# StreamWriter write file line by line",
      "datePublished": "2022-08-13T03:28:04.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "因為要寫一個小工具需要逐行寫入檔案，突然想到之前有寫過兩篇文章 C# - Simple StreamWriter and StreamReader 和 C# - Simple FileStream Write and Read，結果好像沒有逐行寫檔的程式碼，簡單的記錄一下使用 StreamWriter 來逐行寫檔",
      "image": "https://image.cashwu.com/2022/csharp-streamwriter-write-file-line-by-line/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-streamwriter-write-file-line-by-line"
    }
  },
  {
    "title": "Rider EditorConfig csharp_new_line_before_members_in_object_initializers",
    "date": "2022-08-06T13:38:19.683Z",
    "tags": ["editorconfig", "rider"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在上一篇 Rider 啟用 EditorConfig 中有提到一個神奇的設定，現在就要來講這個設定的神奇行為 csharp_new_line_before_members_in_object_initializers",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.345, "time": 80700, "words": 269 },
    "slug": "rider_editorconfig_csharp_new_line_before_members_in_object_initializers",
    "path": "blog/rider_editorconfig_csharp_new_line_before_members_in_object_initializers",
    "filePath": "blog/rider_editorconfig_csharp_new_line_before_members_in_object_initializers.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Rider EditorConfig csharp_new_line_before_members_in_object_initializers",
      "datePublished": "2022-08-06T13:38:19.683Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在上一篇 Rider 啟用 EditorConfig 中有提到一個神奇的設定，現在就要來講這個設定的神奇行為 csharp_new_line_before_members_in_object_initializers",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider_editorconfig_csharp_new_line_before_members_in_object_initializers"
    }
  },
  {
    "title": "Rider Enable EditorConfig",
    "date": "2022-07-31T06:13:03.753Z",
    "tags": ["editorconfig", "rider"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 Rider 裡面要統一團隊的 Code Style，把設定檔變成 team share 是一個方式 (或是給其它人匯入規範的檔案)，不過我發現最快的方式，就是直接在 Rider 啟用 EditorConfig 然後把 Code Style 寫在裡面",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.535, "time": 92100, "words": 307 },
    "slug": "rider-enable-editorconfig",
    "path": "blog/rider-enable-editorconfig",
    "filePath": "blog/rider-enable-editorconfig.mdx",
    "toc": [
      { "value": "啟用 EditorConfig", "url": "#啟用-editorconfig", "depth": 2 },
      { "value": "相關 EditorConfig 設定", "url": "#相關-editorconfig-設定", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Rider Enable EditorConfig",
      "datePublished": "2022-07-31T06:13:03.753Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 Rider 裡面要統一團隊的 Code Style，把設定檔變成 team share 是一個方式 (或是給其它人匯入規範的檔案)，不過我發現最快的方式，就是直接在 Rider 啟用 EditorConfig 然後把 Code Style 寫在裡面",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider-enable-editorconfig"
    }
  },
  {
    "title": "光是看別人做，是不會專精真正的主夫之道的",
    "date": "2022-07-17T03:10:49.174Z",
    "tags": ["漫畫人生"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "光是看別人做，是不會專精真正的主夫之道的。有用就有用，沒用就沒用",
    "images": [
      "https://image.cashwu.com/2022/watching-others-wont-master-the-art-of-housekeeping/cover.webp"
    ],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.565, "time": 33900, "words": 113 },
    "slug": "watching-others-wont-master-the-art-of-housekeeping",
    "path": "blog/watching-others-wont-master-the-art-of-housekeeping",
    "filePath": "blog/watching-others-wont-master-the-art-of-housekeeping.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "光是看別人做，是不會專精真正的主夫之道的",
      "datePublished": "2022-07-17T03:10:49.174Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "光是看別人做，是不會專精真正的主夫之道的。有用就有用，沒用就沒用",
      "image": "https://image.cashwu.com/2022/watching-others-wont-master-the-art-of-housekeeping/cover.webp",
      "url": "https://blog.cashwu.com/blog/watching-others-wont-master-the-art-of-housekeeping"
    }
  },
  {
    "title": "Course - JDK 流看板方法",
    "date": "2021-10-31T15:25:00.000Z",
    "tags": ["course", "kanban"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "JDK 流看板方法上課心得",
    "images": ["https://image.cashwu.com/2021/course-jdk-kanban/cover.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.445, "time": 206700, "words": 689 },
    "slug": "course-jdk-kanban",
    "path": "blog/course-jdk-kanban",
    "filePath": "blog/course-jdk-kanban.mdx",
    "toc": [
      { "value": "前言", "url": "#前言-3", "depth": 2 },
      { "value": "心得", "url": "#心得-2", "depth": 2 },
      { "value": "第一天", "url": "#第一天-1", "depth": 3 },
      { "value": "第二天", "url": "#第二天-1", "depth": 3 },
      { "value": "後記", "url": "#後記-27", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Course - JDK 流看板方法",
      "datePublished": "2021-10-31T15:25:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "JDK 流看板方法上課心得",
      "image": "https://image.cashwu.com/2021/course-jdk-kanban/cover.webp",
      "url": "https://blog.cashwu.com/blog/course-jdk-kanban"
    }
  },
  {
    "title": "ASP.NET Core Razor 即時編譯",
    "date": "2020-09-08T01:37:30.456Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET MVC 的年代，畫面 (Razor) 修改完之後，在瀏覽器重新整理就可以看到修改後的畫面，這種即時編譯的方式在 .NET Core 就直接拿掉了，如果需要這個功能的話，需要自行安裝套件就可以達到一樣的效果",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.78, "time": 46800, "words": 156 },
    "slug": "asp-net-core-razor-runtimecompilation",
    "path": "blog/asp-net-core-razor-runtimecompilation",
    "filePath": "blog/asp-net-core-razor-runtimecompilation.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core Razor 即時編譯",
      "datePublished": "2020-09-08T01:37:30.456Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET MVC 的年代，畫面 (Razor) 修改完之後，在瀏覽器重新整理就可以看到修改後的畫面，這種即時編譯的方式在 .NET Core 就直接拿掉了，如果需要這個功能的話，需要自行安裝套件就可以達到一樣的效果",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-razor-runtimecompilation"
    }
  },
  {
    "title": "Git 一次刪除所有的 tag",
    "date": "2020-08-27T12:33:43.833Z",
    "tags": ["git"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Git 一次刪除所有的 tag",
    "images": ["https://image.cashwu.com/git.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.16, "time": 9600, "words": 32 },
    "slug": "git-delete-all-tag",
    "path": "blog/git-delete-all-tag",
    "filePath": "blog/git-delete-all-tag.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Git 一次刪除所有的 tag",
      "datePublished": "2020-08-27T12:33:43.833Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Git 一次刪除所有的 tag",
      "image": "https://image.cashwu.com/git.webp",
      "url": "https://blog.cashwu.com/blog/git-delete-all-tag"
    }
  },
  {
    "title": "tunnelto.dev 開源版的 ngrox 介紹",
    "date": "2020-06-28T04:42:59.939Z",
    "tags": ["tool"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "之前的文章 內網穿透神器 Serveo 介紹 有介紹 Serveo 這個內網穿透的神器，現在要來介紹另外一個 open source 的穿透神器 tunnelto.dev",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.06, "time": 123600, "words": 412 },
    "slug": "tool-tunnelto-expose-local-to-internet-replace-ngrox",
    "path": "blog/tool-tunnelto-expose-local-to-internet-replace-ngrox",
    "filePath": "blog/tool-tunnelto-expose-local-to-internet-replace-ngrox.mdx",
    "toc": [
      { "value": "基本使用", "url": "#基本使用-1", "depth": 2 },
      { "value": "後記", "url": "#後記-25", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "tunnelto.dev 開源版的 ngrox 介紹",
      "datePublished": "2020-06-28T04:42:59.939Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "之前的文章 內網穿透神器 Serveo 介紹 有介紹 Serveo 這個內網穿透的神器，現在要來介紹另外一個 open source 的穿透神器 tunnelto.dev",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/tool-tunnelto-expose-local-to-internet-replace-ngrox"
    }
  },
  {
    "title": "ASP.NET MVC - 使用 ASP.NET Core 的 IHttpClientFactory",
    "date": "2020-05-25T12:25:25.472Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC 裡面的 HttpClient 一直以來都有很多誤解和問題，所以在 .NET Core 裡面就出現了 `IHttpClientFactory` 用來解決一直以來的問題，不過在原本的 ASP.NET MVC 裡面要怎麼`容昜` 的使用 .NET Core 的 IHttpClientFactory，請繼續看下去",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.28, "time": 136800, "words": 456 },
    "slug": "asp-net-mvc-using-asp-net-core-ihttpclientfactory",
    "path": "blog/asp-net-mvc-using-asp-net-core-ihttpclientfactory",
    "filePath": "blog/asp-net-mvc-using-asp-net-core-ihttpclientfactory.mdx",
    "toc": [
      { "value": "安裝 Autofac 套件", "url": "#安裝-autofac-套件", "depth": 3 },
      { "value": "安裝 Http 套件", "url": "#安裝-http-套件", "depth": 3 },
      { "value": "測試", "url": "#測試-5", "depth": 3 },
      { "value": "後記", "url": "#後記-16", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用 ASP.NET Core 的 IHttpClientFactory",
      "datePublished": "2020-05-25T12:25:25.472Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC 裡面的 HttpClient 一直以來都有很多誤解和問題，所以在 .NET Core 裡面就出現了 `IHttpClientFactory` 用來解決一直以來的問題，不過在原本的 ASP.NET MVC 裡面要怎麼`容昜` 的使用 .NET Core 的 IHttpClientFactory，請繼續看下去",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-mvc-using-asp-net-core-ihttpclientfactory"
    }
  },
  {
    "title": "Rider 套件 - IDEA Mind Map 介紹",
    "date": "2020-05-13T14:36:15.613Z",
    "tags": ["rider", "jetbrains-plugin"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Rider (jetbrains) 有可以編輯 MindMap 的套件，而且可以把檔案放入版控裡面，團隊裡面就可以共同編輯了，而且也不用怕格式不同",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.05, "time": 123000, "words": 410 },
    "slug": "rider-plugin-idea-mind-map",
    "path": "blog/rider-plugin-idea-mind-map",
    "filePath": "blog/rider-plugin-idea-mind-map.mdx",
    "toc": [
      { "value": "新檔案", "url": "#新檔案", "depth": 2 },
      { "value": "子節點", "url": "#子節點", "depth": 2 },
      { "value": "編輯文字", "url": "#編輯文字", "depth": 2 },
      { "value": "物件", "url": "#物件", "depth": 2 },
      { "value": "note", "url": "#note", "depth": 3 },
      { "value": "file", "url": "#file", "depth": 3 },
      { "value": "URI", "url": "#uri", "depth": 3 },
      { "value": "jump", "url": "#jump", "depth": 3 },
      { "value": "Image", "url": "#image", "depth": 3 },
      { "value": "Emoticons", "url": "#emoticons", "depth": 3 },
      { "value": "Import", "url": "#import", "depth": 2 },
      { "value": "Export", "url": "#export", "depth": 2 },
      { "value": "Options", "url": "#options", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Rider 套件 - IDEA Mind Map 介紹",
      "datePublished": "2020-05-13T14:36:15.613Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Rider (jetbrains) 有可以編輯 MindMap 的套件，而且可以把檔案放入版控裡面，團隊裡面就可以共同編輯了，而且也不用怕格式不同",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider-plugin-idea-mind-map"
    }
  },
  {
    "title": "C# 使用 DebuggerDisplay 和 DebuggerTypeProxy 來呈現 Debugger 相關資訊",
    "date": "2020-05-02T10:28:09.184Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 使用 DebuggerDisplay 和 DebuggerTypeProxy 來呈現 Debugger 相關資訊",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.31, "time": 258600, "words": 862 },
    "slug": "csharp-debuggerdisplay-debuggertypeproxy-debugger-display-view",
    "path": "blog/csharp-debuggerdisplay-debuggertypeproxy-debugger-display-view",
    "filePath": "blog/csharp-debuggerdisplay-debuggertypeproxy-debugger-display-view.mdx",
    "toc": [
      { "value": "使用 DebuggerDisplay", "url": "#使用-debuggerdisplay", "depth": 2 },
      { "value": "單一物件", "url": "#單一物件", "depth": 3 },
      { "value": "複合物件", "url": "#複合物件", "depth": 3 },
      { "value": "集合物件", "url": "#集合物件", "depth": 3 },
      { "value": "使用 DebuggerTypeProxy", "url": "#使用-debuggertypeproxy", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# 使用 DebuggerDisplay 和 DebuggerTypeProxy 來呈現 Debugger 相關資訊",
      "datePublished": "2020-05-02T10:28:09.184Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 使用 DebuggerDisplay 和 DebuggerTypeProxy 來呈現 Debugger 相關資訊",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-debuggerdisplay-debuggertypeproxy-debugger-display-view"
    }
  },
  {
    "title": "C# 使用 Microsoft.VisualStudio.Threading.Analyzers 來檢查非同步程式",
    "date": "2020-04-26T06:33:43.000Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 c# 裡面寫非同步程式有的時候會不小心少了 await 或是命名沒有使用 Async 結尾，我們可以使用套件來幫我們找到這些問題",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.635, "time": 38100, "words": 127 },
    "slug": "csharp-using-microsoft-visualstudio-threading-analyzers-valid-async",
    "path": "blog/csharp-using-microsoft-visualstudio-threading-analyzers-valid-async",
    "filePath": "blog/csharp-using-microsoft-visualstudio-threading-analyzers-valid-async.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# 使用 Microsoft.VisualStudio.Threading.Analyzers 來檢查非同步程式",
      "datePublished": "2020-04-26T06:33:43.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 c# 裡面寫非同步程式有的時候會不小心少了 await 或是命名沒有使用 Async 結尾，我們可以使用套件來幫我們找到這些問題",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-using-microsoft-visualstudio-threading-analyzers-valid-async"
    }
  },
  {
    "title": "MAC 修改 Jenkins 預設的 Port",
    "date": "2020-04-26T02:32:45.075Z",
    "tags": ["jenkins", "mac"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "MAC 修改 Jenkins 預設的 Port",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.865, "time": 51900, "words": 173 },
    "slug": "mac-jenkins-change-default-port",
    "path": "blog/mac-jenkins-change-default-port",
    "filePath": "blog/mac-jenkins-change-default-port.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MAC 修改 Jenkins 預設的 Port",
      "datePublished": "2020-04-26T02:32:45.075Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "MAC 修改 Jenkins 預設的 Port",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mac-jenkins-change-default-port"
    }
  },
  {
    "title": "修改 Mac 應用程式的快捷鍵",
    "date": "2020-04-26T02:32:45.075Z",
    "tags": ["mac"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "修改 Mac 應用程式的快捷鍵",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.92, "time": 55200, "words": 184 },
    "slug": "mac-modify-application-shortcut",
    "path": "blog/mac-modify-application-shortcut",
    "filePath": "blog/mac-modify-application-shortcut.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "修改 Mac 應用程式的快捷鍵",
      "datePublished": "2020-04-26T02:32:45.075Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "修改 Mac 應用程式的快捷鍵",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mac-modify-application-shortcut"
    }
  },
  {
    "title": "不寫一行程式完成簡單的發送訊息 Skype Bot (二)",
    "date": "2020-04-25T09:44:55.774Z",
    "tags": ["bot", "integromat", "skype bot"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "不寫一行程式完成簡單的發送訊息 Skype Bot",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.945, "time": 176700, "words": 589 },
    "slug": "not-code-skype-bot-02",
    "path": "blog/not-code-skype-bot-02",
    "filePath": "blog/not-code-skype-bot-02.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "不寫一行程式完成簡單的發送訊息 Skype Bot (二)",
      "datePublished": "2020-04-25T09:44:55.774Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "不寫一行程式完成簡單的發送訊息 Skype Bot",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/not-code-skype-bot-02"
    }
  },
  {
    "title": "容昜的找到 Skype 的 群組 (Group) Id",
    "date": "2020-04-25T07:32:02.554Z",
    "tags": ["skype bot"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "容昜的找到 Skype 的 群組 (Group) Id",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.705, "time": 42300, "words": 141 },
    "slug": "easy-find-skype-group-chat-id",
    "path": "blog/easy-find-skype-group-chat-id",
    "filePath": "blog/easy-find-skype-group-chat-id.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "容昜的找到 Skype 的 群組 (Group) Id",
      "datePublished": "2020-04-25T07:32:02.554Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "容昜的找到 Skype 的 群組 (Group) Id",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/easy-find-skype-group-chat-id"
    }
  },
  {
    "title": "不寫一行程式完成簡單的發送訊息 Skype Bot (一)",
    "date": "2020-04-25T06:42:14.107Z",
    "tags": ["azure", "bot", "skype bot"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "不寫一行程式完成簡單的發送訊息 Skype Bot",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.49, "time": 149400, "words": 498 },
    "slug": "not-code-skype-bot-01",
    "path": "blog/not-code-skype-bot-01",
    "filePath": "blog/not-code-skype-bot-01.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "不寫一行程式完成簡單的發送訊息 Skype Bot (一)",
      "datePublished": "2020-04-25T06:42:14.107Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "不寫一行程式完成簡單的發送訊息 Skype Bot",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/not-code-skype-bot-01"
    }
  },
  {
    "title": "Rider 修改 Vim 相對行號的顏色",
    "date": "2019-06-16T05:25:40.704Z",
    "tags": ["rider", "ideavim", "jetbrains-plugin"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Rider 修改 Vim 相對行號的顏色",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.39, "time": 23400, "words": 78 },
    "slug": "rider-vim-relative-line-number-color",
    "path": "blog/rider-vim-relative-line-number-color",
    "filePath": "blog/rider-vim-relative-line-number-color.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Rider 修改 Vim 相對行號的顏色",
      "datePublished": "2019-06-16T05:25:40.704Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Rider 修改 Vim 相對行號的顏色",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider-vim-relative-line-number-color"
    }
  },
  {
    "title": "ASP.NET Core 實作 MediatR 的 Pipeline 功能",
    "date": "2019-04-29T01:33:45.950Z",
    "tags": ["asp.net core", "mediatr"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 實作 MediatR 的 Pipeline 功能",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.67, "time": 220200, "words": 734 },
    "slug": "asp-net-core-mediatr-pipeline",
    "path": "blog/asp-net-core-mediatr-pipeline",
    "filePath": "blog/asp-net-core-mediatr-pipeline.mdx",
    "toc": [
      {
        "value": "新增 LogPreProcessor 實作 IRequestPreProcessor",
        "url": "#新增-logpreprocessor-實作-irequestpreprocessor",
        "depth": 2
      },
      {
        "value": "新增 LogPostProcessor 實作 IRequestPostProcessor",
        "url": "#新增-logpostprocessor-實作-irequestpostprocessor",
        "depth": 2
      },
      {
        "value": "新增 LogBehavior 實作 IPipelineBehavior",
        "url": "#新增-logbehavior-實作-ipipelinebehavior",
        "depth": 2
      },
      {
        "value": "組合不同的 IPipelineBehavior",
        "url": "#組合不同的-ipipelinebehavior",
        "depth": 2
      },
      { "value": "後記", "url": "#後記-12", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 實作 MediatR 的 Pipeline 功能",
      "datePublished": "2019-04-29T01:33:45.950Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 實作 MediatR 的 Pipeline 功能",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mediatr-pipeline"
    }
  },
  {
    "title": "EF Core Postgres Concurrency Checks",
    "date": "2019-04-28T07:00:04.248Z",
    "tags": ["ef core", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EF Core Postgres Concurrency Checks",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.57, "time": 34200, "words": 114 },
    "slug": "asp-net-core-postgres-concurrency-checks",
    "path": "blog/asp-net-core-postgres-concurrency-checks",
    "filePath": "blog/asp-net-core-postgres-concurrency-checks.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EF Core Postgres Concurrency Checks",
      "datePublished": "2019-04-28T07:00:04.248Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EF Core Postgres Concurrency Checks",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-postgres-concurrency-checks"
    }
  },
  {
    "title": "Jenkins 發送 Slack 通知建置相關訊息",
    "date": "2019-04-28T02:31:31.224Z",
    "tags": ["jenkins", "slack"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jenkins 發送 Slack 通知建置相關訊息",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.88, "time": 232800, "words": 776 },
    "slug": "jenkins-slack-notification",
    "path": "blog/jenkins-slack-notification",
    "filePath": "blog/jenkins-slack-notification.mdx",
    "toc": [
      { "value": "在 Slack 加入 Jenkins APP", "url": "#在-slack-加入-jenkins-app", "depth": 2 },
      { "value": "Jenkins 安裝 Slack 外掛", "url": "#jenkins-安裝-slack-外掛", "depth": 2 },
      { "value": "設定 Slack 外掛", "url": "#設定-slack-外掛", "depth": 2 },
      { "value": "專案設定", "url": "#專案設定", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jenkins 發送 Slack 通知建置相關訊息",
      "datePublished": "2019-04-28T02:31:31.224Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jenkins 發送 Slack 通知建置相關訊息",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jenkins-slack-notification"
    }
  },
  {
    "title": "內網穿透神器 Serveo 介紹",
    "date": "2019-04-27T07:19:49.260Z",
    "tags": ["tool"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "內網穿透神器 Serveo 介紹",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.255, "time": 135300, "words": 451 },
    "slug": "tool-serveo-expose-local-to-internet",
    "path": "blog/tool-serveo-expose-local-to-internet",
    "filePath": "blog/tool-serveo-expose-local-to-internet.mdx",
    "toc": [
      { "value": "基本使用", "url": "#基本使用", "depth": 2 },
      { "value": "自定 Subdomain", "url": "#自定-subdomain", "depth": 2 },
      { "value": "Forward 網址", "url": "#forward-網址", "depth": 2 },
      { "value": "GUI session", "url": "#gui-session", "depth": 2 },
      { "value": "後記", "url": "#後記-24", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "內網穿透神器 Serveo 介紹",
      "datePublished": "2019-04-27T07:19:49.260Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "內網穿透神器 Serveo 介紹",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/tool-serveo-expose-local-to-internet"
    }
  },
  {
    "title": "ASP.NET Core 使用 JWT 驗證",
    "date": "2019-04-27T03:09:50.610Z",
    "tags": ["asp.net core", "jwt"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 使用 JWT 驗證",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.36, "time": 201600, "words": 672 },
    "slug": "asp-net-core-jwt-authentication",
    "path": "blog/asp-net-core-jwt-authentication",
    "filePath": "blog/asp-net-core-jwt-authentication.mdx",
    "toc": [
      { "value": "安裝套件", "url": "#安裝套件-3", "depth": 2 },
      { "value": "JWT 設定", "url": "#jwt-設定", "depth": 2 },
      { "value": "Token Action", "url": "#token-action", "depth": 2 },
      { "value": "測試 Token", "url": "#測試-token", "depth": 2 },
      { "value": "Authorize Action", "url": "#authorize-action", "depth": 2 },
      { "value": "測試 Authorize Action", "url": "#測試-authorize-action", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 JWT 驗證",
      "datePublished": "2019-04-27T03:09:50.610Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 使用 JWT 驗證",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-jwt-authentication"
    }
  },
  {
    "title": "ASP.NET Core 最小化和壓縮 HTML 輸出",
    "date": "2019-04-26T03:52:52.695Z",
    "tags": ["asp.net core", "html"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 最小化和壓縮 HTML 輸出",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.155, "time": 129300, "words": 431 },
    "slug": "asp-net-core-minification-compression-html",
    "path": "blog/asp-net-core-minification-compression-html",
    "filePath": "blog/asp-net-core-minification-compression-html.mdx",
    "toc": [
      { "value": "安裝套件", "url": "#安裝套件-4", "depth": 2 },
      { "value": "最小化 HTML", "url": "#最小化-html", "depth": 2 },
      { "value": "測試最小化 HTML", "url": "#測試最小化-html", "depth": 2 },
      { "value": "壓縮 HTML", "url": "#壓縮-html", "depth": 2 },
      { "value": "測試壓縮 HTML", "url": "#測試壓縮-html", "depth": 2 },
      { "value": "後記", "url": "#後記-13", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 最小化和壓縮 HTML 輸出",
      "datePublished": "2019-04-26T03:52:52.695Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 最小化和壓縮 HTML 輸出",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-minification-compression-html"
    }
  },
  {
    "title": "C# DateTimeOffset Pares UTC 時間",
    "date": "2019-04-26T01:14:59.276Z",
    "tags": ["c#", "datetime"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# DateTimeOffset Pares UTC 時間",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.505, "time": 30300, "words": 101 },
    "slug": "csharp-datetimeoffset-parse-utc-time",
    "path": "blog/csharp-datetimeoffset-parse-utc-time",
    "filePath": "blog/csharp-datetimeoffset-parse-utc-time.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# DateTimeOffset Pares UTC 時間",
      "datePublished": "2019-04-26T01:14:59.276Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# DateTimeOffset Pares UTC 時間",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-datetimeoffset-parse-utc-time"
    }
  },
  {
    "title": "ASP.NET Core 自定義 Middleware 實作全站 Exception 處理",
    "date": "2019-04-25T05:50:24.093Z",
    "tags": ["actionfilter", "aop", "asp.net core", "exception"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 自定義 Middleware 實作全站 Exception 處理",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.235, "time": 134100, "words": 447 },
    "slug": "asp-net-core-custom-middleware-exception-handling",
    "path": "blog/asp-net-core-custom-middleware-exception-handling",
    "filePath": "blog/asp-net-core-custom-middleware-exception-handling.mdx",
    "toc": [
      { "value": "建立 Middleware 類別", "url": "#建立-middleware-類別", "depth": 2 },
      { "value": "Catch Exception", "url": "#catch-exception", "depth": 2 },
      { "value": "測試", "url": "#測試", "depth": 2 },
      { "value": "實作 Catch Exception 內容", "url": "#實作-catch-exception-內容", "depth": 2 },
      { "value": "測試", "url": "#測試-1", "depth": 2 },
      { "value": "後記", "url": "#後記-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 自定義 Middleware 實作全站 Exception 處理",
      "datePublished": "2019-04-25T05:50:24.093Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 自定義 Middleware 實作全站 Exception 處理",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-custom-middleware-exception-handling"
    }
  },
  {
    "title": "Jenkins 執行 ASP.NET Core 測試",
    "date": "2019-04-25T02:38:45.580Z",
    "tags": ["asp.net core", "jenkins"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jenkins 如何執行 ASP.NET Core 測試然後顯示測試結果",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.43, "time": 145800, "words": 486 },
    "slug": "jenkins-run-asp-net-core-test",
    "path": "blog/jenkins-run-asp-net-core-test",
    "filePath": "blog/jenkins-run-asp-net-core-test.mdx",
    "toc": [
      { "value": "測試程式", "url": "#測試程式", "depth": 2 },
      { "value": "加入執行測試", "url": "#加入執行測試", "depth": 2 },
      { "value": "測試執行測試", "url": "#測試執行測試", "depth": 2 },
      { "value": "產生測試報告", "url": "#產生測試報告", "depth": 2 },
      { "value": "Jenkins 顯示測試結果", "url": "#jenkins-顯示測試結果", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jenkins 執行 ASP.NET Core 測試",
      "datePublished": "2019-04-25T02:38:45.580Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jenkins 如何執行 ASP.NET Core 測試然後顯示測試結果",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jenkins-run-asp-net-core-test"
    }
  },
  {
    "title": "ASP.NET Core 使用內建的 ExceptionHandler Middleware 實作全站 Exception 處理",
    "date": "2019-04-24T01:47:25.236Z",
    "tags": ["aop", "asp.net core", "exception", "middleware"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 使用內建的 ExceptionHandler Middleware 實作全站 Exception 處理",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.135, "time": 128100, "words": 427 },
    "slug": "asp-net-core-exceptionhandler-middleware-handler-exception",
    "path": "blog/asp-net-core-exceptionhandler-middleware-handler-exception",
    "filePath": "blog/asp-net-core-exceptionhandler-middleware-handler-exception.mdx",
    "toc": [
      { "value": "實作 UseExceptionHandler", "url": "#實作-useexceptionhandler", "depth": 2 },
      { "value": "測試", "url": "#測試-3", "depth": 2 },
      { "value": "寫成 Extension", "url": "#寫成-extension", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用內建的 ExceptionHandler Middleware 實作全站 Exception 處理",
      "datePublished": "2019-04-24T01:47:25.236Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 使用內建的 ExceptionHandler Middleware 實作全站 Exception 處理",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-exceptionhandler-middleware-handler-exception"
    }
  },
  {
    "title": "ASP.NET Core 使用 MediatR 實作消息通知",
    "date": "2019-04-23T02:40:00.688Z",
    "tags": ["asp.net core", "mediatr"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在微服務架構當道的現在，消息通知是很基本的功能，來看如何在 ASP.NET Core 使用 MediatR 實作消息通知",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.37, "time": 142200, "words": 474 },
    "slug": "asp-net-core-mediatr-publishing-notification-message",
    "path": "blog/asp-net-core-mediatr-publishing-notification-message",
    "filePath": "blog/asp-net-core-mediatr-publishing-notification-message.mdx",
    "toc": [
      {
        "value": "新增 Person 的通知 BusinessLogic",
        "url": "#新增-person-的通知-businesslogic",
        "depth": 2
      },
      {
        "value": "修改新增 Person 的 CommandHandler BusinessLogic",
        "url": "#修改新增-person-的-commandhandler-businesslogic",
        "depth": 2
      },
      { "value": "多個 Notification 的問題", "url": "#多個-notification-的問題", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 MediatR 實作消息通知",
      "datePublished": "2019-04-23T02:40:00.688Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在微服務架構當道的現在，消息通知是很基本的功能，來看如何在 ASP.NET Core 使用 MediatR 實作消息通知",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mediatr-publishing-notification-message"
    }
  },
  {
    "title": "工具網站 crontab.guru 介紹",
    "date": "2019-04-23T01:15:19.089Z",
    "tags": ["tool"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Linux 的 Crontab 是很方便的排程管理，不過設定的方法實在是讓人頭痛，設定好了也不確定是不是自己想要的，還好有了這個網站可以讓我們很方便和快速的寫出 Crontab 的時間",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.19, "time": 71400, "words": 238 },
    "slug": "tool-website-crontab-guru",
    "path": "blog/tool-website-crontab-guru",
    "filePath": "blog/tool-website-crontab-guru.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "工具網站 crontab.guru 介紹",
      "datePublished": "2019-04-23T01:15:19.089Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Linux 的 Crontab 是很方便的排程管理，不過設定的方法實在是讓人頭痛，設定好了也不確定是不是自己想要的，還好有了這個網站可以讓我們很方便和快速的寫出 Crontab 的時間",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/tool-website-crontab-guru"
    }
  },
  {
    "title": "Jenkins 建置 ASP.NET Core 專案",
    "date": "2019-04-22T05:36:01.265Z",
    "tags": ["asp.net core", "jenkins"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jenkins 建置 ASP.NET Core 專案",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.18, "time": 250800, "words": 836 },
    "slug": "jenkins-build-asp-net-core",
    "path": "blog/jenkins-build-asp-net-core",
    "filePath": "blog/jenkins-build-asp-net-core.mdx",
    "toc": [
      { "value": "安裝 .NET Core SDK", "url": "#安裝-net-core-sdk", "depth": 2 },
      { "value": "工作區", "url": "#工作區", "depth": 2 },
      { "value": "建置方案", "url": "#建置方案", "depth": 2 },
      {
        "value": "修正 dotnet command not found",
        "url": "#修正-dotnet-command-not-found",
        "depth": 2
      },
      { "value": "畫面輸出時加入時間戳記", "url": "#畫面輸出時加入時間戳記", "depth": 2 },
      { "value": "持續建置", "url": "#持續建置", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jenkins 建置 ASP.NET Core 專案",
      "datePublished": "2019-04-22T05:36:01.265Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jenkins 建置 ASP.NET Core 專案",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jenkins-build-asp-net-core"
    }
  },
  {
    "title": "C# char 轉型成 int",
    "date": "2019-04-22T01:45:01.608Z",
    "tags": ["c#", "convert"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# char 轉型成 int",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.045, "time": 122700, "words": 409 },
    "slug": "csharp-convert-char-to-int",
    "path": "blog/csharp-convert-char-to-int",
    "filePath": "blog/csharp-convert-char-to-int.mdx",
    "toc": [
      { "value": "強制轉型", "url": "#強制轉型", "depth": 3 },
      { "value": "Convert.ToInt32", "url": "#converttoint32", "depth": 3 },
      { "value": "int.Parse", "url": "#intparse", "depth": 3 },
      { "value": "Char.GetNumericValue", "url": "#chargetnumericvalue", "depth": 3 },
      { "value": "直接減 0", "url": "#直接減-0", "depth": 3 },
      { "value": "後記", "url": "#後記-21", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# char 轉型成 int",
      "datePublished": "2019-04-22T01:45:01.608Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# char 轉型成 int",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-convert-char-to-int"
    }
  },
  {
    "title": "ASP.NET Core 使用 MediatR 簡單的實現 Clean Architecture、CQRS 和分層架構",
    "date": "2019-04-21T02:14:23.425Z",
    "tags": ["asp.net core", "clean architecture", "cqrs", "mediatr"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 使用 MediatR 簡單的實現 Clean Architecture、CQRS 和分層架構",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.79, "time": 347400, "words": 1158 },
    "slug": "asp-net-core-mediatr-clean-architecture-cqrs",
    "path": "blog/asp-net-core-mediatr-clean-architecture-cqrs",
    "filePath": "blog/asp-net-core-mediatr-clean-architecture-cqrs.mdx",
    "toc": [
      { "value": "建置 DataAssert", "url": "#建置-dataassert", "depth": 2 },
      {
        "value": "建置新增 Person 的 BusinessLogic",
        "url": "#建置新增-person-的-businesslogic",
        "depth": 2
      },
      { "value": "建置 MVC", "url": "#建置-mvc", "depth": 2 },
      {
        "value": "建置查詢 Person 的 BusinessLogic",
        "url": "#建置查詢-person-的-businesslogic",
        "depth": 2
      },
      { "value": "建置查詢 Person 的 Action", "url": "#建置查詢-person-的-action", "depth": 2 },
      { "value": "後記", "url": "#後記-10", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 MediatR 簡單的實現 Clean Architecture、CQRS 和分層架構",
      "datePublished": "2019-04-21T02:14:23.425Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 使用 MediatR 簡單的實現 Clean Architecture、CQRS 和分層架構",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mediatr-clean-architecture-cqrs"
    }
  },
  {
    "title": "Jenkins 取得 Github 上的專案",
    "date": "2019-04-20T14:12:08.999Z",
    "tags": ["github", "jenkins"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jenkins 取得 Github 上的專案",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.735, "time": 164100, "words": 547 },
    "slug": "jenkins-get-github-asp-net-core-project",
    "path": "blog/jenkins-get-github-asp-net-core-project",
    "filePath": "blog/jenkins-get-github-asp-net-core-project.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jenkins 取得 Github 上的專案",
      "datePublished": "2019-04-20T14:12:08.999Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jenkins 取得 Github 上的專案",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jenkins-get-github-asp-net-core-project"
    }
  },
  {
    "title": "MAC 移除 Jenkins 建立的使用者",
    "date": "2019-04-19T02:30:21.295Z",
    "tags": ["jenkins", "mac"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 MAC 安裝 Jenkins 時，會建立一個使用者來運行 Jenkins，如果只是在自己的本機運行，沒有安全性的疑慮，是可以把這個使用者移除的。",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.43, "time": 85800, "words": 286 },
    "slug": "mac-remove-jenkins-user",
    "path": "blog/mac-remove-jenkins-user",
    "filePath": "blog/mac-remove-jenkins-user.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MAC 移除 Jenkins 建立的使用者",
      "datePublished": "2019-04-19T02:30:21.295Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 MAC 安裝 Jenkins 時，會建立一個使用者來運行 Jenkins，如果只是在自己的本機運行，沒有安全性的疑慮，是可以把這個使用者移除的。",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mac-remove-jenkins-user"
    }
  },
  {
    "title": "MAC 安裝 Jenkins",
    "date": "2019-04-19T01:46:43.623Z",
    "tags": ["jenkins", "mac"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如何在 MAC 安裝 Jenkins",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.94, "time": 116400, "words": 388 },
    "slug": "mac-install-jenkins",
    "path": "blog/mac-install-jenkins",
    "filePath": "blog/mac-install-jenkins.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MAC 安裝 Jenkins",
      "datePublished": "2019-04-19T01:46:43.623Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如何在 MAC 安裝 Jenkins",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mac-install-jenkins"
    }
  },
  {
    "title": "ASP.NET Core Health Checks 失敗時使用 Slack 通知",
    "date": "2019-04-18T06:27:25.543Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core Health Checks 失敗時使用 Slack 通知",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.705, "time": 102300, "words": 341 },
    "slug": "asp-net-core-health-checks-fail-send-slack",
    "path": "blog/asp-net-core-health-checks-fail-send-slack",
    "filePath": "blog/asp-net-core-health-checks-fail-send-slack.mdx",
    "toc": [
      {
        "value": "建立 Slack 的 Incoming Webhooks",
        "url": "#建立-slack-的-incoming-webhooks",
        "depth": 2
      },
      { "value": "增加 Slack 設定", "url": "#增加-slack-設定", "depth": 2 },
      { "value": "Statup 設定", "url": "#statup-設定", "depth": 2 },
      { "value": "UI 的 Webhooks", "url": "#ui-的-webhooks", "depth": 2 },
      { "value": "測試", "url": "#測試-4", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core Health Checks 失敗時使用 Slack 通知",
      "datePublished": "2019-04-18T06:27:25.543Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core Health Checks 失敗時使用 Slack 通知",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-health-checks-fail-send-slack"
    }
  },
  {
    "title": "ASP.NET Core 使用 ActionFilter 實作快取",
    "date": "2019-04-17T02:30:37.330Z",
    "tags": ["actionfilter", "aop", "asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 使用 ActionFilter 來實作快取",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.39, "time": 143400, "words": 478 },
    "slug": "asp-net-core-action-filter-cache",
    "path": "blog/asp-net-core-action-filter-cache",
    "filePath": "blog/asp-net-core-action-filter-cache.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 ActionFilter 實作快取",
      "datePublished": "2019-04-17T02:30:37.330Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 使用 ActionFilter 來實作快取",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-action-filter-cache"
    }
  },
  {
    "title": "ASP.NET Core 使用 ActionFilter 驗證 ModelState",
    "date": "2019-04-17T01:00:18.862Z",
    "tags": ["actionfilter", "aop", "asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 使用 ActionFilter 來驗證 ModelState",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.28, "time": 136800, "words": 456 },
    "slug": "asp-net-core-action-filter-model-state",
    "path": "blog/asp-net-core-action-filter-model-state",
    "filePath": "blog/asp-net-core-action-filter-model-state.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 ActionFilter 驗證 ModelState",
      "datePublished": "2019-04-17T01:00:18.862Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 使用 ActionFilter 來驗證 ModelState",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-action-filter-model-state"
    }
  },
  {
    "title": "MAC 安裝 OpenJDK",
    "date": "2019-04-16T09:03:46.935Z",
    "tags": ["mac"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "MAC 安裝 OpenJDK",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.425, "time": 25500, "words": 85 },
    "slug": "mac-ox-install-open-jdk",
    "path": "blog/mac-ox-install-open-jdk",
    "filePath": "blog/mac-ox-install-open-jdk.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MAC 安裝 OpenJDK",
      "datePublished": "2019-04-16T09:03:46.935Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "MAC 安裝 OpenJDK",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mac-ox-install-open-jdk"
    }
  },
  {
    "title": "ASP.NET Core 如何使用內建的 DI 注入多個實作",
    "date": "2019-04-16T01:55:05.146Z",
    "tags": ["asp.net core", "di"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 如何使用內建的 DI 注入多個實作，也可以變向作到動態注入的效果",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.8, "time": 108000, "words": 360 },
    "slug": "asp-net-core-di-multiple-implementations",
    "path": "blog/asp-net-core-di-multiple-implementations",
    "filePath": "blog/asp-net-core-di-multiple-implementations.mdx",
    "toc": [
      { "value": "模擬多個實作", "url": "#模擬多個實作", "depth": 2 },
      { "value": "註冊", "url": "#註冊", "depth": 2 },
      { "value": "使用單一 ILog", "url": "#使用單一-ilog", "depth": 2 },
      { "value": "使用多個 ILog", "url": "#使用多個-ilog", "depth": 2 },
      { "value": "動態使用 ILog", "url": "#動態使用-ilog", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 如何使用內建的 DI 注入多個實作",
      "datePublished": "2019-04-16T01:55:05.146Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 如何使用內建的 DI 注入多個實作，也可以變向作到動態注入的效果",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-di-multiple-implementations"
    }
  },
  {
    "title": "C# 使用 TimeZoneInfo 轉換時區遇到 Daylight Saving 的問題",
    "date": "2019-04-15T11:09:10.794Z",
    "tags": ["c#", "convert", "datetime"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 使用 TimeZoneInfo 轉換時區遇到 Daylight Saving 的問題",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.84, "time": 110400, "words": 368 },
    "slug": "csharp-timezoneinfo-converttime-daylight-saving",
    "path": "blog/csharp-timezoneinfo-converttime-daylight-saving",
    "filePath": "blog/csharp-timezoneinfo-converttime-daylight-saving.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-4", "depth": 2 },
      { "value": "原因", "url": "#原因-4", "depth": 2 },
      { "value": "解法", "url": "#解法-4", "depth": 2 },
      { "value": "後記", "url": "#後記-22", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# 使用 TimeZoneInfo 轉換時區遇到 Daylight Saving 的問題",
      "datePublished": "2019-04-15T11:09:10.794Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 使用 TimeZoneInfo 轉換時區遇到 Daylight Saving 的問題",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-timezoneinfo-converttime-daylight-saving"
    }
  },
  {
    "title": "ASP.NET Core 使用 MiniProfiler 監控網站效能",
    "date": "2019-01-10T02:09:11.187Z",
    "tags": ["asp.net core", "miniprofiler"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "網站寫好之後總是覺得很慢，但是又不知道慢在那裡，你就需要有檢測的工具來幫你監控網站的效能，我們使用 MiniProfiler 這個套件可以簡單的來幫我們作到這件事情",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.08, "time": 304800, "words": 1016 },
    "slug": "asp-net-core-miniprofiler",
    "path": "blog/asp-net-core-miniprofiler",
    "filePath": "blog/asp-net-core-miniprofiler.mdx",
    "toc": [
      { "value": "安裝", "url": "#安裝", "depth": 2 },
      { "value": "設定", "url": "#設定-3", "depth": 2 },
      { "value": "檢測 MVC", "url": "#檢測-mvc", "depth": 2 },
      { "value": "檢測 EF Core", "url": "#檢測-ef-core", "depth": 2 },
      { "value": "檢測 Razor", "url": "#檢測-razor", "depth": 2 },
      { "value": "使用 MiniProfile 的 Step", "url": "#使用-miniprofile-的-step", "depth": 2 },
      {
        "value": "把 Miniprofile 的資訊呈現在原畫面上",
        "url": "#把-miniprofile-的資訊呈現在原畫面上",
        "depth": 2
      },
      { "value": "檢測 API", "url": "#檢測-api", "depth": 2 },
      { "value": "後記", "url": "#後記-11", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 MiniProfiler 監控網站效能",
      "datePublished": "2019-01-10T02:09:11.187Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "網站寫好之後總是覺得很慢，但是又不知道慢在那裡，你就需要有檢測的工具來幫你監控網站的效能，我們使用 MiniProfiler 這個套件可以簡單的來幫我們作到這件事情",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-miniprofiler"
    }
  },
  {
    "title": "ASP.NET Core 實作雙重驗證 (2FA)",
    "date": "2019-01-08T06:35:14.445Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "你的網站有雙重驗證 (Two-factor authentication，通稱 2FA) 嗎？來看一下怎麼使用  ASP.NET Core 實作 2FA 幫網站增加安全性吧 !!",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.365, "time": 141900, "words": 473 },
    "slug": "asp-net-core-two-factor-authenticator",
    "path": "blog/asp-net-core-two-factor-authenticator",
    "filePath": "blog/asp-net-core-two-factor-authenticator.mdx",
    "toc": [
      { "value": "安裝套件", "url": "#安裝套件-5", "depth": 2 },
      { "value": "產生 QRCode", "url": "#產生-qrcode", "depth": 2 },
      {
        "value": "使用 Google Authenticator APP 測試",
        "url": "#使用-google-authenticator-app-測試",
        "depth": 2
      },
      { "value": "驗證", "url": "#驗證", "depth": 2 },
      { "value": "後記", "url": "#後記-15", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 實作雙重驗證 (2FA)",
      "datePublished": "2019-01-08T06:35:14.445Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "你的網站有雙重驗證 (Two-factor authentication，通稱 2FA) 嗎？來看一下怎麼使用  ASP.NET Core 實作 2FA 幫網站增加安全性吧 !!",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-two-factor-authenticator"
    }
  },
  {
    "title": "EF Core 使用 PostgreSQL Array 型別",
    "date": "2019-01-08T04:18:31.552Z",
    "tags": ["ef core", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "一般在儲存多筆資料到 DB 的時候都會開另一個 Table 來存放，要使用的話就要使用 Join 的方式來拿取，在 PostgreSQL 裡面有一個 Array 的資料型別可以讓我們方便的來儲存這類型的資料，來看如何在 EF Core 裡面使用 PostgreSQL Array 型別",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.685, "time": 161100, "words": 537 },
    "slug": "ef-core-postgresql-array-type",
    "path": "blog/ef-core-postgresql-array-type",
    "filePath": "blog/ef-core-postgresql-array-type.mdx",
    "toc": [
      { "value": "DbContext", "url": "#dbcontext", "depth": 2 },
      { "value": "新增", "url": "#新增", "depth": 2 },
      { "value": "修改", "url": "#修改", "depth": 2 },
      { "value": "查詢", "url": "#查詢", "depth": 2 },
      { "value": "後記", "url": "#後記-18", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EF Core 使用 PostgreSQL Array 型別",
      "datePublished": "2019-01-08T04:18:31.552Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "一般在儲存多筆資料到 DB 的時候都會開另一個 Table 來存放，要使用的話就要使用 Join 的方式來拿取，在 PostgreSQL 裡面有一個 Array 的資料型別可以讓我們方便的來儲存這類型的資料，來看如何在 EF Core 裡面使用 PostgreSQL Array 型別",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ef-core-postgresql-array-type"
    }
  },
  {
    "title": "EF Core 使用 Like 查詢",
    "date": "2019-01-07T13:05:14.553Z",
    "tags": ["ef core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如何在 EF Core 裡面使用 Like 作查詢",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.8, "time": 48000, "words": 160 },
    "slug": "ef-core-use-like",
    "path": "blog/ef-core-use-like",
    "filePath": "blog/ef-core-use-like.mdx",
    "toc": [
      { "value": "可用版本", "url": "#可用版本", "depth": 2 },
      { "value": "語法", "url": "#語法", "depth": 2 },
      { "value": "後記", "url": "#後記-19", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EF Core 使用 Like 查詢",
      "datePublished": "2019-01-07T13:05:14.553Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如何在 EF Core 裡面使用 Like 作查詢",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ef-core-use-like"
    }
  },
  {
    "title": "Android 模擬器連接到本機電腦時發生 Failed to connect to 127.0.0.1",
    "date": "2019-01-07T07:35:02.856Z",
    "tags": ["android"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Android 模擬器連接到本機電腦時發生 `Failed to connect to 127.0.0.1` 錯誤",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.395, "time": 23700, "words": 79 },
    "slug": "android-emulator-connect-local-pc-failed-to-connect-to-127-0-0-1",
    "path": "blog/android-emulator-connect-local-pc-failed-to-connect-to-127-0-0-1",
    "filePath": "blog/android-emulator-connect-local-pc-failed-to-connect-to-127-0-0-1.mdx",
    "toc": [
      { "value": "問題", "url": "#問題", "depth": 2 },
      { "value": "原因", "url": "#原因", "depth": 2 },
      { "value": "解法", "url": "#解法", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Android 模擬器連接到本機電腦時發生 Failed to connect to 127.0.0.1",
      "datePublished": "2019-01-07T07:35:02.856Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Android 模擬器連接到本機電腦時發生 `Failed to connect to 127.0.0.1` 錯誤",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/android-emulator-connect-local-pc-failed-to-connect-to-127-0-0-1"
    }
  },
  {
    "title": "WebSocket 連接 Nginx 的網站發生 Expected HTTP 101 response but was '403 Forbidden'",
    "date": "2019-01-07T04:00:02.984Z",
    "tags": ["nginx", "websocket"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "使用 WebSocket  去連接 Nginx 使用 Proxy 轉送的網站時發生 Expected HTTP 101 response but was '403 Forbidden'",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.345, "time": 20700, "words": 69 },
    "slug": "websocket-connect-nginx-web-expected-http-101-response-but-was-403-forbidden",
    "path": "blog/websocket-connect-nginx-web-expected-http-101-response-but-was-403-forbidden",
    "filePath": "blog/websocket-connect-nginx-web-expected-http-101-response-but-was-403-forbidden.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-13", "depth": 2 },
      { "value": "解法", "url": "#解法-13", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "WebSocket 連接 Nginx 的網站發生 Expected HTTP 101 response but was '403 Forbidden'",
      "datePublished": "2019-01-07T04:00:02.984Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "使用 WebSocket  去連接 Nginx 使用 Proxy 轉送的網站時發生 Expected HTTP 101 response but was '403 Forbidden'",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/websocket-connect-nginx-web-expected-http-101-response-but-was-403-forbidden"
    }
  },
  {
    "title": "ASP.NET Core 自定專案範本",
    "date": "2019-01-03T02:00:51.135Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "每次在建立 ASP.NET Core 新專案時，如果分層分的比較細，需要加入很多專案，而且每個專案都要安裝很多套件，實在是很花時間。如果可以建立自己的專案範本，就跟內建的範本一樣，應該可以節省不少的時間，在公司裡面也可以變成一個專案的標準範本，我們就來看如何在 ASP.NET Core 建立自定專案範本吧 !!",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.67, "time": 280200, "words": 934 },
    "slug": "asp-net-core-custom-project-templates",
    "path": "blog/asp-net-core-custom-project-templates",
    "filePath": "blog/asp-net-core-custom-project-templates.mdx",
    "toc": [
      { "value": "新增專案", "url": "#新增專案", "depth": 2 },
      { "value": "建立 Template Config", "url": "#建立-template-config", "depth": 2 },
      { "value": "新增資料夾範本", "url": "#新增資料夾範本", "depth": 2 },
      { "value": "Nuget 設定", "url": "#nuget-設定", "depth": 2 },
      { "value": "新增 Nuget 範本", "url": "#新增-nuget-範本", "depth": 2 },
      { "value": "後記", "url": "#後記-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 自定專案範本",
      "datePublished": "2019-01-03T02:00:51.135Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "每次在建立 ASP.NET Core 新專案時，如果分層分的比較細，需要加入很多專案，而且每個專案都要安裝很多套件，實在是很花時間。如果可以建立自己的專案範本，就跟內建的範本一樣，應該可以節省不少的時間，在公司裡面也可以變成一個專案的標準範本，我們就來看如何在 ASP.NET Core 建立自定專案範本吧 !!",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-custom-project-templates"
    }
  },
  {
    "title": "ASP.NET Core 的 資料保護功能 (Data Protection)",
    "date": "2019-01-02T02:45:49.341Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 內建有資料保護功能，可以方便我們加解密資料",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.065, "time": 183900, "words": 613 },
    "slug": "asp-net-core-data-protection",
    "path": "blog/asp-net-core-data-protection",
    "filePath": "blog/asp-net-core-data-protection.mdx",
    "toc": [
      { "value": "設定", "url": "#設定-2", "depth": 2 },
      { "value": "資料保護 (加解密)", "url": "#資料保護-加解密", "depth": 2 },
      {
        "value": "有時間限制的資料保護 (加解密)",
        "url": "#有時間限制的資料保護-加解密",
        "depth": 2
      },
      { "value": "使用不同的 Protector 加解密", "url": "#使用不同的-protector-加解密", "depth": 2 },
      { "value": "多重 Protector", "url": "#多重-protector", "depth": 2 },
      { "value": "後記", "url": "#後記-3", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 的 資料保護功能 (Data Protection)",
      "datePublished": "2019-01-02T02:45:49.341Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 內建有資料保護功能，可以方便我們加解密資料",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-data-protection"
    }
  },
  {
    "title": "ASP.NET Core 的 生命周期 IApplicationLifetime",
    "date": "2018-12-28T05:36:12.446Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如果想要知道 ASP.NET Core 的啟動和關閉，內建的 IApplicationLifetime 提供給我們三個屬性可以使用",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.03, "time": 61800, "words": 206 },
    "slug": "asp-net-core-iapplicationlifetime",
    "path": "blog/asp-net-core-iapplicationlifetime",
    "filePath": "blog/asp-net-core-iapplicationlifetime.mdx",
    "toc": [
      { "value": "註冊", "url": "#註冊-1", "depth": 2 },
      { "value": "生命周期", "url": "#生命周期", "depth": 2 },
      { "value": "手動關閉程式", "url": "#手動關閉程式", "depth": 2 },
      { "value": "後記", "url": "#後記-10", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 的 生命周期 IApplicationLifetime",
      "datePublished": "2018-12-28T05:36:12.446Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如果想要知道 ASP.NET Core 的啟動和關閉，內建的 IApplicationLifetime 提供給我們三個屬性可以使用",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-iapplicationlifetime"
    }
  },
  {
    "title": "ASP.NET Core 不同命名空間的 IHostingEnvironment",
    "date": "2018-12-28T03:25:39.552Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 的 IHostingEnvironment 存在兩個不同的命名空間，Microsoft.AspNetCore.Hosting 和 Microsoft.Extensions.Hosting，這兩個有什麼不一樣呢？",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.915, "time": 54900, "words": 183 },
    "slug": "asp-net-core-ihostingenvironment-namespace",
    "path": "blog/asp-net-core-ihostingenvironment-namespace",
    "filePath": "blog/asp-net-core-ihostingenvironment-namespace.mdx",
    "toc": [
      { "value": "注入時", "url": "#注入時", "depth": 2 },
      { "value": "Microsoft.AspNetCore.Hosting", "url": "#microsoftaspnetcorehosting", "depth": 2 },
      { "value": "Microsoft.Extensions.Hosting", "url": "#microsoftextensionshosting", "depth": 2 },
      { "value": "後記", "url": "#後記-7", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 不同命名空間的 IHostingEnvironment",
      "datePublished": "2018-12-28T03:25:39.552Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 的 IHostingEnvironment 存在兩個不同的命名空間，Microsoft.AspNetCore.Hosting 和 Microsoft.Extensions.Hosting，這兩個有什麼不一樣呢？",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-ihostingenvironment-namespace"
    }
  },
  {
    "title": "ASP.NET Core 上傳檔案到 Firebase Storage",
    "date": "2018-12-28T01:51:26.925Z",
    "tags": ["asp.net core", "firebase"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "先前的文章已經有介紹過啟用 Firebase 的 Storage 服務和 ASP.NET Core 的檔案上傳，接下來就來看如何使用 ASP.NET Core 把檔案上傳到 Firebase 的 Storage 吧",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.635, "time": 158100, "words": 527 },
    "slug": "asp-net-core-file-upload-firebase-storage",
    "path": "blog/asp-net-core-file-upload-firebase-storage",
    "filePath": "blog/asp-net-core-file-upload-firebase-storage.mdx",
    "toc": [
      { "value": "安裝套件", "url": "#安裝套件-1", "depth": 2 },
      { "value": "登入 Firebase", "url": "#登入-firebase", "depth": 2 },
      { "value": "上傳檔案", "url": "#上傳檔案", "depth": 2 },
      { "value": "刪除檔案", "url": "#刪除檔案", "depth": 2 },
      { "value": "後記", "url": "#後記-6", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 上傳檔案到 Firebase Storage",
      "datePublished": "2018-12-28T01:51:26.925Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "先前的文章已經有介紹過啟用 Firebase 的 Storage 服務和 ASP.NET Core 的檔案上傳，接下來就來看如何使用 ASP.NET Core 把檔案上傳到 Firebase 的 Storage 吧",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-file-upload-firebase-storage"
    }
  },
  {
    "title": "如何在 Firebase 建立專案、建立使用者和啟用 Storage",
    "date": "2018-12-27T13:46:19.942Z",
    "tags": ["firebase"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Firebase 是 Google 的一個服務，提供開發者可以在雲端快速建置後端的相關服務，例如登入、資料庫和儲存空間等，而且每一項服務都有免費的額度可以讓我們使用，真的是很方便，首先就來看如何在 Firebase 建立專案、建立使用者和啟用 Storage",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.295, "time": 137700, "words": 459 },
    "slug": "firebase-create-project-user-enable-storage",
    "path": "blog/firebase-create-project-user-enable-storage",
    "filePath": "blog/firebase-create-project-user-enable-storage.mdx",
    "toc": [
      { "value": "建立專案", "url": "#建立專案", "depth": 2 },
      { "value": "新增使用者登入", "url": "#新增使用者登入", "depth": 2 },
      { "value": "Storge", "url": "#storge", "depth": 2 },
      { "value": "API Key", "url": "#api-key", "depth": 2 },
      { "value": "後記", "url": "#後記-21", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "如何在 Firebase 建立專案、建立使用者和啟用 Storage",
      "datePublished": "2018-12-27T13:46:19.942Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Firebase 是 Google 的一個服務，提供開發者可以在雲端快速建置後端的相關服務，例如登入、資料庫和儲存空間等，而且每一項服務都有免費的額度可以讓我們使用，真的是很方便，首先就來看如何在 Firebase 建立專案、建立使用者和啟用 Storage",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/firebase-create-project-user-enable-storage"
    }
  },
  {
    "title": "ASP.NET Core 檔案上傳",
    "date": "2018-12-27T12:32:01.302Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 檔案上傳相比之前的 ASP.NET MVC 來說方便許多，就來看如何實作上傳的功能",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.785, "time": 107100, "words": 357 },
    "slug": "asp-net-core-file-upload",
    "path": "blog/asp-net-core-file-upload",
    "filePath": "blog/asp-net-core-file-upload.mdx",
    "toc": [
      { "value": "Html", "url": "#html", "depth": 2 },
      { "value": "單檔上傳", "url": "#單檔上傳", "depth": 2 },
      { "value": "多檔上傳", "url": "#多檔上傳", "depth": 2 },
      { "value": "後記", "url": "#後記-5", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 檔案上傳",
      "datePublished": "2018-12-27T12:32:01.302Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 檔案上傳相比之前的 ASP.NET MVC 來說方便許多，就來看如何實作上傳的功能",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-file-upload"
    }
  },
  {
    "title": "ASP.NET Core ControllerBase 和 Controller",
    "date": "2018-12-27T07:59:58.670Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 有兩個 Controller 可以繼承的父類別 ControllerBase 和 Controller，這兩個有什麼不同呢 ?",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.33, "time": 79800, "words": 266 },
    "slug": "asp-net-core-controllerbase-controller",
    "path": "blog/asp-net-core-controllerbase-controller",
    "filePath": "blog/asp-net-core-controllerbase-controller.mdx",
    "toc": [
      { "value": "ControllerBase", "url": "#controllerbase", "depth": 2 },
      { "value": "Controller", "url": "#controller", "depth": 2 },
      { "value": "後記", "url": "#後記-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core ControllerBase 和 Controller",
      "datePublished": "2018-12-27T07:59:58.670Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 有兩個 Controller 可以繼承的父類別 ControllerBase 和 Controller，這兩個有什麼不同呢 ?",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-controllerbase-controller"
    }
  },
  {
    "title": "ASP.NET Core 2.2 新的 Endpoint Routing",
    "date": "2018-12-27T02:15:46.338Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET Core 2.2 的版本，Endpoint Routing 的行為和之前的版本不太一樣，來看一下差異的部份",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.475, "time": 88500, "words": 295 },
    "slug": "asp-net-core-22-endpoint-routing",
    "path": "blog/asp-net-core-22-endpoint-routing",
    "filePath": "blog/asp-net-core-22-endpoint-routing.mdx",
    "toc": [
      { "value": "設定", "url": "#設定", "depth": 2 },
      { "value": "測試的連結", "url": "#測試的連結", "depth": 2 },
      { "value": "產生沒有參數的連結", "url": "#產生沒有參數的連結", "depth": 2 },
      { "value": "產生不存在的連結", "url": "#產生不存在的連結", "depth": 2 },
      { "value": "產生非空參數的連結", "url": "#產生非空參數的連結", "depth": 2 },
      { "value": "產生可為空參數的連結", "url": "#產生可為空參數的連結", "depth": 2 },
      { "value": "後記", "url": "#後記", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 2.2 新的 Endpoint Routing",
      "datePublished": "2018-12-27T02:15:46.338Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET Core 2.2 的版本，Endpoint Routing 的行為和之前的版本不太一樣，來看一下差異的部份",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-22-endpoint-routing"
    }
  },
  {
    "title": "ASP.NET Core 預設組態設定",
    "date": "2018-12-26T13:00:55.285Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core 裡面有很多方式都可以當成組態設定，我們來看一下預設有提供那些方式可以使用",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.725, "time": 163500, "words": 545 },
    "slug": "asp-net-core-default-configuration",
    "path": "blog/asp-net-core-default-configuration",
    "filePath": "blog/asp-net-core-default-configuration.mdx",
    "toc": [
      { "value": "設定檔的種類", "url": "#設定檔的種類", "depth": 2 },
      { "value": "載入順序", "url": "#載入順序", "depth": 2 },
      { "value": "測試", "url": "#測試-2", "depth": 2 },
      { "value": "後記", "url": "#後記-4", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 預設組態設定",
      "datePublished": "2018-12-26T13:00:55.285Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core 裡面有很多方式都可以當成組態設定，我們來看一下預設有提供那些方式可以使用",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-default-configuration"
    }
  },
  {
    "title": "Rider 2018.3 神奇的 Remote Debug",
    "date": "2018-12-26T05:29:04.463Z",
    "tags": ["rider"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Rider 在今年年底前發佈了一個 2018.3 的版本，裡面有一個神奇的新功能，可以 Remote Debug Server 上面運行的程式，我們就來看一下這神奇的功能",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.985, "time": 179100, "words": 597 },
    "slug": "rider-201803-remote-debug",
    "path": "blog/rider-201803-remote-debug",
    "filePath": "blog/rider-201803-remote-debug.mdx",
    "toc": [
      { "value": "設定 Remote Debug", "url": "#設定-remote-debug", "depth": 2 },
      { "value": "Remote Debug", "url": "#remote-debug", "depth": 2 },
      { "value": "後記", "url": "#後記-23", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Rider 2018.3 神奇的 Remote Debug",
      "datePublished": "2018-12-26T05:29:04.463Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Rider 在今年年底前發佈了一個 2018.3 的版本，裡面有一個神奇的新功能，可以 Remote Debug Server 上面運行的程式，我們就來看一下這神奇的功能",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rider-201803-remote-debug"
    }
  },
  {
    "title": "EF Core 使用 PostgreSQL Jsonb 型別",
    "date": "2018-12-26T01:11:25.196Z",
    "tags": ["ef core", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "前面的文章有大概介紹了 PostgreSQL Json 和 Jsonb 的不同，現在要來看如何在 EF Core 裡面使用 Jsonb",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.76, "time": 165600, "words": 552 },
    "slug": "ef-core-postgresql-jsonb-type",
    "path": "blog/ef-core-postgresql-jsonb-type",
    "filePath": "blog/ef-core-postgresql-jsonb-type.mdx",
    "toc": [
      { "value": "PostgreSQL", "url": "#postgresql", "depth": 2 },
      { "value": "使用 string 對應", "url": "#使用-string-對應", "depth": 2 },
      { "value": "使用強型別對應", "url": "#使用強型別對應", "depth": 2 },
      { "value": "同場加映，使用 Sql Command", "url": "#同場加映使用-sql-command", "depth": 2 },
      { "value": "後記", "url": "#後記-20", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EF Core 使用 PostgreSQL Jsonb 型別",
      "datePublished": "2018-12-26T01:11:25.196Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "前面的文章有大概介紹了 PostgreSQL Json 和 Jsonb 的不同，現在要來看如何在 EF Core 裡面使用 Jsonb",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ef-core-postgresql-jsonb-type"
    }
  },
  {
    "title": "ASP.NET Core 軟體防火牆",
    "date": "2018-12-25T02:30:34.679Z",
    "tags": ["asp.net core", "package"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如果你有網站只限制特定的 IP 可以存取，或者只限定部份國家可以存取，除了從實體的防火牆阻檔之外，來看看這個套件怎麼作到軟體的防火牆",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.57, "time": 334200, "words": 1114 },
    "slug": "asp-net-core-firewall",
    "path": "blog/asp-net-core-firewall",
    "filePath": "blog/asp-net-core-firewall.mdx",
    "toc": [
      { "value": "安裝套件", "url": "#安裝套件-2", "depth": 2 },
      { "value": "基本設定", "url": "#基本設定", "depth": 2 },
      { "value": "設定本機開發", "url": "#設定本機開發", "depth": 2 },
      { "value": "設定 IP", "url": "#設定-ip", "depth": 2 },
      { "value": "設定 IP Rang", "url": "#設定-ip-rang", "depth": 2 },
      { "value": "設定國家", "url": "#設定國家", "depth": 2 },
      { "value": "多個設定檔", "url": "#多個設定檔", "depth": 2 },
      { "value": "後記", "url": "#後記-8", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 軟體防火牆",
      "datePublished": "2018-12-25T02:30:34.679Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如果你有網站只限制特定的 IP 可以存取，或者只限定部份國家可以存取，除了從實體的防火牆阻檔之外，來看看這個套件怎麼作到軟體的防火牆",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-firewall"
    }
  },
  {
    "title": "在 ASP.NET Core 寫整合 (E2E) 測試就跟單元測試一樣簡單",
    "date": "2018-12-24T03:45:35.266Z",
    "tags": ["asp.net core", "testing"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET Core 2.1 之後新增了 WebApplicationFactory 讓我們可以更容昜的來寫整合 (E2E) 測試，就跟在寫單元測試一樣的方便",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.71, "time": 342600, "words": 1142 },
    "slug": "asp-net-core-integration-e2e-test",
    "path": "blog/asp-net-core-integration-e2e-test",
    "filePath": "blog/asp-net-core-integration-e2e-test.mdx",
    "toc": [
      { "value": "ASP.NET Core 專案", "url": "#aspnet-core-專案", "depth": 2 },
      { "value": "建立 WebFactory & TestBase", "url": "#建立-webfactory--testbase", "depth": 2 },
      { "value": "MVC & API 測試", "url": "#mvc--api-測試", "depth": 2 },
      { "value": "Debug", "url": "#debug", "depth": 2 },
      {
        "value": "修改 ASP.NET Core 專案使用 Database",
        "url": "#修改-aspnet-core-專案使用-database",
        "depth": 2
      },
      { "value": "修改測試使用 Database", "url": "#修改測試使用-database", "depth": 2 },
      { "value": "驗證 Database", "url": "#驗證-database", "depth": 2 },
      { "value": "後記", "url": "#後記-9", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "在 ASP.NET Core 寫整合 (E2E) 測試就跟單元測試一樣簡單",
      "datePublished": "2018-12-24T03:45:35.266Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET Core 2.1 之後新增了 WebApplicationFactory 讓我們可以更容昜的來寫整合 (E2E) 測試，就跟在寫單元測試一樣的方便",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-integration-e2e-test"
    }
  },
  {
    "title": "在 js 裡面使用 Parse Server",
    "date": "2018-12-24T01:23:12.376Z",
    "tags": ["js", "parse"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "前面的文章已經把 Parse Server 架設在 Heroku 了，現在就來看怎麼在 js 裡面連接到 Parse Server 取得資料",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.43, "time": 145800, "words": 486 },
    "slug": "js-parse-server",
    "path": "blog/js-parse-server",
    "filePath": "blog/js-parse-server.mdx",
    "toc": [
      { "value": "Query", "url": "#query", "depth": 2 },
      { "value": "Live Query", "url": "#live-query", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "在 js 裡面使用 Parse Server",
      "datePublished": "2018-12-24T01:23:12.376Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "前面的文章已經把 Parse Server 架設在 Heroku 了，現在就來看怎麼在 js 裡面連接到 Parse Server 取得資料",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/js-parse-server"
    }
  },
  {
    "title": "安裝 Parse Server Dashboard",
    "date": "2018-12-23T07:39:43.138Z",
    "tags": ["parse"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Parse Dashboard 是官方出的一個獨立套件，提供給我們一個視覺化的方式來管理 Parse Server，而且非常容昜安裝，下面就來看怎麼安裝",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.93, "time": 115800, "words": 386 },
    "slug": "install-parse-server-dashboard",
    "path": "blog/install-parse-server-dashboard",
    "filePath": "blog/install-parse-server-dashboard.mdx",
    "toc": [
      { "value": "使用 npm global", "url": "#使用-npm-global", "depth": 2 },
      { "value": "使用 express", "url": "#使用-express", "depth": 2 },
      { "value": "使用者登入", "url": "#使用者登入", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "安裝 Parse Server Dashboard",
      "datePublished": "2018-12-23T07:39:43.138Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Parse Dashboard 是官方出的一個獨立套件，提供給我們一個視覺化的方式來管理 Parse Server，而且非常容昜安裝，下面就來看怎麼安裝",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/install-parse-server-dashboard"
    }
  },
  {
    "title": "ASP.NET Core 專案加入方案檔",
    "date": "2018-12-22T08:42:12.402Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如果用 ASP.NET Core CLI 建立的專案會只有專案檔而沒有方案檔，這跟我們在使用 IDE 工具 (Rider、VS) 建立出來的不太一樣，下面就來看怎麼使用 CLI 建立方案檔",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.935, "time": 56100, "words": 187 },
    "slug": "asp-net-core-project-add-solution-file",
    "path": "blog/asp-net-core-project-add-solution-file",
    "filePath": "blog/asp-net-core-project-add-solution-file.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 專案加入方案檔",
      "datePublished": "2018-12-22T08:42:12.402Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如果用 ASP.NET Core CLI 建立的專案會只有專案檔而沒有方案檔，這跟我們在使用 IDE 工具 (Rider、VS) 建立出來的不太一樣，下面就來看怎麼使用 CLI 建立方案檔",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-project-add-solution-file"
    }
  },
  {
    "title": "Heroku 無腦架設 Parse Server",
    "date": "2018-12-22T07:00:46.431Z",
    "tags": ["heroku", "parse"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Parse 是一個 Open Source 的推播服務 Server，很像是 Firebase 的服務，而且可以 Host 在自己的 Server 上面，這裡就用 Heroku 來示範如何無腦的架設 Parse Server",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.61, "time": 96600, "words": 322 },
    "slug": "heroku-parse-server",
    "path": "blog/heroku-parse-server",
    "filePath": "blog/heroku-parse-server.mdx",
    "toc": [
      { "value": "Fork Example", "url": "#fork-example", "depth": 2 },
      { "value": "在 Heroku 建立一個 APP", "url": "#在-heroku-建立一個-app", "depth": 2 },
      { "value": "連接到 Github", "url": "#連接到-github", "depth": 2 },
      { "value": "加入 MongoDB", "url": "#加入-mongodb", "depth": 2 },
      { "value": "修改 Parse Server Config", "url": "#修改-parse-server-config", "depth": 2 },
      { "value": "瀏覽網頁", "url": "#瀏覽網頁", "depth": 2 },
      { "value": "測試 Parse", "url": "#測試-parse", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Heroku 無腦架設 Parse Server",
      "datePublished": "2018-12-22T07:00:46.431Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Parse 是一個 Open Source 的推播服務 Server，很像是 Firebase 的服務，而且可以 Host 在自己的 Server 上面，這裡就用 Heroku 來示範如何無腦的架設 Parse Server",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/heroku-parse-server"
    }
  },
  {
    "title": "ASP.NET Core 使用 User Secret 保護機敏資料",
    "date": "2018-12-22T01:50:18.400Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "雖然在 .NET Core 裡面使用 appsetting 分成不同的環境給不同的設定檔已經很方便了，不過在開發的階段，如果每一個人的 DB 連線是連到自己本機的 DB，又或者是有個人的機敏資料會在開發上使用時，使用 User Secret 的方式來儲存就很方便",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.81, "time": 108600, "words": 362 },
    "slug": "asp-net-core-user-secret",
    "path": "blog/asp-net-core-user-secret",
    "filePath": "blog/asp-net-core-user-secret.mdx",
    "toc": [
      { "value": "儲存位置", "url": "#儲存位置", "depth": 2 },
      { "value": "專案加入 User Secret", "url": "#專案加入-user-secret", "depth": 2 },
      {
        "value": "使用 Command Line 操作 User Secret",
        "url": "#使用-command-line-操作-user-secret",
        "depth": 2
      },
      { "value": "儲存的資料", "url": "#儲存的資料", "depth": 2 },
      { "value": "專案使用 User Secret", "url": "#專案使用-user-secret", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core 使用 User Secret 保護機敏資料",
      "datePublished": "2018-12-22T01:50:18.400Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "雖然在 .NET Core 裡面使用 appsetting 分成不同的環境給不同的設定檔已經很方便了，不過在開發的階段，如果每一個人的 DB 連線是連到自己本機的 DB，又或者是有個人的機敏資料會在開發上使用時，使用 User Secret 的方式來儲存就很方便",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-user-secret"
    }
  },
  {
    "title": "為你的 ASP.NET Core API 加上版本吧 !!",
    "date": "2018-12-21T14:23:26.624Z",
    "tags": ["asp.net core", "api"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "是不是有對外服務的 API 沒有辦法改版，怕改了就會有問題而影響到使用者，如果可以控制 API 的版本就沒有這個問題了，來為你的 API 加上版本吧 !!",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.21, "time": 132600, "words": 442 },
    "slug": "asp-net-core-api-version",
    "path": "blog/asp-net-core-api-version",
    "filePath": "blog/asp-net-core-api-version.mdx",
    "toc": [
      { "value": "安裝套件", "url": "#安裝套件", "depth": 2 },
      { "value": "設定", "url": "#設定-1", "depth": 2 },
      { "value": "預設 Version", "url": "#預設-version", "depth": 2 },
      { "value": "路由 Version", "url": "#路由-version", "depth": 2 },
      { "value": "淘汰 Version", "url": "#淘汰-version", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "為你的 ASP.NET Core API 加上版本吧 !!",
      "datePublished": "2018-12-21T14:23:26.624Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "是不是有對外服務的 API 沒有辦法改版，怕改了就會有問題而影響到使用者，如果可以控制 API 的版本就沒有這個問題了，來為你的 API 加上版本吧 !!",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-api-version"
    }
  },
  {
    "title": "PostgreSQL - Json & Jsonb",
    "date": "2018-12-20T05:18:48.974Z",
    "tags": ["postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "比較 PostgreSQL 裡面 Json 和 Jsonb 的不同",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.05, "time": 63000, "words": 210 },
    "slug": "postgresql-json-jsonb",
    "path": "blog/postgresql-json-jsonb",
    "filePath": "blog/postgresql-json-jsonb.mdx",
    "toc": [
      { "value": "比較差異", "url": "#比較差異", "depth": 2 },
      { "value": "結論", "url": "#結論-5", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "PostgreSQL - Json & Jsonb",
      "datePublished": "2018-12-20T05:18:48.974Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "比較 PostgreSQL 裡面 Json 和 Jsonb 的不同",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/postgresql-json-jsonb"
    }
  },
  {
    "title": "Ubuntu - 安裝 Java",
    "date": "2018-12-20T03:13:38.167Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 安裝 Java",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.76, "time": 45600, "words": 152 },
    "slug": "ubuntu-install-java",
    "path": "blog/ubuntu-install-java",
    "filePath": "blog/ubuntu-install-java.mdx",
    "toc": [
      { "value": "檢查 Java 版本", "url": "#檢查-java-版本", "depth": 2 },
      { "value": "安裝", "url": "#安裝-4", "depth": 2 },
      { "value": "驗證", "url": "#驗證-1", "depth": 2 },
      { "value": "設置 JAVA_HOME", "url": "#設置-java_home", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 安裝 Java",
      "datePublished": "2018-12-20T03:13:38.167Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 安裝 Java",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-install-java"
    }
  },
  {
    "title": "EF Core - 呼叫 Function",
    "date": "2018-12-20T02:57:06.143Z",
    "tags": ["ef core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如何在 EF Core 裡面去呼叫 Function",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.995, "time": 59700, "words": 199 },
    "slug": "ef-core-function",
    "path": "blog/ef-core-function",
    "filePath": "blog/ef-core-function.mdx",
    "toc": [
      { "value": "Table & Function", "url": "#table--function", "depth": 2 },
      { "value": "設定 DbContext", "url": "#設定-dbcontext", "depth": 2 },
      { "value": "Query Function", "url": "#query-function", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EF Core - 呼叫 Function",
      "datePublished": "2018-12-20T02:57:06.143Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如何在 EF Core 裡面去呼叫 Function",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ef-core-function"
    }
  },
  {
    "title": "ASP.NET Core MVC - 2.2 Health Checks",
    "date": "2018-12-19T08:08:06.584Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core MVC 2.2 有多了一個新功能叫 Health Checks，可以讓我們檢查程式的健康狀態",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.225, "time": 193500, "words": 645 },
    "slug": "asp-net-core-mvc-health-checks",
    "path": "blog/asp-net-core-mvc-health-checks",
    "filePath": "blog/asp-net-core-mvc-health-checks.mdx",
    "toc": [
      { "value": "First Healthy Check", "url": "#first-healthy-check", "depth": 2 },
      { "value": "Check Report", "url": "#check-report", "depth": 2 },
      { "value": "Check Tag", "url": "#check-tag", "depth": 2 },
      { "value": "Check PostgreSQL", "url": "#check-postgresql", "depth": 2 },
      { "value": "Health Check UI", "url": "#health-check-ui", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - 2.2 Health Checks",
      "datePublished": "2018-12-19T08:08:06.584Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core MVC 2.2 有多了一個新功能叫 Health Checks，可以讓我們檢查程式的健康狀態",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-health-checks"
    }
  },
  {
    "title": "ASP.NET Core MVC + Vue",
    "date": "2018-12-19T03:30:39.555Z",
    "tags": ["asp.net core", "vue"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "把 Vue 整合到 ASP.NET Core API 的專案裡面，執行 .NET Core 的時候就可以把 Vue 給叫起來，不用在下前端的指令",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.965, "time": 177900, "words": 593 },
    "slug": "asp-net-core-mvc-vue",
    "path": "blog/asp-net-core-mvc-vue",
    "filePath": "blog/asp-net-core-mvc-vue.mdx",
    "toc": [
      { "value": "建立 ASP.NET Core MVC 專案", "url": "#建立-aspnet-core-mvc-專案", "depth": 2 },
      { "value": "建立 Vue 專案", "url": "#建立-vue-專案", "depth": 2 },
      { "value": "安裝 Webpack 套件", "url": "#安裝-webpack-套件", "depth": 2 },
      { "value": "新增 vue.config.js", "url": "#新增-vueconfigjs", "depth": 2 },
      { "value": "修改 Startup.cs", "url": "#修改-startupcs", "depth": 2 },
      { "value": "新增 HomeController", "url": "#新增-homecontroller", "depth": 2 },
      { "value": "執行", "url": "#執行", "depth": 2 },
      { "value": "後記", "url": "#後記-14", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC + Vue",
      "datePublished": "2018-12-19T03:30:39.555Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "把 Vue 整合到 ASP.NET Core API 的專案裡面，執行 .NET Core 的時候就可以把 Vue 給叫起來，不用在下前端的指令",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-vue"
    }
  },
  {
    "title": "ASP.NET Core MVC - Json 序列化大小寫問題",
    "date": "2018-12-18T10:56:03.735Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET Core MVC 裡面預設的 Json 序列化行為和 ASP.NET MVC 不一樣，會把首字母變成小寫",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.66, "time": 39600, "words": 132 },
    "slug": "asp-net-core-mvc-json-serialize-camel-case-issue",
    "path": "blog/asp-net-core-mvc-json-serialize-camel-case-issue",
    "filePath": "blog/asp-net-core-mvc-json-serialize-camel-case-issue.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - Json 序列化大小寫問題",
      "datePublished": "2018-12-18T10:56:03.735Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET Core MVC 裡面預設的 Json 序列化行為和 ASP.NET MVC 不一樣，會把首字母變成小寫",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-json-serialize-camel-case-issue"
    }
  },
  {
    "title": "ASP.NET Core MVC - 使用 Html.Raw 在 Markdown 的程式碼區塊的問題",
    "date": "2018-12-18T05:15:05.741Z",
    "tags": ["asp.net core", "markdown"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "如果使用 Html.Raw 輸出 markdown 的程式碼區塊時，有 <> 的話就會幫你在多輸出一個結尾的 tag",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.235, "time": 14100, "words": 47 },
    "slug": "asp-net-core-mvc-html-raw-markdown-code-area-issus",
    "path": "blog/asp-net-core-mvc-html-raw-markdown-code-area-issus",
    "filePath": "blog/asp-net-core-mvc-html-raw-markdown-code-area-issus.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - 使用 Html.Raw 在 Markdown 的程式碼區塊的問題",
      "datePublished": "2018-12-18T05:15:05.741Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "如果使用 Html.Raw 輸出 markdown 的程式碼區塊時，有 <> 的話就會幫你在多輸出一個結尾的 tag",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-html-raw-markdown-code-area-issus"
    }
  },
  {
    "title": "EF Core - 2.1 Value Converter",
    "date": "2018-12-18T01:40:09.669Z",
    "tags": ["ef core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 EF Core 2.1 加入了 Value Converter，讓我們可以更清鬆的轉換資料庫的資料變成我們需要的格式",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.435, "time": 146100, "words": 487 },
    "slug": "ef-core-value-converter",
    "path": "blog/ef-core-value-converter",
    "filePath": "blog/ef-core-value-converter.mdx",
    "toc": [
      { "value": "EF Core & Enum", "url": "#ef-core--enum", "depth": 2 },
      { "value": "Conversion", "url": "#conversion", "depth": 2 },
      { "value": "資料庫的結果", "url": "#資料庫的結果", "depth": 2 },
      { "value": "ValueConverter 類別", "url": "#valueconverter-類別", "depth": 2 },
      { "value": "EF Core 內建的 Converter", "url": "#ef-core-內建的-converter", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EF Core - 2.1 Value Converter",
      "datePublished": "2018-12-18T01:40:09.669Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 EF Core 2.1 加入了 Value Converter，讓我們可以更清鬆的轉換資料庫的資料變成我們需要的格式",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ef-core-value-converter"
    }
  },
  {
    "title": "ASP.NET Core MVC - 取消執行時的狀態訊息",
    "date": "2018-12-18T01:24:41.851Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core MVC 取消執行時的狀態訊息",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.39, "time": 23400, "words": 78 },
    "slug": "asp-net-core-mvc-suppress-status-messages",
    "path": "blog/asp-net-core-mvc-suppress-status-messages",
    "filePath": "blog/asp-net-core-mvc-suppress-status-messages.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - 取消執行時的狀態訊息",
      "datePublished": "2018-12-18T01:24:41.851Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core MVC 取消執行時的狀態訊息",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-suppress-status-messages"
    }
  },
  {
    "title": "Ubuntu - PostgreSQL Backup",
    "date": "2018-12-14T08:30:19.761Z",
    "tags": ["postgresql", "ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "備份在 Ubuntu 上面的 PostgreSQL",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.7, "time": 102000, "words": 340 },
    "slug": "ubuntu-postgresql-backup",
    "path": "blog/ubuntu-postgresql-backup",
    "filePath": "blog/ubuntu-postgresql-backup.mdx",
    "toc": [
      { "value": "備份", "url": "#備份", "depth": 2 },
      { "value": "還原", "url": "#還原", "depth": 2 },
      { "value": "定期備份", "url": "#定期備份", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - PostgreSQL Backup",
      "datePublished": "2018-12-14T08:30:19.761Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "備份在 Ubuntu 上面的 PostgreSQL",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-postgresql-backup"
    }
  },
  {
    "title": "Heroku - PostgreSQL Backup",
    "date": "2018-12-14T05:30:08.063Z",
    "tags": ["heroku", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "前面的文章已經用 ASP.NET Core MVC 接了 Heroku 的 PostgreSQL，現在要來看怎麼備份 PostgreSQL",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.695, "time": 101700, "words": 339 },
    "slug": "heroku-postgresql-backup",
    "path": "blog/heroku-postgresql-backup",
    "filePath": "blog/heroku-postgresql-backup.mdx",
    "toc": [
      { "value": "手動備份 - 使用 CLI", "url": "#手動備份---使用-cli", "depth": 2 },
      { "value": "手動備份 - 使用畫面", "url": "#手動備份---使用畫面", "depth": 2 },
      { "value": "周期性備份", "url": "#周期性備份", "depth": 2 },
      { "value": "狀態", "url": "#狀態", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Heroku - PostgreSQL Backup",
      "datePublished": "2018-12-14T05:30:08.063Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "前面的文章已經用 ASP.NET Core MVC 接了 Heroku 的 PostgreSQL，現在要來看怎麼備份 PostgreSQL",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/heroku-postgresql-backup"
    }
  },
  {
    "title": "ASP.NET Core MVC - 使用 Heroku 的 PostgreSQL",
    "date": "2018-12-13T14:02:48.207Z",
    "tags": ["asp.net core", "heroku", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "前面文章 [ASP.NET Core MVC + Heroku] 已經把 .NET Core MVC 的專案放到 Heroku 了，現在要使用它所提供的免費 PostgreSQL，雖然免費的限制資料數量為 10,000 筆，不過如果是小型專案的話基本上已經夠用了，可以看一下 Heroku 的[介紹]",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.31, "time": 138600, "words": 462 },
    "slug": "asp-net-core-mvc-heroku-postgresql",
    "path": "blog/asp-net-core-mvc-heroku-postgresql",
    "filePath": "blog/asp-net-core-mvc-heroku-postgresql.mdx",
    "toc": [
      { "value": "Heroku CLI 建立", "url": "#heroku-cli-建立", "depth": 2 },
      { "value": "Heroku 畫面建立", "url": "#heroku-畫面建立", "depth": 2 },
      { "value": "使用 DataGrip 連接", "url": "#使用-datagrip-連接", "depth": 2 },
      { "value": "使用 ASP.NET Core MVC 連接", "url": "#使用-aspnet-core-mvc-連接", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - 使用 Heroku 的 PostgreSQL",
      "datePublished": "2018-12-13T14:02:48.207Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "前面文章 [ASP.NET Core MVC + Heroku] 已經把 .NET Core MVC 的專案放到 Heroku 了，現在要使用它所提供的免費 PostgreSQL，雖然免費的限制資料數量為 10,000 筆，不過如果是小型專案的話基本上已經夠用了，可以看一下 Heroku 的[介紹]",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-heroku-postgresql"
    }
  },
  {
    "title": "ASP.NET Core MVC - EF Core 使用 PostgreSQL",
    "date": "2018-12-13T07:00:59.790Z",
    "tags": ["asp.net core", "ef core", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET Core MVC 搭配 EF Core 使用 Postgre SQL",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.305, "time": 78300, "words": 261 },
    "slug": "asp-net-core-mvc-ef-core-postgresql",
    "path": "blog/asp-net-core-mvc-ef-core-postgresql",
    "filePath": "blog/asp-net-core-mvc-ef-core-postgresql.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - EF Core 使用 PostgreSQL",
      "datePublished": "2018-12-13T07:00:59.790Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET Core MVC 搭配 EF Core 使用 Postgre SQL",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-ef-core-postgresql"
    }
  },
  {
    "title": "Ubuntu - 安裝 PostgreSQL",
    "date": "2018-12-13T05:30:23.715Z",
    "tags": ["ubuntu", "postgresql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 安裝 PostgreSQL",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.815, "time": 168900, "words": 563 },
    "slug": "ubuntu-install-postgresql",
    "path": "blog/ubuntu-install-postgresql",
    "filePath": "blog/ubuntu-install-postgresql.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 安裝 PostgreSQL",
      "datePublished": "2018-12-13T05:30:23.715Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 安裝 PostgreSQL",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-install-postgresql"
    }
  },
  {
    "title": "Ubuntu - 修改跑在 Nginx 上面 ASP.NET Core MVC 執行的 Port",
    "date": "2018-12-13T01:30:40.951Z",
    "tags": ["ubuntu", "asp.net core", "nginx"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在同一台 Server 上如果執行多個 ASP.NET Core MVC 專案時，因為預設 port number 都是 5000，所以會發生衝突的問題無法執行，所以需要修改專案執行時的 port number",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.81, "time": 48600, "words": 162 },
    "slug": "ubuntu-asp-net-core-mvc-nginx-change-port",
    "path": "blog/ubuntu-asp-net-core-mvc-nginx-change-port",
    "filePath": "blog/ubuntu-asp-net-core-mvc-nginx-change-port.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 修改跑在 Nginx 上面 ASP.NET Core MVC 執行的 Port",
      "datePublished": "2018-12-13T01:30:40.951Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在同一台 Server 上如果執行多個 ASP.NET Core MVC 專案時，因為預設 port number 都是 5000，所以會發生衝突的問題無法執行，所以需要修改專案執行時的 port number",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-asp-net-core-mvc-nginx-change-port"
    }
  },
  {
    "title": "ASP.NET Core MVC + Heroku",
    "date": "2018-12-12T13:32:14.151Z",
    "tags": ["asp.net core", "heroku"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "把 ASP.NET Core MVC 專案發佈到 Heroku 平台上",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.78, "time": 106800, "words": 356 },
    "slug": "asp-net-core-mvc-publish-heroku",
    "path": "blog/asp-net-core-mvc-publish-heroku",
    "filePath": "blog/asp-net-core-mvc-publish-heroku.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC + Heroku",
      "datePublished": "2018-12-12T13:32:14.151Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "把 ASP.NET Core MVC 專案發佈到 Heroku 平台上",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-publish-heroku"
    }
  },
  {
    "title": "JetBrains plugin - 調整 Relative Line Numbers 的顏色",
    "date": "2018-12-12T12:46:43.163Z",
    "tags": ["jetbrains plugin", "rider"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "調整 Relative Line Numbers 的顏色",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.35, "time": 21000, "words": 70 },
    "slug": "jetbrains-relative-line-numbers-plugin-color",
    "path": "blog/jetbrains-relative-line-numbers-plugin-color",
    "filePath": "blog/jetbrains-relative-line-numbers-plugin-color.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "JetBrains plugin - 調整 Relative Line Numbers 的顏色",
      "datePublished": "2018-12-12T12:46:43.163Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "調整 Relative Line Numbers 的顏色",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jetbrains-relative-line-numbers-plugin-color"
    }
  },
  {
    "title": "Ubuntu + ASP.NET Core MVC + Nginx",
    "date": "2018-12-12T02:44:09.752Z",
    "tags": ["ubuntu", "asp.net core", "nginx"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "前面的文章已經安裝好 Nginx，和產生了 ASP.NET Core MVC 的專案，現在要把發佈出來的檔案跑起來然後使用 Nginx 作反向代理，讓外部可以看到",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.345, "time": 200700, "words": 669 },
    "slug": "ubuntu-asp-net-core-mvc-publish-nginx",
    "path": "blog/ubuntu-asp-net-core-mvc-publish-nginx",
    "filePath": "blog/ubuntu-asp-net-core-mvc-publish-nginx.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu + ASP.NET Core MVC + Nginx",
      "datePublished": "2018-12-12T02:44:09.752Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "前面的文章已經安裝好 Nginx，和產生了 ASP.NET Core MVC 的專案，現在要把發佈出來的檔案跑起來然後使用 Nginx 作反向代理，讓外部可以看到",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-asp-net-core-mvc-publish-nginx"
    }
  },
  {
    "title": "Python - 傳遞 function 到另外一個 function 當成參數",
    "date": "2018-12-12T01:55:52.945Z",
    "tags": ["python"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 c# 裡面有很方便的 Func, Action 可以當成參數傳遞到另外一個方法裡面執行，就在找 python 裡面有沒有類似的寫法可以傳遞一個方法到另外一個方法執行",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.9, "time": 54000, "words": 180 },
    "slug": "python-pass-function-as-argument-to-another-function",
    "path": "blog/python-pass-function-as-argument-to-another-function",
    "filePath": "blog/python-pass-function-as-argument-to-another-function.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Python - 傳遞 function 到另外一個 function 當成參數",
      "datePublished": "2018-12-12T01:55:52.945Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 c# 裡面有很方便的 Func, Action 可以當成參數傳遞到另外一個方法裡面執行，就在找 python 裡面有沒有類似的寫法可以傳遞一個方法到另外一個方法執行",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/python-pass-function-as-argument-to-another-function"
    }
  },
  {
    "title": "Python - 單元測試",
    "date": "2018-12-12T01:00:35.197Z",
    "tags": ["python"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Python 單元測試",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.88, "time": 52800, "words": 176 },
    "slug": "python-unittest",
    "path": "blog/python-unittest",
    "filePath": "blog/python-unittest.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Python - 單元測試",
      "datePublished": "2018-12-12T01:00:35.197Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Python 單元測試",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/python-unittest"
    }
  },
  {
    "title": "Ubuntu - 建立、執行和發佈 ASP.NET Core MVC 專案",
    "date": "2018-12-11T08:15:48.396Z",
    "tags": ["ubuntu", "asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 建立、執行和發佈 ASP.NET Core MVC 專案",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.19, "time": 71400, "words": 238 },
    "slug": "ubuntu-create-run-and-publish-asp-net-core-mvc-project",
    "path": "blog/ubuntu-create-run-and-publish-asp-net-core-mvc-project",
    "filePath": "blog/ubuntu-create-run-and-publish-asp-net-core-mvc-project.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 建立、執行和發佈 ASP.NET Core MVC 專案",
      "datePublished": "2018-12-11T08:15:48.396Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 建立、執行和發佈 ASP.NET Core MVC 專案",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-create-run-and-publish-asp-net-core-mvc-project"
    }
  },
  {
    "title": "Ubuntu - 安裝和移除 .NET Core SDK",
    "date": "2018-12-11T07:42:43.235Z",
    "tags": ["asp.net core", "ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 安裝 .NET Core SDK",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.045, "time": 62700, "words": 209 },
    "slug": "ubuntu-install-uninstall-net-core-sdk",
    "path": "blog/ubuntu-install-uninstall-net-core-sdk",
    "filePath": "blog/ubuntu-install-uninstall-net-core-sdk.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 安裝和移除 .NET Core SDK",
      "datePublished": "2018-12-11T07:42:43.235Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 安裝 .NET Core SDK",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-install-uninstall-net-core-sdk"
    }
  },
  {
    "title": "Ubuntu - 安裝 Nginx",
    "date": "2018-12-11T06:10:03.129Z",
    "tags": ["ubuntu", "nginx"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 安裝 Nginx",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.89, "time": 53400, "words": 178 },
    "slug": "ubuntu-install-nginx",
    "path": "blog/ubuntu-install-nginx",
    "filePath": "blog/ubuntu-install-nginx.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 安裝 Nginx",
      "datePublished": "2018-12-11T06:10:03.129Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 安裝 Nginx",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-install-nginx"
    }
  },
  {
    "title": "ASP.NET Core MVC - 強型別 Configuration",
    "date": "2018-12-11T02:33:45.037Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET Core MVC 裡面預設有讀取 Configuration 的機制，而如果沒有要使用到 IOption，其實可以把讀到的 Configuration 用強型別的方式注入到要使用的地方，會更加方便的使用",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.39, "time": 83400, "words": 278 },
    "slug": "asp-net-core-mvc-strong-type-configuration",
    "path": "blog/asp-net-core-mvc-strong-type-configuration",
    "filePath": "blog/asp-net-core-mvc-strong-type-configuration.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - 強型別 Configuration",
      "datePublished": "2018-12-11T02:33:45.037Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET Core MVC 裡面預設有讀取 Configuration 的機制，而如果沒有要使用到 IOption，其實可以把讀到的 Configuration 用強型別的方式注入到要使用的地方，會更加方便的使用",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-strong-type-configuration"
    }
  },
  {
    "title": "Ubuntu - 簡單的防火牆設定 ufw",
    "date": "2018-12-10T05:10:08.645Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 簡單的防火牆 ufw 設定",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.31, "time": 138600, "words": 462 },
    "slug": "ubuntu-uncomplicated-firewall-ufw",
    "path": "blog/ubuntu-uncomplicated-firewall-ufw",
    "filePath": "blog/ubuntu-uncomplicated-firewall-ufw.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 簡單的防火牆設定 ufw",
      "datePublished": "2018-12-10T05:10:08.645Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 簡單的防火牆 ufw 設定",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-uncomplicated-firewall-ufw"
    }
  },
  {
    "title": "Ubuntu - SSH 安全性設定",
    "date": "2018-12-10T03:04:26.753Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu SSH 安全性設定",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.92, "time": 55200, "words": 184 },
    "slug": "ubuntu-ssh-security-setting",
    "path": "blog/ubuntu-ssh-security-setting",
    "filePath": "blog/ubuntu-ssh-security-setting.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - SSH 安全性設定",
      "datePublished": "2018-12-10T03:04:26.753Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu SSH 安全性設定",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-ssh-security-setting"
    }
  },
  {
    "title": "ASP.NET Core MVC - StyleCop",
    "date": "2018-12-10T02:21:28.686Z",
    "tags": ["asp.net core"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET Core MVC 導入 StyleCop",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.76, "time": 105600, "words": 352 },
    "slug": "asp-net-core-mvc-stylecop",
    "path": "blog/asp-net-core-mvc-stylecop",
    "filePath": "blog/asp-net-core-mvc-stylecop.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET Core MVC - StyleCop",
      "datePublished": "2018-12-10T02:21:28.686Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET Core MVC 導入 StyleCop",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-core-mvc-stylecop"
    }
  },
  {
    "title": "Jenkins 換掉內建的 Theme",
    "date": "2018-12-09T11:40:10.407Z",
    "tags": ["jenkins"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jenkins 換掉內建的 Theme",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.68, "time": 40800, "words": 136 },
    "slug": "jenkins-theme",
    "path": "blog/jenkins-theme",
    "filePath": "blog/jenkins-theme.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jenkins 換掉內建的 Theme",
      "datePublished": "2018-12-09T11:40:10.407Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jenkins 換掉內建的 Theme",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jenkins-theme"
    }
  },
  {
    "title": "Ubuntu - SSH 遠端登入主機",
    "date": "2018-12-08T11:46:08.135Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu SSH 遠端登入主機",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.45, "time": 147000, "words": 490 },
    "slug": "ubuntu-ssh-remote-connection",
    "path": "blog/ubuntu-ssh-remote-connection",
    "filePath": "blog/ubuntu-ssh-remote-connection.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - SSH 遠端登入主機",
      "datePublished": "2018-12-08T11:46:08.135Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu SSH 遠端登入主機",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-ssh-remote-connection"
    }
  },
  {
    "title": "Ubuntu - 查詢 IP",
    "date": "2018-12-08T11:11:41.311Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu 查詢 IP",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.44, "time": 26400, "words": 88 },
    "slug": "ubuntu-ifconfig-ip",
    "path": "blog/ubuntu-ifconfig-ip",
    "filePath": "blog/ubuntu-ifconfig-ip.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 查詢 IP",
      "datePublished": "2018-12-08T11:11:41.311Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu 查詢 IP",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-ifconfig-ip"
    }
  },
  {
    "title": "Ubuntu - 筆電關上不休眠",
    "date": "2018-12-05T14:30:59.345Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "為了省電就把 Ubuntu 灌在筆電上當成 Server，平常都只會用 SSH 連進去操作，也用不到它的螢幕，不過關上筆電時就會休眠，外部無法連線進去，實在是很難搞，搜尋了一下，找到了改設定的方式",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.67, "time": 40200, "words": 134 },
    "slug": "ubuntu-laptops-close-lcd-not-hibbernate",
    "path": "blog/ubuntu-laptops-close-lcd-not-hibbernate",
    "filePath": "blog/ubuntu-laptops-close-lcd-not-hibbernate.mdx",
    "toc": [{ "value": "參考資料", "url": "#參考資料", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 筆電關上不休眠",
      "datePublished": "2018-12-05T14:30:59.345Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "為了省電就把 Ubuntu 灌在筆電上當成 Server，平常都只會用 SSH 連進去操作，也用不到它的螢幕，不過關上筆電時就會休眠，外部無法連線進去，實在是很難搞，搜尋了一下，找到了改設定的方式",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-laptops-close-lcd-not-hibbernate"
    }
  },
  {
    "title": "MongoDB - (三) Robo 3T",
    "date": "2018-04-07T17:57:59.824Z",
    "tags": ["mongodb"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "基本的下載安裝 Robo 3T 和連線",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.05, "time": 63000, "words": 210 },
    "slug": "mongodb-03-robo-3t",
    "path": "blog/mongodb-03-robo-3t",
    "filePath": "blog/mongodb-03-robo-3t.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MongoDB - (三) Robo 3T",
      "datePublished": "2018-04-07T17:57:59.824Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "基本的下載安裝 Robo 3T 和連線",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mongodb-03-robo-3t"
    }
  },
  {
    "title": "MongoDB - (二) 安裝成服務",
    "date": "2018-04-06T21:20:35.818Z",
    "tags": ["mongodb"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "安裝 MongoDB 變成 Windows Service",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.305, "time": 18300, "words": 61 },
    "slug": "mongodb-02-install-system-service",
    "path": "blog/mongodb-02-install-system-service",
    "filePath": "blog/mongodb-02-install-system-service.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MongoDB - (二) 安裝成服務",
      "datePublished": "2018-04-06T21:20:35.818Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "安裝 MongoDB 變成 Windows Service",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mongodb-02-install-system-service"
    }
  },
  {
    "title": "MongoDB - (一) 安裝",
    "date": "2018-04-05T21:32:50.451Z",
    "tags": ["mongodb"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "安裝 MongoDB",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.035, "time": 62100, "words": 207 },
    "slug": "mongodb-01-install",
    "path": "blog/mongodb-01-install",
    "filePath": "blog/mongodb-01-install.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MongoDB - (一) 安裝",
      "datePublished": "2018-04-05T21:32:50.451Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "安裝 MongoDB",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/mongodb-01-install"
    }
  },
  {
    "title": "Scrum - Retro 熱氣球",
    "date": "2017-09-25T05:39:11.196Z",
    "tags": ["scrum", "retro"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Scrum - Retro 熱氣球",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.765, "time": 45900, "words": 153 },
    "slug": "scrum-retro-hot-air-balloon",
    "path": "blog/scrum-retro-hot-air-balloon",
    "filePath": "blog/scrum-retro-hot-air-balloon.mdx",
    "toc": [
      { "value": "步驟", "url": "#步驟", "depth": 2 },
      { "value": "成果", "url": "#成果", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-9", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Scrum - Retro 熱氣球",
      "datePublished": "2017-09-25T05:39:11.196Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Scrum - Retro 熱氣球",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/scrum-retro-hot-air-balloon"
    }
  },
  {
    "title": "TEDxDadun 2017 從中感動 | 從此行動",
    "date": "2017-09-18T06:00:53.989Z",
    "tags": ["event", "ted"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "TEDxDadun 2017 從中感動 | 從此行動",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "6 min read", "minutes": 5.165, "time": 309900, "words": 1033 },
    "slug": "tedxdadun-2017",
    "path": "blog/tedxdadun-2017",
    "filePath": "blog/tedxdadun-2017.mdx",
    "toc": [
      {
        "value": "Tank - 接受好的環境，勇於改變",
        "url": "#tank---接受好的環境勇於改變",
        "depth": 3
      },
      {
        "value": "蘇仰志 - 演化的新物種 - 未來學校的藍圖與實踐",
        "url": "#蘇仰志---演化的新物種---未來學校的藍圖與實踐",
        "depth": 3
      },
      {
        "value": "路寒袖 - 文字的變形金剛 - 文學生活化",
        "url": "#路寒袖---文字的變形金剛---文學生活化",
        "depth": 3
      },
      {
        "value": "何承育 - 街區美術館－從活動到運動",
        "url": "#何承育---街區美術館從活動到運動",
        "depth": 3
      },
      {
        "value": "許又仁 - 串起每一件不起眼的小事，到一場搖籃到搖籃的循環農業革命",
        "url": "#許又仁---串起每一件不起眼的小事到一場搖籃到搖籃的循環農業革命",
        "depth": 3
      },
      {
        "value": "儲見智 - 用關注延續自身文化命脈",
        "url": "#儲見智---用關注延續自身文化命脈",
        "depth": 3
      },
      {
        "value": "賴靜孄 - 來不及說再見後的新生活運動",
        "url": "#賴靜孄---來不及說再見後的新生活運動",
        "depth": 3
      },
      { "value": "林庭妃 - 原來我可以", "url": "#林庭妃---原來我可以", "depth": 3 },
      {
        "value": "王育麟 - 如何從高精神壓力的職業中存活下來",
        "url": "#王育麟---如何從高精神壓力的職業中存活下來",
        "depth": 3
      }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "TEDxDadun 2017 從中感動 | 從此行動",
      "datePublished": "2017-09-18T06:00:53.989Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "TEDxDadun 2017 從中感動 | 從此行動",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/tedxdadun-2017"
    }
  },
  {
    "title": "MJ 的超級數字力課程",
    "date": "2017-09-11T07:08:54.247Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "MJ 的超級數字力課程",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.85, "time": 411000, "words": 1370 },
    "slug": "course-financemj",
    "path": "blog/course-financemj",
    "filePath": "blog/course-financemj.mdx",
    "toc": [
      { "value": "報名", "url": "#報名-1", "depth": 2 },
      { "value": "讀書", "url": "#讀書", "depth": 2 },
      { "value": "上課", "url": "#上課", "depth": 2 },
      { "value": "課後", "url": "#課後", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "MJ 的超級數字力課程",
      "datePublished": "2017-09-11T07:08:54.247Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "MJ 的超級數字力課程",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/course-financemj"
    }
  },
  {
    "title": "電影 - 不老交響夢 - 因材施教",
    "date": "2017-06-09T15:14:16.968Z",
    "tags": ["movie", "murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "不老交響夢 - 因材施教",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.325, "time": 19500, "words": 65 },
    "slug": "movie-golden-orchestra-02",
    "path": "blog/movie-golden-orchestra-02",
    "filePath": "blog/movie-golden-orchestra-02.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "電影 - 不老交響夢 - 因材施教",
      "datePublished": "2017-06-09T15:14:16.968Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "不老交響夢 - 因材施教",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/movie-golden-orchestra-02"
    }
  },
  {
    "title": "電影 - 不老交響夢 - 把握當下",
    "date": "2017-06-09T14:35:34.112Z",
    "tags": ["movie", "murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "不老交響夢 - 把握當下",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.38, "time": 22800, "words": 76 },
    "slug": "movie-golden-orchestra-01",
    "path": "blog/movie-golden-orchestra-01",
    "filePath": "blog/movie-golden-orchestra-01.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "電影 - 不老交響夢 - 把握當下",
      "datePublished": "2017-06-09T14:35:34.112Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "不老交響夢 - 把握當下",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/movie-golden-orchestra-01"
    }
  },
  {
    "title": "Cmd - Get IIS PID and website",
    "date": "2017-06-08T07:41:29.701Z",
    "tags": ["cmd"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 cmd 下取得 IIS 的 PID 和其相對應的 website",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.505, "time": 30300, "words": 101 },
    "slug": "get-iis-pid-and-website-in-cmd",
    "path": "blog/get-iis-pid-and-website-in-cmd",
    "filePath": "blog/get-iis-pid-and-website-in-cmd.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Cmd - Get IIS PID and website",
      "datePublished": "2017-06-08T07:41:29.701Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 cmd 下取得 IIS 的 PID 和其相對應的 website",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/get-iis-pid-and-website-in-cmd"
    }
  },
  {
    "title": "VSCode - change terminal powershell to cmd",
    "date": "2017-06-07T07:45:14.500Z",
    "tags": ["vscode"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "VSCode 內建的 terminal 改成 cmd",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.35, "time": 21000, "words": 70 },
    "slug": "vscode-change-terminal-powershell-to-cmd",
    "path": "blog/vscode-change-terminal-powershell-to-cmd",
    "filePath": "blog/vscode-change-terminal-powershell-to-cmd.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-8", "depth": 2 },
      { "value": "解法", "url": "#解法-8", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-14", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "VSCode - change terminal powershell to cmd",
      "datePublished": "2017-06-07T07:45:14.500Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "VSCode 內建的 terminal 改成 cmd",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/vscode-change-terminal-powershell-to-cmd"
    }
  },
  {
    "title": "SQL - TSQL Delay",
    "date": "2017-06-07T06:48:19.869Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "TSQL Delay",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.245, "time": 14700, "words": 49 },
    "slug": "sql-tsql-dealy",
    "path": "blog/sql-tsql-dealy",
    "filePath": "blog/sql-tsql-dealy.mdx",
    "toc": [{ "value": "參考連結", "url": "#參考連結-15", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "SQL - TSQL Delay",
      "datePublished": "2017-06-07T06:48:19.869Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "TSQL Delay",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/sql-tsql-dealy"
    }
  },
  {
    "title": "SQL - TSQL Loop",
    "date": "2017-06-06T07:50:19.735Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "TSQL Loop",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.385, "time": 23100, "words": 77 },
    "slug": "sql-tsql-loop",
    "path": "blog/sql-tsql-loop",
    "filePath": "blog/sql-tsql-loop.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "SQL - TSQL Loop",
      "datePublished": "2017-06-06T07:50:19.735Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "TSQL Loop",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/sql-tsql-loop"
    }
  },
  {
    "title": "JS - form submission canceled because the form is not connected",
    "date": "2017-06-05T00:48:44.305Z",
    "tags": ["js"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "javascript form submission canceled because the form is not connected",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.545, "time": 32700, "words": 109 },
    "slug": "js-form-submission-canceled-because-the-form-is-not-connected",
    "path": "blog/js-form-submission-canceled-because-the-form-is-not-connected",
    "filePath": "blog/js-form-submission-canceled-because-the-form-is-not-connected.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-5", "depth": 2 },
      { "value": "原因", "url": "#原因-4", "depth": 2 },
      { "value": "解法", "url": "#解法-5", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-5", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "JS - form submission canceled because the form is not connected",
      "datePublished": "2017-06-05T00:48:44.305Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "javascript form submission canceled because the form is not connected",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/js-form-submission-canceled-because-the-form-is-not-connected"
    }
  },
  {
    "title": "Evernote 使用 app 新增記事時自動設定標題",
    "date": "2017-06-04T00:53:04.148Z",
    "tags": ["everntoe"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Evernote 使用 app 新增記事時自動設定標題",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.505, "time": 30300, "words": 101 },
    "slug": "evernote-app-auto-setting-title",
    "path": "blog/evernote-app-auto-setting-title",
    "filePath": "blog/evernote-app-auto-setting-title.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Evernote 使用 app 新增記事時自動設定標題",
      "datePublished": "2017-06-04T00:53:04.148Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Evernote 使用 app 新增記事時自動設定標題",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/evernote-app-auto-setting-title"
    }
  },
  {
    "title": "C# - linq select get index",
    "date": "2017-06-03T09:13:56.935Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# - linq select get index",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.255, "time": 15300, "words": 51 },
    "slug": "csharp-linq-select-get-index",
    "path": "blog/csharp-linq-select-get-index",
    "filePath": "blog/csharp-linq-select-get-index.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - linq select get index",
      "datePublished": "2017-06-03T09:13:56.935Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# - linq select get index",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-linq-select-get-index"
    }
  },
  {
    "title": "Vue - Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead",
    "date": "2017-06-02T01:16:38.314Z",
    "tags": ["vue"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Vue - Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.415, "time": 24900, "words": 83 },
    "slug": "vue-interpolation-inside-attributes-has-been-removed-use-vbind-or-the-colon-shorthand-instead",
    "path": "blog/vue-interpolation-inside-attributes-has-been-removed-use-vbind-or-the-colon-shorthand-instead",
    "filePath": "blog/vue-interpolation-inside-attributes-has-been-removed-use-vbind-or-the-colon-shorthand-instead.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-9", "depth": 2 },
      { "value": "解法", "url": "#解法-9", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Vue - Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead",
      "datePublished": "2017-06-02T01:16:38.314Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Vue - Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/vue-interpolation-inside-attributes-has-been-removed-use-vbind-or-the-colon-shorthand-instead"
    }
  },
  {
    "title": "SQL Server - 正在啟動資料庫",
    "date": "2017-06-01T09:18:58.149Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "windows 的事件裡面一直出現 正在啟動資料庫",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.21, "time": 12600, "words": 42 },
    "slug": "sql-server-init-database",
    "path": "blog/sql-server-init-database",
    "filePath": "blog/sql-server-init-database.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-6", "depth": 2 },
      { "value": "解法", "url": "#解法-6", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-10", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "SQL Server - 正在啟動資料庫",
      "datePublished": "2017-06-01T09:18:58.149Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "windows 的事件裡面一直出現 正在啟動資料庫",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/sql-server-init-database"
    }
  },
  {
    "title": "VSCode - MSSQL Extension",
    "date": "2017-01-02T03:08:22.750Z",
    "tags": ["vscode"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Visual Studio Code 的 MS SQL 擴充套件",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.375, "time": 202500, "words": 675 },
    "slug": "vscode-mssql-extension",
    "path": "blog/vscode-mssql-extension",
    "filePath": "blog/vscode-mssql-extension.mdx",
    "toc": [
      { "value": "Install Extension", "url": "#install-extension", "depth": 2 },
      { "value": "Connect DB", "url": "#connect-db", "depth": 2 },
      { "value": "Query DB", "url": "#query-db", "depth": 2 },
      { "value": "Change Results Layout", "url": "#change-results-layout", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "VSCode - MSSQL Extension",
      "datePublished": "2017-01-02T03:08:22.750Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Visual Studio Code 的 MS SQL 擴充套件",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/vscode-mssql-extension"
    }
  },
  {
    "title": "Node.js - Url Routing",
    "date": "2016-01-18T11:50:59.609Z",
    "tags": ["nodejs"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Node.js - Url Routing",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.745, "time": 44700, "words": 149 },
    "slug": "nodejs-url-routing-01",
    "path": "blog/nodejs-url-routing-01",
    "filePath": "blog/nodejs-url-routing-01.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Node.js - Url Routing",
      "datePublished": "2016-01-18T11:50:59.609Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Node.js - Url Routing",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/nodejs-url-routing-01"
    }
  },
  {
    "title": "C# - compare string is null or empty",
    "date": "2016-01-18T11:49:14.279Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# - compare string is null or empty",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.85, "time": 51000, "words": 170 },
    "slug": "csharp-compare-string-is-null-or-empty",
    "path": "blog/csharp-compare-string-is-null-or-empty",
    "filePath": "blog/csharp-compare-string-is-null-or-empty.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - compare string is null or empty",
      "datePublished": "2016-01-18T11:49:14.279Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# - compare string is null or empty",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-compare-string-is-null-or-empty"
    }
  },
  {
    "title": "Node.js - Modules",
    "date": "2016-01-17T11:54:38.938Z",
    "tags": ["nodejs"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Node.js - Modules",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.365, "time": 21900, "words": 73 },
    "slug": "nodejs-modules",
    "path": "blog/nodejs-modules",
    "filePath": "blog/nodejs-modules.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Node.js - Modules",
      "datePublished": "2016-01-17T11:54:38.938Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Node.js - Modules",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/nodejs-modules"
    }
  },
  {
    "title": "Jasmine.js - Hello World  (using command line)",
    "date": "2016-01-11T11:56:16.435Z",
    "tags": ["js", "testing"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jasmine using command line",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.755, "time": 45300, "words": 151 },
    "slug": "jasminejs-hello-world-command",
    "path": "blog/jasminejs-hello-world-command",
    "filePath": "blog/jasminejs-hello-world-command.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jasmine.js - Hello World  (using command line)",
      "datePublished": "2016-01-11T11:56:16.435Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jasmine using command line",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jasminejs-hello-world-command"
    }
  },
  {
    "title": "Jasmine.js - Hello World",
    "date": "2016-01-10T10:59:44.050Z",
    "tags": ["js", "testing"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Jasmine",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.675, "time": 40500, "words": 135 },
    "slug": "jasminejs-hello-world",
    "path": "blog/jasminejs-hello-world",
    "filePath": "blog/jasminejs-hello-world.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Jasmine.js - Hello World",
      "datePublished": "2016-01-10T10:59:44.050Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Jasmine",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/jasminejs-hello-world"
    }
  },
  {
    "title": "Node.js - Hello World",
    "date": "2016-01-09T12:03:27.180Z",
    "tags": ["nodejs"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Hello World Node.js",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.55, "time": 33000, "words": 110 },
    "slug": "nodejs-hello-world",
    "path": "blog/nodejs-hello-world",
    "filePath": "blog/nodejs-hello-world.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Node.js - Hello World",
      "datePublished": "2016-01-09T12:03:27.180Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Hello World Node.js",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/nodejs-hello-world"
    }
  },
  {
    "title": "React Form",
    "date": "2015-12-27T12:06:22.455Z",
    "tags": ["js", "react"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "React Form",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.985, "time": 119100, "words": 397 },
    "slug": "react-form",
    "path": "blog/react-form",
    "filePath": "blog/react-form.mdx",
    "toc": [
      { "value": "基本的 Form 操作", "url": "#基本的-form-操作", "depth": 2 },
      { "value": "Lable", "url": "#lable", "depth": 2 },
      { "value": "Select Multiple", "url": "#select-multiple", "depth": 2 },
      { "value": "Radio", "url": "#radio", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "React Form",
      "datePublished": "2015-12-27T12:06:22.455Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "React Form",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/react-form"
    }
  },
  {
    "title": "React - 0.14 getDOMNode Warning",
    "date": "2015-12-26T12:08:42.794Z",
    "tags": ["js", "react"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "React Warning - ReactDOMComponent - Do not access .getDOMNode() of a DOM node; instead, use the node directly. This DOM node was rendered by MyForm.",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.715, "time": 42900, "words": 143 },
    "slug": "react-014-getdomnode-warning",
    "path": "blog/react-014-getdomnode-warning",
    "filePath": "blog/react-014-getdomnode-warning.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-8", "depth": 2 },
      { "value": "原因", "url": "#原因-7", "depth": 2 },
      { "value": "解法", "url": "#解法-8", "depth": 2 },
      { "value": "參考網站", "url": "#參考網站", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "React - 0.14 getDOMNode Warning",
      "datePublished": "2015-12-26T12:08:42.794Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "React Warning - ReactDOMComponent - Do not access .getDOMNode() of a DOM node; instead, use the node directly. This DOM node was rendered by MyForm.",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/react-014-getdomnode-warning"
    }
  },
  {
    "title": "React - Component Lifecycle",
    "date": "2015-12-25T12:11:25.900Z",
    "tags": ["js", "react"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "React Component Lifecycle",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.83, "time": 289800, "words": 966 },
    "slug": "react-component-lifecycle",
    "path": "blog/react-component-lifecycle",
    "filePath": "blog/react-component-lifecycle.mdx",
    "toc": [
      { "value": "實例化", "url": "#實例化", "depth": 2 },
      { "value": "getDefaultProps", "url": "#getdefaultprops", "depth": 3 },
      { "value": "getInitialState", "url": "#getinitialstate", "depth": 3 },
      { "value": "componentWillMount", "url": "#componentwillmount", "depth": 3 },
      { "value": "render", "url": "#render", "depth": 3 },
      { "value": "componentDidMount", "url": "#componentdidmount", "depth": 3 },
      { "value": "存在期", "url": "#存在期", "depth": 2 },
      { "value": "componentWillReceiveProps", "url": "#componentwillreceiveprops", "depth": 3 },
      { "value": "shouldComponentUpdate", "url": "#shouldcomponentupdate", "depth": 3 },
      { "value": "componentWillUpdate", "url": "#componentwillupdate", "depth": 3 },
      { "value": "render", "url": "#render-1", "depth": 2 },
      { "value": "componentDidUpdate", "url": "#componentdidupdate", "depth": 3 },
      { "value": "銷毀 & 清理期", "url": "#銷毀--清理期", "depth": 2 },
      { "value": "componentWillUnmount", "url": "#componentwillunmount", "depth": 3 },
      { "value": "參考連結", "url": "#參考連結-11", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "React - Component Lifecycle",
      "datePublished": "2015-12-25T12:11:25.900Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "React Component Lifecycle",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/react-component-lifecycle"
    }
  },
  {
    "title": "React - JSX Set Property",
    "date": "2015-12-24T12:14:28.398Z",
    "tags": ["js", "react"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "React JSX Set Property",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.97, "time": 58200, "words": 194 },
    "slug": "react-jsx-set-property",
    "path": "blog/react-jsx-set-property",
    "filePath": "blog/react-jsx-set-property.mdx",
    "toc": [
      { "value": "使用三元運算式", "url": "#使用三元運算式", "depth": 3 },
      { "value": "使用變數", "url": "#使用變數", "depth": 3 },
      { "value": "使用函數", "url": "#使用函數", "depth": 3 },
      { "value": "使用 &&", "url": "#使用-", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "React - JSX Set Property",
      "datePublished": "2015-12-24T12:14:28.398Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "React JSX Set Property",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/react-jsx-set-property"
    }
  },
  {
    "title": "Android Studio - Cannot launch AVD in emulator",
    "date": "2015-11-07T12:15:54.943Z",
    "tags": ["android studio"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Android Studio Cannot launch AVD in emulator",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.78, "time": 46800, "words": 156 },
    "slug": "android-studio-cannot-launch-avd",
    "path": "blog/android-studio-cannot-launch-avd",
    "filePath": "blog/android-studio-cannot-launch-avd.mdx",
    "toc": [
      { "value": "問題", "url": "#問題", "depth": 2 },
      { "value": "原因", "url": "#原因", "depth": 2 },
      { "value": "解法", "url": "#解法", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Android Studio - Cannot launch AVD in emulator",
      "datePublished": "2015-11-07T12:15:54.943Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Android Studio Cannot launch AVD in emulator",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/android-studio-cannot-launch-avd"
    }
  },
  {
    "title": "SQL - StoreProcedure Input Date Parameter",
    "date": "2015-10-28T12:18:16.785Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "SQL StoreProcedure Input Date Parameter",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.68, "time": 160800, "words": 536 },
    "slug": "sql-storeprocedure-input-date-parameter",
    "path": "blog/sql-storeprocedure-input-date-parameter",
    "filePath": "blog/sql-storeprocedure-input-date-parameter.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "SQL - StoreProcedure Input Date Parameter",
      "datePublished": "2015-10-28T12:18:16.785Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "SQL StoreProcedure Input Date Parameter",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/sql-storeprocedure-input-date-parameter"
    }
  },
  {
    "title": "C# - String.Empty & \"\"",
    "date": "2015-10-10T12:22:55.471Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# String.Empty & \"\"",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.715, "time": 162900, "words": 543 },
    "slug": "csharp-string-empty",
    "path": "blog/csharp-string-empty",
    "filePath": "blog/csharp-string-empty.mdx",
    "toc": [
      { "value": "歸類出三點", "url": "#歸類出三點", "depth": 2 },
      { "value": "效能比較", "url": "#效能比較", "depth": 2 },
      { "value": "結論", "url": "#結論-3", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - String.Empty & \"\"",
      "datePublished": "2015-10-10T12:22:55.471Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# String.Empty & \"\"",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-string-empty"
    }
  },
  {
    "title": "Opserver Monitoring SQL Server",
    "date": "2015-10-04T12:26:09.606Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Opserver Monitoring SQL Server",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.31, "time": 438600, "words": 1462 },
    "slug": "opserver-monitoring-sql-server",
    "path": "blog/opserver-monitoring-sql-server",
    "filePath": "blog/opserver-monitoring-sql-server.mdx",
    "toc": [
      { "value": "instance", "url": "#instance", "depth": 3 },
      { "value": "總結", "url": "#總結", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Opserver Monitoring SQL Server",
      "datePublished": "2015-10-04T12:26:09.606Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Opserver Monitoring SQL Server",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/opserver-monitoring-sql-server"
    }
  },
  {
    "title": "C# - WinForm ComboBox (DropDownList) Simple Use",
    "date": "2015-10-03T12:31:49.695Z",
    "tags": ["c#", "winform"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "WinForm ComboBox (DropDownList) Simple Use",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.745, "time": 104700, "words": 349 },
    "slug": "winform-combobox-simple-use",
    "path": "blog/winform-combobox-simple-use",
    "filePath": "blog/winform-combobox-simple-use.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - WinForm ComboBox (DropDownList) Simple Use",
      "datePublished": "2015-10-03T12:31:49.695Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "WinForm ComboBox (DropDownList) Simple Use",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/winform-combobox-simple-use"
    }
  },
  {
    "title": "C# - GeoIP Search IP Location",
    "date": "2015-09-29T12:38:31.139Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# - GeoIP Search IP Location",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.995, "time": 239700, "words": 799 },
    "slug": "geoip-search-ip-location",
    "path": "blog/geoip-search-ip-location",
    "filePath": "blog/geoip-search-ip-location.mdx",
    "toc": [{ "value": "比對產出結果", "url": "#比對產出結果", "depth": 2 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - GeoIP Search IP Location",
      "datePublished": "2015-09-29T12:38:31.139Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# - GeoIP Search IP Location",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/geoip-search-ip-location"
    }
  },
  {
    "title": "Ubuntu - Installing and Using 7zip",
    "date": "2015-09-28T12:42:52.174Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Ubuntu Installing and Using 7zip",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.955, "time": 57300, "words": 191 },
    "slug": "ubuntu-installing-and-using-7zip",
    "path": "blog/ubuntu-installing-and-using-7zip",
    "filePath": "blog/ubuntu-installing-and-using-7zip.mdx",
    "toc": [
      { "value": "Install", "url": "#install-1", "depth": 2 },
      { "value": "Use", "url": "#use-1", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-13", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - Installing and Using 7zip",
      "datePublished": "2015-09-28T12:42:52.174Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Ubuntu Installing and Using 7zip",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-installing-and-using-7zip"
    }
  },
  {
    "title": "Ubuntu Installing Java 8",
    "date": "2015-09-09T12:45:28.795Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": null,
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.105, "time": 6300, "words": 21 },
    "slug": "ubuntu-installing-java-8",
    "path": "blog/ubuntu-installing-java-8",
    "filePath": "blog/ubuntu-installing-java-8.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu Installing Java 8",
      "datePublished": "2015-09-09T12:45:28.795Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": null,
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-installing-java-8"
    }
  },
  {
    "title": "ASP.NET MVC - 發佈後找不到 View 問題",
    "date": "2015-08-24T12:47:36.281Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC 發佈後找不到 View 問題",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.32, "time": 19200, "words": 64 },
    "slug": "asp-net-mvc-view-file-not-found",
    "path": "blog/asp-net-mvc-view-file-not-found",
    "filePath": "blog/asp-net-mvc-view-file-not-found.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-2", "depth": 2 },
      { "value": "原因", "url": "#原因-2", "depth": 2 },
      { "value": "解法", "url": "#解法-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 發佈後找不到 View 問題",
      "datePublished": "2015-08-24T12:47:36.281Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC 發佈後找不到 View 問題",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-mvc-view-file-not-found"
    }
  },
  {
    "title": "C# - 6.0 Exception Filters",
    "date": "2015-08-01T13:02:01.961Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 6.0 Exception Filters",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.405, "time": 24300, "words": 81 },
    "slug": "csharp-6-exception-filters",
    "path": "blog/csharp-6-exception-filters",
    "filePath": "blog/csharp-6-exception-filters.mdx",
    "toc": [
      { "value": "Before C# 6", "url": "#before-c-6-2", "depth": 2 },
      { "value": "C# 6", "url": "#c-6-2", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 6.0 Exception Filters",
      "datePublished": "2015-08-01T13:02:01.961Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 6.0 Exception Filters",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-6-exception-filters"
    }
  },
  {
    "title": "ASP.NET MVC - 無法載入檔案或組件 'XXX' 或其相依性的其中之一 的問題",
    "date": "2015-07-28T13:38:58.367Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC 無法載入檔案或組件 'XXX' 或其相依性的其中之一 的問題",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.87, "time": 52200, "words": 174 },
    "slug": "asp-net-mvc-could-not-load-file-or-assembly",
    "path": "blog/asp-net-mvc-could-not-load-file-or-assembly",
    "filePath": "blog/asp-net-mvc-could-not-load-file-or-assembly.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-1", "depth": 2 },
      { "value": "原因", "url": "#原因-1", "depth": 2 },
      { "value": "解法", "url": "#解法-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 無法載入檔案或組件 'XXX' 或其相依性的其中之一 的問題",
      "datePublished": "2015-07-28T13:38:58.367Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC 無法載入檔案或組件 'XXX' 或其相依性的其中之一 的問題",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/asp-net-mvc-could-not-load-file-or-assembly"
    }
  },
  {
    "title": "SQL - 建立 DB Diagram 時發生找不到預存程序 XXX.dbo.sp_helpdiagrams",
    "date": "2015-07-15T13:41:52.099Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "SQL 建立 DB Diagram 時發生找不到預存程序 XXX.dbo.sp_helpdiagrams",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.395, "time": 23700, "words": 79 },
    "slug": "sql-db-diagram-not-found-dbo-sphelpdiagrams",
    "path": "blog/sql-db-diagram-not-found-dbo-sphelpdiagrams",
    "filePath": "blog/sql-db-diagram-not-found-dbo-sphelpdiagrams.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-7", "depth": 2 },
      { "value": "解法", "url": "#解法-7", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-11", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "SQL - 建立 DB Diagram 時發生找不到預存程序 XXX.dbo.sp_helpdiagrams",
      "datePublished": "2015-07-15T13:41:52.099Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "SQL 建立 DB Diagram 時發生找不到預存程序 XXX.dbo.sp_helpdiagrams",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/sql-db-diagram-not-found-dbo-sphelpdiagrams"
    }
  },
  {
    "title": "EntityFramework - Code First 產生 DB 在建立 Diagram 時發生沒有有效的擁有者問題",
    "date": "2015-07-14T13:47:16.249Z",
    "tags": ["ef", "sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework Code First 產生 DB 在建立 Diagram 時發生沒有有效的擁有者問題",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.405, "time": 24300, "words": 81 },
    "slug": "entityframework-code-first-sql-diagram-not-dbowner",
    "path": "blog/entityframework-code-first-sql-diagram-not-dbowner",
    "filePath": "blog/entityframework-code-first-sql-diagram-not-dbowner.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-3", "depth": 2 },
      { "value": "解法", "url": "#解法-3", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - Code First 產生 DB 在建立 Diagram 時發生沒有有效的擁有者問題",
      "datePublished": "2015-07-14T13:47:16.249Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework Code First 產生 DB 在建立 Diagram 時發生沒有有效的擁有者問題",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-code-first-sql-diagram-not-dbowner"
    }
  },
  {
    "title": "Git - Push Error The remote end hung up unexpectedly",
    "date": "2015-06-30T13:52:13.896Z",
    "tags": ["git"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Git Push Error The remote end hung up unexpectedly",
    "images": ["https://image.cashwu.com/git.webp"],
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.605, "time": 36300, "words": 121 },
    "slug": "git-push-error-the-remote-end-hung-up-unexpectedly",
    "path": "blog/git-push-error-the-remote-end-hung-up-unexpectedly",
    "filePath": "blog/git-push-error-the-remote-end-hung-up-unexpectedly.mdx",
    "toc": [
      { "value": "問題", "url": "#問題-11", "depth": 2 },
      { "value": "原因", "url": "#原因-6", "depth": 2 },
      { "value": "解法", "url": "#解法-11", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-52", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Git - Push Error The remote end hung up unexpectedly",
      "datePublished": "2015-06-30T13:52:13.896Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Git Push Error The remote end hung up unexpectedly",
      "image": "https://image.cashwu.com/git.webp",
      "url": "https://blog.cashwu.com/blog/git-push-error-the-remote-end-hung-up-unexpectedly"
    }
  },
  {
    "title": "Node.js - webpack-dev-server",
    "date": "2015-06-29T13:54:24.903Z",
    "tags": ["nodejs"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Node.js webpack-dev-server",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.12, "time": 67200, "words": 224 },
    "slug": "nodejs-webpack-dev-server",
    "path": "blog/nodejs-webpack-dev-server",
    "filePath": "blog/nodejs-webpack-dev-server.mdx",
    "toc": [
      { "value": "安裝", "url": "#安裝-2", "depth": 2 },
      { "value": "使用", "url": "#使用-1", "depth": 2 },
      { "value": "注意事項", "url": "#注意事項-1", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-7", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Node.js - webpack-dev-server",
      "datePublished": "2015-06-29T13:54:24.903Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Node.js webpack-dev-server",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/nodejs-webpack-dev-server"
    }
  },
  {
    "title": "JS - ES6 for-of",
    "date": "2015-06-28T13:57:40.807Z",
    "tags": ["js"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "JS ES6 for-of",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.46, "time": 27600, "words": 92 },
    "slug": "js-es6-for-of",
    "path": "blog/js-es6-for-of",
    "filePath": "blog/js-es6-for-of.mdx",
    "toc": [
      { "value": "ES5 for-in Array", "url": "#es5-for-in-array", "depth": 2 },
      { "value": "ES6 for-of Array", "url": "#es6-for-of-array", "depth": 2 },
      { "value": "ES5 for-in String", "url": "#es5-for-in-string", "depth": 2 },
      { "value": "ES6 for-of String", "url": "#es6-for-of-string", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "JS - ES6 for-of",
      "datePublished": "2015-06-28T13:57:40.807Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "JS ES6 for-of",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/js-es6-for-of"
    }
  },
  {
    "title": "Cmd - Open Folder",
    "date": "2015-06-21T13:59:29.208Z",
    "tags": ["cmd"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Cmd Open Folder",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.28, "time": 16800, "words": 56 },
    "slug": "windows-command-open-folder",
    "path": "blog/windows-command-open-folder",
    "filePath": "blog/windows-command-open-folder.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Cmd - Open Folder",
      "datePublished": "2015-06-21T13:59:29.208Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Cmd Open Folder",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/windows-command-open-folder"
    }
  },
  {
    "title": "C# - 6.0 Expression Body ( Functions and Properties )",
    "date": "2015-06-18T14:05:11.562Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 6.0 Expression Body ( Functions and Properties )",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.28, "time": 16800, "words": 56 },
    "slug": "csharp-6-expression-body",
    "path": "blog/csharp-6-expression-body",
    "filePath": "blog/csharp-6-expression-body.mdx",
    "toc": [
      { "value": "Before C# 6", "url": "#before-c-6-1", "depth": 2 },
      { "value": "C# 6", "url": "#c-6-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 6.0 Expression Body ( Functions and Properties )",
      "datePublished": "2015-06-18T14:05:11.562Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 6.0 Expression Body ( Functions and Properties )",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-6-expression-body"
    }
  },
  {
    "title": "C# - 6.0 Index Initializers",
    "date": "2015-06-18T06:02:54.181Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 6.0 Index Initializers",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.45, "time": 27000, "words": 90 },
    "slug": "csharp-6-index-initializers",
    "path": "blog/csharp-6-index-initializers",
    "filePath": "blog/csharp-6-index-initializers.mdx",
    "toc": [
      { "value": "Before C# 6", "url": "#before-c-6-4", "depth": 2 },
      { "value": "C# 6", "url": "#c-6-4", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 6.0 Index Initializers",
      "datePublished": "2015-06-18T06:02:54.181Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 6.0 Index Initializers",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-6-index-initializers"
    }
  },
  {
    "title": "C# - 6.0 Auto Property Initializers",
    "date": "2015-06-17T14:09:06.744Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 6.0 Auto Property Initializers",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.185, "time": 11100, "words": 37 },
    "slug": "csharp-6-auto-property-initializers",
    "path": "blog/csharp-6-auto-property-initializers",
    "filePath": "blog/csharp-6-auto-property-initializers.mdx",
    "toc": [
      { "value": "Before C# 6", "url": "#before-c-6", "depth": 2 },
      { "value": "C# 6", "url": "#c-6", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 6.0 Auto Property Initializers",
      "datePublished": "2015-06-17T14:09:06.744Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 6.0 Auto Property Initializers",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-6-auto-property-initializers"
    }
  },
  {
    "title": "C# - 6.0 Interpolated Strings",
    "date": "2015-06-15T14:12:30.006Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 6.0 Interpolated Strings",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.565, "time": 33900, "words": 113 },
    "slug": "csharp-6-interpolated-strings",
    "path": "blog/csharp-6-interpolated-strings",
    "filePath": "blog/csharp-6-interpolated-strings.mdx",
    "toc": [
      { "value": "Before C# 6", "url": "#before-c-6-3", "depth": 2 },
      { "value": "C# 6", "url": "#c-6-3", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 6.0 Interpolated Strings",
      "datePublished": "2015-06-15T14:12:30.006Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 6.0 Interpolated Strings",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-6-interpolated-strings"
    }
  },
  {
    "title": "C# - 6.0 Null Conditional Operator",
    "date": "2015-06-15T14:10:59.602Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 6.0 Null Conditional Operator",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.68, "time": 40800, "words": 136 },
    "slug": "csharp-6-null-conditional-operator",
    "path": "blog/csharp-6-null-conditional-operator",
    "filePath": "blog/csharp-6-null-conditional-operator.mdx",
    "toc": [
      { "value": "Before C# 6", "url": "#before-c-6-5", "depth": 2 },
      { "value": "C# 6", "url": "#c-6-5", "depth": 2 },
      { "value": "Before C# 6", "url": "#before-c-6-6", "depth": 2 },
      { "value": "C# 6", "url": "#c-6-6", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 6.0 Null Conditional Operator",
      "datePublished": "2015-06-15T14:10:59.602Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 6.0 Null Conditional Operator",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-6-null-conditional-operator"
    }
  },
  {
    "title": "C# - Easy Convert Array from XML Format",
    "date": "2015-06-14T14:20:47.718Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# Easy Convert Array from XML Format",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.29, "time": 17400, "words": 58 },
    "slug": "csharp-easy-convert-array-from-xml-format",
    "path": "blog/csharp-easy-convert-array-from-xml-format",
    "filePath": "blog/csharp-easy-convert-array-from-xml-format.mdx",
    "toc": [
      { "value": "XML File", "url": "#xml-file", "depth": 2 },
      { "value": "Mapping Class", "url": "#mapping-class", "depth": 2 },
      { "value": "注意事項", "url": "#注意事項", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - Easy Convert Array from XML Format",
      "datePublished": "2015-06-14T14:20:47.718Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# Easy Convert Array from XML Format",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-easy-convert-array-from-xml-format"
    }
  },
  {
    "title": "EntityFramework - Eager Loading",
    "date": "2015-06-12T14:34:29.827Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework Eager Loading",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.67, "time": 40200, "words": 134 },
    "slug": "entityframework-eager-loading",
    "path": "blog/entityframework-eager-loading",
    "filePath": "blog/entityframework-eager-loading.mdx",
    "toc": [{ "value": "注意事項", "url": "#注意事項", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - Eager Loading",
      "datePublished": "2015-06-12T14:34:29.827Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework Eager Loading",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-eager-loading"
    }
  },
  {
    "title": "EntityFramework - Disabled LazyLoading Manually Load Data",
    "date": "2015-06-12T14:27:52.742Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework Disabled LazyLoading Manually Load Data",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.315, "time": 18900, "words": 63 },
    "slug": "entityframework-disabled-lazyloading-load-data",
    "path": "blog/entityframework-disabled-lazyloading-load-data",
    "filePath": "blog/entityframework-disabled-lazyloading-load-data.mdx",
    "toc": [
      {
        "value": "關閉 LazyLoading 後，手動載入資料的作法",
        "url": "#關閉-lazyloading-後手動載入資料的作法",
        "depth": 3
      }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - Disabled LazyLoading Manually Load Data",
      "datePublished": "2015-06-12T14:27:52.742Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework Disabled LazyLoading Manually Load Data",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-disabled-lazyloading-load-data"
    }
  },
  {
    "title": "EntityFramework - Log to File",
    "date": "2015-06-12T14:26:03.937Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework Log to File",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.285, "time": 17100, "words": 57 },
    "slug": "entityframework-log-to-file",
    "path": "blog/entityframework-log-to-file",
    "filePath": "blog/entityframework-log-to-file.mdx",
    "toc": [{ "value": "注意事項", "url": "#注意事項-1", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - Log to File",
      "datePublished": "2015-06-12T14:26:03.937Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework Log to File",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-log-to-file"
    }
  },
  {
    "title": "EntityFramework - Concurrency Mode",
    "date": "2015-06-12T06:22:14.323Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework Concurrency Mode",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.47, "time": 28200, "words": 94 },
    "slug": "entityframework-concurrency-mode",
    "path": "blog/entityframework-concurrency-mode",
    "filePath": "blog/entityframework-concurrency-mode.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - Concurrency Mode",
      "datePublished": "2015-06-12T06:22:14.323Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework Concurrency Mode",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-concurrency-mode"
    }
  },
  {
    "title": "EntityFramework - DbEntityEntry State",
    "date": "2015-06-11T14:43:58.816Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework DbEntityEntry State",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.425, "time": 25500, "words": 85 },
    "slug": "entityframework-dbentityentry-state",
    "path": "blog/entityframework-dbentityentry-state",
    "filePath": "blog/entityframework-dbentityentry-state.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - DbEntityEntry State",
      "datePublished": "2015-06-11T14:43:58.816Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework DbEntityEntry State",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-dbentityentry-state"
    }
  },
  {
    "title": "EntityFramework - DisconnectedEntity",
    "date": "2015-06-11T14:42:46.591Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework DisconnectedEntity",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.535, "time": 32100, "words": 107 },
    "slug": "entityframework-disconnected-entity",
    "path": "blog/entityframework-disconnected-entity",
    "filePath": "blog/entityframework-disconnected-entity.mdx",
    "toc": [
      {
        "value": "EntityFramework disconnect 2 connect",
        "url": "#entityframework-disconnect-2-connect",
        "depth": 3
      },
      { "value": "修改狀態時導覽屬性的連動", "url": "#修改狀態時導覽屬性的連動", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - DisconnectedEntity",
      "datePublished": "2015-06-11T14:42:46.591Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework DisconnectedEntity",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-disconnected-entity"
    }
  },
  {
    "title": "EntityFramework - Override SaveChange",
    "date": "2015-06-11T14:39:17.906Z",
    "tags": ["ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "EntityFramework Override SaveChange",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.43, "time": 25800, "words": 86 },
    "slug": "entityframework-override-savechange",
    "path": "blog/entityframework-override-savechange",
    "filePath": "blog/entityframework-override-savechange.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "EntityFramework - Override SaveChange",
      "datePublished": "2015-06-11T14:39:17.906Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "EntityFramework Override SaveChange",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/entityframework-override-savechange"
    }
  },
  {
    "title": "Node.js - Simple Http-Server",
    "date": "2015-06-02T00:11:21.317Z",
    "tags": ["nodejs"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Node.js Simple Http-Server",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.705, "time": 42300, "words": 141 },
    "slug": "nodejs-simple-http-server",
    "path": "blog/nodejs-simple-http-server",
    "filePath": "blog/nodejs-simple-http-server.mdx",
    "toc": [
      { "value": "安裝", "url": "#安裝-1", "depth": 2 },
      { "value": "使用", "url": "#使用", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-6", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Node.js - Simple Http-Server",
      "datePublished": "2015-06-02T00:11:21.317Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Node.js Simple Http-Server",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/nodejs-simple-http-server"
    }
  },
  {
    "title": "C# - Simple FileStream Write and Read",
    "date": "2015-05-27T00:14:28.284Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# Simple FileStream Write and Read",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.355, "time": 21300, "words": 71 },
    "slug": "csharp-simple-streamwriter-and-streamreader",
    "path": "blog/csharp-simple-streamwriter-and-streamreader",
    "filePath": "blog/csharp-simple-streamwriter-and-streamreader.mdx",
    "toc": [
      { "value": "FileStream Write", "url": "#filestream-write", "depth": 2 },
      { "value": "FileStream Simple Read", "url": "#filestream-simple-read", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - Simple FileStream Write and Read",
      "datePublished": "2015-05-27T00:14:28.284Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# Simple FileStream Write and Read",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-simple-streamwriter-and-streamreader"
    }
  },
  {
    "title": "C# - Simple StreamWriter and StreamReader",
    "date": "2015-05-27T00:13:24.685Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# Simple StreamWriter and StreamReader",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.17, "time": 10200, "words": 34 },
    "slug": "csharp-simple-filestream-write-and-read",
    "path": "blog/csharp-simple-filestream-write-and-read",
    "filePath": "blog/csharp-simple-filestream-write-and-read.mdx",
    "toc": [
      { "value": "StreamWriter", "url": "#streamwriter", "depth": 2 },
      { "value": "StreamReader", "url": "#streamreader", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - Simple StreamWriter and StreamReader",
      "datePublished": "2015-05-27T00:13:24.685Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# Simple StreamWriter and StreamReader",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-simple-filestream-write-and-read"
    }
  },
  {
    "title": "C# - 數字轉換和四捨五入",
    "date": "2015-05-18T00:15:21.161Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 數字轉換和四捨五入",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.34, "time": 140400, "words": 468 },
    "slug": "csharp-number-convert",
    "path": "blog/csharp-number-convert",
    "filePath": "blog/csharp-number-convert.mdx",
    "toc": [
      { "value": "強制型別轉換", "url": "#強制型別轉換", "depth": 2 },
      { "value": "Convert.ToInt32", "url": "#converttoint32-1", "depth": 2 },
      { "value": "Math.Round", "url": "#mathround", "depth": 2 },
      { "value": "Math.Floor", "url": "#mathfloor", "depth": 2 },
      { "value": "Math.Ceiling", "url": "#mathceiling", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-2", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 數字轉換和四捨五入",
      "datePublished": "2015-05-18T00:15:21.161Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 數字轉換和四捨五入",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-number-convert"
    }
  },
  {
    "title": "C# - 使用 Conditional 取代 if",
    "date": "2015-05-16T00:16:19.267Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 使用 Conditional 取代 if",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.31, "time": 78600, "words": 262 },
    "slug": "csharp-conditional",
    "path": "blog/csharp-conditional",
    "filePath": "blog/csharp-conditional.mdx",
    "toc": [{ "value": "參考連結", "url": "#參考連結-1", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 使用 Conditional 取代 if",
      "datePublished": "2015-05-16T00:16:19.267Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 使用 Conditional 取代 if",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-conditional"
    }
  },
  {
    "title": "Windows notepad ANSI, Unicode, UTF-8 File Length",
    "date": "2015-05-13T00:17:31.984Z",
    "tags": ["windows"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Windows notepad ANSI, Unicode, UTF-8 File Length",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.965, "time": 57900, "words": 193 },
    "slug": "windows-notepad-ansi-unicode-utf8-file-length",
    "path": "blog/windows-notepad-ansi-unicode-utf8-file-length",
    "filePath": "blog/windows-notepad-ansi-unicode-utf8-file-length.mdx",
    "toc": [
      { "value": "ANSI", "url": "#ansi", "depth": 2 },
      { "value": "Unicode", "url": "#unicode", "depth": 2 },
      { "value": "UTF-8", "url": "#utf-8", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-19", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Windows notepad ANSI, Unicode, UTF-8 File Length",
      "datePublished": "2015-05-13T00:17:31.984Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Windows notepad ANSI, Unicode, UTF-8 File Length",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/windows-notepad-ansi-unicode-utf8-file-length"
    }
  },
  {
    "title": "WebStorm - TypeScript Accessors Setting",
    "date": "2015-05-11T00:19:19.404Z",
    "tags": ["webstorm", "typescript"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "WebStorm TypeScriptCompilerParams",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.78, "time": 46800, "words": 156 },
    "slug": "typescript-accessors-webstorm-setting",
    "path": "blog/typescript-accessors-webstorm-setting",
    "filePath": "blog/typescript-accessors-webstorm-setting.mdx",
    "toc": [{ "value": "參考連結", "url": "#參考連結-12", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "WebStorm - TypeScript Accessors Setting",
      "datePublished": "2015-05-11T00:19:19.404Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "WebStorm TypeScriptCompilerParams",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/typescript-accessors-webstorm-setting"
    }
  },
  {
    "title": "Git - 第一次學 Git 就上手 - 01 建立第一個 Git 版控",
    "date": "2015-02-08T00:22:12.349Z",
    "tags": ["git"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Git 第一次學 Git 就上手 01 建立第一個 Git 版控",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.465, "time": 147900, "words": 493 },
    "slug": "git-first-learn-01",
    "path": "blog/git-first-learn-01",
    "filePath": "blog/git-first-learn-01.mdx",
    "toc": [
      { "value": "建立一個本地儲存庫", "url": "#建立一個本地儲存庫", "depth": 4 },
      { "value": "把檔案加入版控", "url": "#把檔案加入版控", "depth": 4 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Git - 第一次學 Git 就上手 - 01 建立第一個 Git 版控",
      "datePublished": "2015-02-08T00:22:12.349Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Git 第一次學 Git 就上手 01 建立第一個 Git 版控",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/git-first-learn-01"
    }
  },
  {
    "title": "C# - 三元運算式 & Nullable",
    "date": "2015-01-24T00:25:02.851Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# 三元運算式 & Nullable",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.575, "time": 94500, "words": 315 },
    "slug": "csharp-conditional-ternary-nullable-type",
    "path": "blog/csharp-conditional-ternary-nullable-type",
    "filePath": "blog/csharp-conditional-ternary-nullable-type.mdx",
    "toc": [{ "value": "後記", "url": "#後記-20", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - 三元運算式 & Nullable",
      "datePublished": "2015-01-24T00:25:02.851Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# 三元運算式 & Nullable",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-conditional-ternary-nullable-type"
    }
  },
  {
    "title": "DB Project - SQL 71558 Warnings",
    "date": "2015-01-07T00:26:02.832Z",
    "tags": ["sql"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "DB Project SQL 71558 Warnings",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.18, "time": 70800, "words": 236 },
    "slug": "db-project-sql-71558-warnings",
    "path": "blog/db-project-sql-71558-warnings",
    "filePath": "blog/db-project-sql-71558-warnings.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "DB Project - SQL 71558 Warnings",
      "datePublished": "2015-01-07T00:26:02.832Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "DB Project SQL 71558 Warnings",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/db-project-sql-71558-warnings"
    }
  },
  {
    "title": "C# - CLI、CIL、CLR 和 CTS",
    "date": "2015-01-06T00:27:48.197Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# CLI、CIL、CLR 和 CTS",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.795, "time": 107700, "words": 359 },
    "slug": "csharp-cli-cil-clr-cts",
    "path": "blog/csharp-cli-cil-clr-cts",
    "filePath": "blog/csharp-cli-cil-clr-cts.mdx",
    "toc": [
      {
        "value": "Common Language Infrastructure (CLI)",
        "url": "#common-language-infrastructure-cli",
        "depth": 2
      },
      { "value": "通用語言基礎架構", "url": "#通用語言基礎架構", "depth": 3 },
      {
        "value": "Common Intermediate Language (CIL)",
        "url": "#common-intermediate-language-cil",
        "depth": 2
      },
      { "value": "通用中間語言", "url": "#通用中間語言", "depth": 3 },
      {
        "value": "Common Language Runtime (CLR)",
        "url": "#common-language-runtime-clr",
        "depth": 2
      },
      { "value": "通用語言執行平台", "url": "#通用語言執行平台", "depth": 3 },
      { "value": "Common Type System (CTS)", "url": "#common-type-system-cts", "depth": 2 },
      { "value": "通用型別系統", "url": "#通用型別系統", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - CLI、CIL、CLR 和 CTS",
      "datePublished": "2015-01-06T00:27:48.197Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# CLI、CIL、CLR 和 CTS",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-cli-cil-clr-cts"
    }
  },
  {
    "title": "About 2014",
    "date": "2015-01-04T02:18:30.726Z",
    "tags": ["murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "About 2014",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.36, "time": 201600, "words": 672 },
    "slug": "about-2014",
    "path": "blog/about-2014",
    "filePath": "blog/about-2014.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "About 2014",
      "datePublished": "2015-01-04T02:18:30.726Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "About 2014",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/about-2014"
    }
  },
  {
    "title": "Course - RWD",
    "date": "2014-10-31T18:25:09.887Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "RWD Course",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.52, "time": 511200, "words": 1704 },
    "slug": "rwd-course",
    "path": "blog/rwd-course",
    "filePath": "blog/rwd-course.mdx",
    "toc": [
      { "value": "RWD 常問的問題", "url": "#rwd-常問的問題", "depth": 2 },
      { "value": "1、該用用什麼工具規劃 RWD ?", "url": "#1該用用什麼工具規劃-rwd-", "depth": 3 },
      {
        "value": "2、要從手機開始規劃還是桌機開始 ?",
        "url": "#2要從手機開始規劃還是桌機開始-",
        "depth": 3
      },
      { "value": "3、資訊流如何規劃與呈現 ?", "url": "#3資訊流如何規劃與呈現-", "depth": 3 },
      {
        "value": "4、多裝置 layout patterns 有哪幾種 ?",
        "url": "#4多裝置-layout-patterns-有哪幾種-",
        "depth": 3
      },
      { "value": "5、畫面縮放時，元件如何取捨", "url": "#5畫面縮放時元件如何取捨", "depth": 3 },
      {
        "value": "6、企劃、設計該具備的 RWD 知識",
        "url": "#6企劃設計該具備的-rwd-知識",
        "depth": 3
      },
      {
        "value": "Flexible Layout 流動式網格佈局",
        "url": "#flexible-layout-流動式網格佈局",
        "depth": 2
      },
      { "value": "viewport", "url": "#viewport", "depth": 2 },
      { "value": "Flexible Grid System", "url": "#flexible-grid-system", "depth": 2 },
      { "value": "客製化 Layout", "url": "#客製化-layout", "depth": 2 },
      {
        "value": "怎麼知道 media query 的寬度要設多少 ?",
        "url": "#怎麼知道-media-query-的寬度要設多少-",
        "depth": 3
      },
      { "value": "Boostrap Grid System", "url": "#boostrap-grid-system", "depth": 2 },
      { "value": "不同裝置的權重 (優先順序)", "url": "#不同裝置的權重-優先順序", "depth": 3 },
      { "value": "從 第 2 格開始 佔 10 格", "url": "#從-第-2-格開始-佔-10-格", "depth": 3 },
      { "value": "巢狀", "url": "#巢狀", "depth": 3 },
      { "value": "使用 boostrap 作 float 排版", "url": "#使用-boostrap-作-float-排版", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Course - RWD",
      "datePublished": "2014-10-31T18:25:09.887Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "RWD Course",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/rwd-course"
    }
  },
  {
    "title": "Course - 網頁實戰入門 (HTML x CSS) Class Day 02",
    "date": "2014-08-31T02:26:15.370Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Course - 網頁實戰入門 (HTML x CSS) Class Day 02",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.715, "time": 462900, "words": 1543 },
    "slug": "html-css-course-day-02",
    "path": "blog/html-css-course-day-02",
    "filePath": "blog/html-css-course-day-02.mdx",
    "toc": [
      { "value": "會影響 layout 排版", "url": "#會影響-layout-排版", "depth": 2 },
      { "value": "max-width 最大寬度", "url": "#max-width-最大寬度", "depth": 2 },
      { "value": "Box Model", "url": "#box-model", "depth": 2 },
      { "value": "box-sizing", "url": "#box-sizing", "depth": 2 },
      { "value": "float 排版", "url": "#float-排版", "depth": 2 },
      { "value": "position", "url": "#position", "depth": 2 },
      { "value": "display inline-block", "url": "#display-inline-block", "depth": 2 },
      { "value": "SMACSS - Module", "url": "#smacss---module", "depth": 2 },
      { "value": "清除浮動時：", "url": "#清除浮動時", "depth": 2 },
      { "value": "排版相關注意事項：", "url": "#排版相關注意事項", "depth": 2 },
      { "value": "SASS 修改 config.rb 建議", "url": "#sass-修改-configrb-建議", "depth": 2 },
      {
        "value": "如果是現有專案要導入 scss 的話",
        "url": "#如果是現有專案要導入-scss-的話",
        "depth": 2
      },
      {
        "value": "如果要把 import 的檔案 compile 成一個檔案，就把 scss 的檔名 改成 \"_\" 開頭，這樣子就會變成一個檔案",
        "url": "#如果要把-import-的檔案-compile-成一個檔案就把-scss-的檔名-改成-_-開頭這樣子就會變成一個檔案",
        "depth": 3
      }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Course - 網頁實戰入門 (HTML x CSS) Class Day 02",
      "datePublished": "2014-08-31T02:26:15.370Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Course - 網頁實戰入門 (HTML x CSS) Class Day 02",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/html-css-course-day-02"
    }
  },
  {
    "title": "Course - TDD Day 02",
    "date": "2014-08-30T02:28:39.520Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Course TDD Day 02",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.595, "time": 395700, "words": 1319 },
    "slug": "course-tdd-day-02",
    "path": "blog/course-tdd-day-02",
    "filePath": "blog/course-tdd-day-02.mdx",
    "toc": [
      { "value": "程式碼複雜度", "url": "#程式碼複雜度", "depth": 2 },
      { "value": "Web 重構流程", "url": "#web-重構流程", "depth": 2 },
      { "value": "重構 Tips", "url": "#重構-tips", "depth": 2 },
      { "value": "RIP TDD (from Kent Beck)", "url": "#rip-tdd-from-kent-beck", "depth": 2 },
      { "value": "TDD", "url": "#tdd", "depth": 2 },
      {
        "value": "想像寫一個功能就是在拯救使用者",
        "url": "#想像寫一個功能就是在拯救使用者",
        "depth": 3
      },
      { "value": "為什麼 TDD 不夠", "url": "#為什麼-tdd-不夠", "depth": 2 },
      {
        "value": "TDD is Action : ATDD (Acceptance) + BDD + TDD",
        "url": "#tdd-is-action--atdd-acceptance--bdd--tdd",
        "depth": 2
      },
      { "value": "What BDD ?", "url": "#what-bdd-", "depth": 2 },
      { "value": "Why BDD ?", "url": "#why-bdd-", "depth": 2 },
      {
        "value": "Specflow - Cucumber .NET 分支",
        "url": "#specflow---cucumber-net-分支",
        "depth": 2
      },
      {
        "value": "撰寫 step 中的測試程式，強迫思考 production code 的設計",
        "url": "#撰寫-step-中的測試程式強迫思考-production-code-的設計",
        "depth": 3
      },
      { "value": "What You Learn", "url": "#what-you-learn", "depth": 2 },
      {
        "value": "一般來說 asp.net mvc Model 會分成",
        "url": "#一般來說-aspnet-mvc-model-會分成",
        "depth": 2
      },
      { "value": "BDD", "url": "#bdd", "depth": 2 },
      { "value": "好課程請參考 SkillTree", "url": "#好課程請參考-skilltree-1", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Course - TDD Day 02",
      "datePublished": "2014-08-30T02:28:39.520Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Course TDD Day 02",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/course-tdd-day-02"
    }
  },
  {
    "title": "Course - 網頁實戰入門 (HTML x CSS) Day 01",
    "date": "2014-08-24T02:34:34.488Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Course - 網頁實戰入門 (HTML x CSS) Day 01",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "8 min read", "minutes": 7.505, "time": 450300, "words": 1501 },
    "slug": "html-css-course-day-01",
    "path": "blog/html-css-course-day-01",
    "filePath": "blog/html-css-course-day-01.mdx",
    "toc": [
      { "value": "HTML 跟 HTML (4.01) 的差別", "url": "#html-跟-html-401-的差別", "depth": 2 },
      { "value": "全新的宣告標準", "url": "#全新的宣告標準", "depth": 2 },
      { "value": "HTML 與 CSS 各其職", "url": "#html-與-css-各其職", "depth": 2 },
      {
        "value": "切版注意事項 (畫 WireFrame 注意事項)",
        "url": "#切版注意事項-畫-wireframe-注意事項",
        "depth": 2
      },
      { "value": "將 WireFrame 轉換成 HTML", "url": "#將-wireframe-轉換成-html", "depth": 2 },
      { "value": "css 設計架構", "url": "#css-設計架構", "depth": 2 },
      { "value": "SMACSS", "url": "#smacss", "depth": 2 },
      { "value": "SMACSS 的架構", "url": "#smacss-的架構", "depth": 2 },
      { "value": "SMACSS - BASE", "url": "#smacss---base", "depth": 2 },
      { "value": "SMACSS - Layout", "url": "#smacss---layout", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Course - 網頁實戰入門 (HTML x CSS) Day 01",
      "datePublished": "2014-08-24T02:34:34.488Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Course - 網頁實戰入門 (HTML x CSS) Day 01",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/html-css-course-day-01"
    }
  },
  {
    "title": "Course - TDD Day 01",
    "date": "2014-08-23T02:36:37.647Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Course - TDD Day 01",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "10 min read", "minutes": 9.185, "time": 551100, "words": 1837 },
    "slug": "course-tdd-day-01",
    "path": "blog/course-tdd-day-01",
    "filePath": "blog/course-tdd-day-01.mdx",
    "toc": [
      { "value": "開發常見的問題", "url": "#開發常見的問題", "depth": 2 },
      { "value": "Unit Test 相對應的解決方式", "url": "#unit-test-相對應的解決方式", "depth": 2 },
      { "value": "什麼是 Unit Test", "url": "#什麼是-unit-test", "depth": 2 },
      { "value": "剛開始導入 Unit Test 的原則", "url": "#剛開始導入-unit-test-的原則", "depth": 2 },
      { "value": "Unit Test 特性 FIRST", "url": "#unit-test-特性-first", "depth": 2 },
      {
        "value": "測試案例最難的在於搞不清楚需求",
        "url": "#測試案例最難的在於搞不清楚需求",
        "depth": 3
      },
      {
        "value": "測試程式的 hello word 就是寫加法器的 Unit Test",
        "url": "#測試程式的-hello-word-就是寫加法器的-unit-test",
        "depth": 3
      },
      { "value": "Unit Test 3A 原則", "url": "#unit-test-3a-原則", "depth": 2 },
      { "value": "開始寫 Unit Test 時", "url": "#開始寫-unit-test-時", "depth": 2 },
      { "value": "MS Test 相關簡介", "url": "#ms-test-相關簡介", "depth": 2 },
      { "value": "一次只測一件事", "url": "#一次只測一件事", "depth": 2 },
      { "value": "主要的三種測試", "url": "#主要的三種測試", "depth": 2 },
      {
        "value": "Independent (Isolated) 為什麼需要隔離？",
        "url": "#independent-isolated-為什麼需要隔離",
        "depth": 2
      },
      { "value": "當 UnitTest 有問題時", "url": "#當-unittest-有問題時", "depth": 2 },
      {
        "value": "Isolated Unit Test - 依賴注入",
        "url": "#isolated-unit-test---依賴注入",
        "depth": 2
      },
      { "value": "直接相依的問題", "url": "#直接相依的問題", "depth": 3 },
      {
        "value": "Unit Test 相對應解決相依問題",
        "url": "#unit-test-相對應解決相依問題",
        "depth": 3
      },
      { "value": "Isolated Unit Test", "url": "#isolated-unit-test", "depth": 2 },
      { "value": "手刻 stub 類別的問題", "url": "#手刻-stub-類別的問題", "depth": 3 },
      {
        "value": "使用 Rhino.Mocks 產生 stub 物件",
        "url": "#使用-rhinomocks-產生-stub-物件",
        "depth": 3
      },
      { "value": "實務上的作法", "url": "#實務上的作法", "depth": 2 },
      {
        "value": "是否需要針對非 public 方法撰寫單元測試 ?",
        "url": "#是否需要針對非-public-方法撰寫單元測試-",
        "depth": 2
      },
      {
        "value": "單元測試與物件導向封裝的本質",
        "url": "#單元測試與物件導向封裝的本質",
        "depth": 3
      },
      {
        "value": "直接測非 public 方法，有什麼問題",
        "url": "#直接測非-public-方法有什麼問題",
        "depth": 3
      },
      { "value": "測試涵蓋率 Code Coverage", "url": "#測試涵蓋率-code-coverage", "depth": 2 },
      { "value": "測試涵蓋率的意義", "url": "#測試涵蓋率的意義", "depth": 3 },
      { "value": "測試涵蓋率的建議", "url": "#測試涵蓋率的建議", "depth": 3 },
      {
        "value": "Web Test 使用 Selenium + FluentAutomation",
        "url": "#web-test-使用-selenium--fluentautomation",
        "depth": 3
      },
      { "value": "好課程請參考 SkillTree", "url": "#好課程請參考-skilltree", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Course - TDD Day 01",
      "datePublished": "2014-08-23T02:36:37.647Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Course - TDD Day 01",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/course-tdd-day-01"
    }
  },
  {
    "title": "2014 臺灣大道 BRT 路跑",
    "date": "2014-07-27T00:00:00.000Z",
    "tags": ["running"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "2014 臺灣大道 BRT 路跑",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.95, "time": 57000, "words": 190 },
    "slug": "2014-brt-running",
    "path": "blog/2014-brt-running",
    "filePath": "blog/2014-brt-running.mdx",
    "toc": [
      { "value": "報名", "url": "#報名", "depth": 2 },
      { "value": "路跑當天", "url": "#路跑當天", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "2014 臺灣大道 BRT 路跑",
      "datePublished": "2014-07-27T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "2014 臺灣大道 BRT 路跑",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/2014-brt-running"
    }
  },
  {
    "title": "ASP.NET MVC - View (一)",
    "date": "2014-07-21T02:41:41.841Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - View (一)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.595, "time": 155700, "words": 519 },
    "slug": "aspnet-mvc-view-01",
    "path": "blog/aspnet-mvc-view-01",
    "filePath": "blog/aspnet-mvc-view-01.mdx",
    "toc": [
      { "value": "Razor 語法", "url": "#razor-語法", "depth": 2 },
      { "value": "Layout 主版頁面", "url": "#layout-主版頁面", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - View (一)",
      "datePublished": "2014-07-21T02:41:41.841Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - View (一)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-view-01"
    }
  },
  {
    "title": "COSCUP - 2014 Day 02",
    "date": "2014-07-20T00:00:00.000Z",
    "tags": ["event"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "COSCUP - 2014 Day 02",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.7, "time": 162000, "words": 540 },
    "slug": "2014-coscup-day-02",
    "path": "blog/2014-coscup-day-02",
    "filePath": "blog/2014-coscup-day-02.mdx",
    "toc": [
      {
        "value": "在豆瓣的这两年 - CODE 系统开发之旅",
        "url": "#在豆瓣的这两年---code-系统开发之旅",
        "depth": 2
      },
      { "value": "coscup2014 相關連結", "url": "#coscup2014-相關連結", "depth": 2 },
      { "value": "照片", "url": "#照片-1", "depth": 2 },
      { "value": "心得", "url": "#心得", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "COSCUP - 2014 Day 02",
      "datePublished": "2014-07-20T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "COSCUP - 2014 Day 02",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/2014-coscup-day-02"
    }
  },
  {
    "title": "COSCUP - 2014 Day 01",
    "date": "2014-07-19T00:00:00.000Z",
    "tags": ["event"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "COSCUP - 2014 Day 01",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.36, "time": 381600, "words": 1272 },
    "slug": "2014-coscup-day-01",
    "path": "blog/2014-coscup-day-01",
    "filePath": "blog/2014-coscup-day-01.mdx",
    "toc": [
      { "value": "Opening", "url": "#opening", "depth": 2 },
      { "value": "ECMAScript 6", "url": "#ecmascript-6", "depth": 2 },
      { "value": "Syntax", "url": "#syntax", "depth": 3 },
      { "value": "Iterator", "url": "#iterator", "depth": 3 },
      {
        "value": "猎豹的 DevRel ~ 一个商业公司的社区探索",
        "url": "#猎豹的-devrel--一个商业公司的社区探索",
        "depth": 2
      },
      { "value": "R 語言的工程面", "url": "#r-語言的工程面", "depth": 2 },
      {
        "value": "簡單、快速、好舒服 QNAP NAS 最佳軟體開發平台",
        "url": "#簡單快速好舒服-qnap-nas-最佳軟體開發平台",
        "depth": 2
      },
      { "value": "讓開源更好地促進教育發展", "url": "#讓開源更好地促進教育發展", "depth": 2 },
      {
        "value": "The Noto Sans CJK Font and Its Making",
        "url": "#the-noto-sans-cjk-font-and-its-making",
        "depth": 2
      },
      { "value": "照片", "url": "#照片", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "COSCUP - 2014 Day 01",
      "datePublished": "2014-07-19T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "COSCUP - 2014 Day 01",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/2014-coscup-day-01"
    }
  },
  {
    "title": "ASP.NET MVC - Controller (三)",
    "date": "2014-07-18T00:00:00.000Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - Controller (三)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.04, "time": 122400, "words": 408 },
    "slug": "aspnet-mvc-controller-03",
    "path": "blog/aspnet-mvc-controller-03",
    "filePath": "blog/aspnet-mvc-controller-03.mdx",
    "toc": [
      { "value": "TempData", "url": "#tempdata", "depth": 2 },
      { "value": "淺談 Model Binding", "url": "#淺談-model-binding", "depth": 2 },
      { "value": "簡單模型繫結", "url": "#簡單模型繫結", "depth": 3 },
      { "value": "FormCollection", "url": "#formcollection", "depth": 2 },
      { "value": "複雜模型擊結", "url": "#複雜模型擊結", "depth": 3 },
      { "value": "淺談資料驗証", "url": "#淺談資料驗証", "depth": 2 },
      { "value": "預先驗証", "url": "#預先驗証", "depth": 3 },
      { "value": "延遲驗証", "url": "#延遲驗証", "depth": 3 },
      { "value": "ActionFilter", "url": "#actionfilter", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Controller (三)",
      "datePublished": "2014-07-18T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - Controller (三)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-controller-03"
    }
  },
  {
    "title": "大公司 vs 小公司",
    "date": "2014-07-17T02:50:32.964Z",
    "tags": ["murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "大公司 vs 小公司",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.06, "time": 123600, "words": 412 },
    "slug": "large-vs-small-company",
    "path": "blog/large-vs-small-company",
    "filePath": "blog/large-vs-small-company.mdx",
    "toc": [
      { "value": "這個主題的由來", "url": "#這個主題的由來", "depth": 2 },
      { "value": "我眼中的大公司", "url": "#我眼中的大公司", "depth": 2 },
      { "value": "我眼中的小公司", "url": "#我眼中的小公司", "depth": 2 },
      { "value": "大公司 vs 小公司", "url": "#大公司-vs-小公司", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "大公司 vs 小公司",
      "datePublished": "2014-07-17T02:50:32.964Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "大公司 vs 小公司",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/large-vs-small-company"
    }
  },
  {
    "title": "ASP.NET MVC - Controller (二) Action Result",
    "date": "2014-07-16T00:00:00.000Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - Controller (二) Action Result",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.375, "time": 262500, "words": 875 },
    "slug": "aspnet-mvc-controller-02",
    "path": "blog/aspnet-mvc-controller-02",
    "filePath": "blog/aspnet-mvc-controller-02.mdx",
    "toc": [
      { "value": "ViewResult", "url": "#viewresult", "depth": 2 },
      { "value": "PartialViewResult", "url": "#partialviewresult", "depth": 2 },
      { "value": "ContentResult", "url": "#contentresult", "depth": 2 },
      { "value": "FileResult", "url": "#fileresult", "depth": 2 },
      { "value": "JavaScriptResult", "url": "#javascriptresult", "depth": 2 },
      { "value": "JsonResult", "url": "#jsonresult", "depth": 2 },
      { "value": "RedirectResult", "url": "#redirectresult", "depth": 2 },
      { "value": "HtpStatusCodeResult", "url": "#htpstatuscoderesult", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Controller (二) Action Result",
      "datePublished": "2014-07-16T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - Controller (二) Action Result",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-controller-02"
    }
  },
  {
    "title": "ASP.NET MVC - Controller (一)",
    "date": "2014-07-15T00:00:00.000Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - Controller (一)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.98, "time": 58800, "words": 196 },
    "slug": "aspnet-mvc-controller-01",
    "path": "blog/aspnet-mvc-controller-01",
    "filePath": "blog/aspnet-mvc-controller-01.mdx",
    "toc": [
      { "value": "Controller 的基本條件", "url": "#controller-的基本條件", "depth": 2 },
      { "value": "Action 的基本條件", "url": "#action-的基本條件", "depth": 2 },
      { "value": "BaseController", "url": "#basecontroller", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Controller (一)",
      "datePublished": "2014-07-15T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - Controller (一)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-controller-01"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (七)",
    "date": "2014-07-14T06:56:49.834Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (七)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.865, "time": 111900, "words": 373 },
    "slug": "aspnet-mvc-db-dev-07",
    "path": "blog/aspnet-mvc-db-dev-07",
    "filePath": "blog/aspnet-mvc-db-dev-07.mdx",
    "toc": [{ "value": "使用資料庫圖表作開發", "url": "#使用資料庫圖表作開發", "depth": 2 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (七)",
      "datePublished": "2014-07-14T06:56:49.834Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (七)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-07"
    }
  },
  {
    "title": "ASP.NET MVC - Route (二)",
    "date": "2014-07-14T02:55:10.492Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - Route (二)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.485, "time": 209100, "words": 697 },
    "slug": "aspnet-mvc-route-02",
    "path": "blog/aspnet-mvc-route-02",
    "filePath": "blog/aspnet-mvc-route-02.mdx",
    "toc": [
      { "value": "實作 Route", "url": "#實作-route", "depth": 2 },
      { "value": "結論", "url": "#結論-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Route (二)",
      "datePublished": "2014-07-14T02:55:10.492Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - Route (二)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-route-02"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (六)",
    "date": "2014-07-13T12:00:46.856Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (六)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.36, "time": 81600, "words": 272 },
    "slug": "aspnet-mvc-db-dev-06",
    "path": "blog/aspnet-mvc-db-dev-06",
    "filePath": "blog/aspnet-mvc-db-dev-06.mdx",
    "toc": [
      {
        "value": "有限度的調整 T-SQL 語法，使用 Include 作查詢計畫",
        "url": "#有限度的調整-t-sql-語法使用-include-作查詢計畫",
        "depth": 2
      }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (六)",
      "datePublished": "2014-07-13T12:00:46.856Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (六)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-06"
    }
  },
  {
    "title": "ASP.NET MVC - Route (一)",
    "date": "2014-07-13T02:59:09.827Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - Route (一)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.96, "time": 237600, "words": 792 },
    "slug": "aspnet-mvc-route-01",
    "path": "blog/aspnet-mvc-route-01",
    "filePath": "blog/aspnet-mvc-route-01.mdx",
    "toc": [
      { "value": "MVC 的執行生命週期", "url": "#mvc-的執行生命週期", "depth": 2 },
      {
        "value": "網址路由的兩個主要功能 (任務)",
        "url": "#網址路由的兩個主要功能-任務",
        "depth": 2
      },
      { "value": "網址路由的內容", "url": "#網址路由的內容", "depth": 2 },
      { "value": "路由比對的注意事項", "url": "#路由比對的注意事項", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Route (一)",
      "datePublished": "2014-07-13T02:59:09.827Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - Route (一)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-route-01"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (五)",
    "date": "2014-07-12T07:03:56.855Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (五)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.15, "time": 69000, "words": 230 },
    "slug": "aspnet-mvc-db-dev-05",
    "path": "blog/aspnet-mvc-db-dev-05",
    "filePath": "blog/aspnet-mvc-db-dev-05.mdx",
    "toc": [
      {
        "value": "擴充資料模型 Matadata 的開發步驗",
        "url": "#擴充資料模型-matadata-的開發步驗",
        "depth": 2
      }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (五)",
      "datePublished": "2014-07-12T07:03:56.855Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (五)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-05"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (四)",
    "date": "2014-07-11T21:49:08.943Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (四)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.785, "time": 167100, "words": 557 },
    "slug": "aspnet-mvc-db-dev-04",
    "path": "blog/aspnet-mvc-db-dev-04",
    "filePath": "blog/aspnet-mvc-db-dev-04.mdx",
    "toc": [
      {
        "value": "當資料庫有變動時 從資料庫更新模型時 不一定會更新",
        "url": "#當資料庫有變動時-從資料庫更新模型時-不一定會更新",
        "depth": 2
      },
      { "value": "新增資料表時：", "url": "#新增資料表時", "depth": 3 },
      { "value": "刪除資料表時：", "url": "#刪除資料表時", "depth": 3 },
      { "value": "新增資料表的欄位：", "url": "#新增資料表的欄位", "depth": 3 },
      { "value": "刪除資料表的欄位：", "url": "#刪除資料表的欄位", "depth": 3 },
      { "value": "修改資料表的欄位名稱：", "url": "#修改資料表的欄位名稱", "depth": 3 },
      { "value": "修改資料表的欄位屬性：", "url": "#修改資料表的欄位屬性", "depth": 3 },
      { "value": "結論", "url": "#結論", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (四)",
      "datePublished": "2014-07-11T21:49:08.943Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (四)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-04"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (三)",
    "date": "2014-07-11T00:00:00.000Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (三)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.14, "time": 128400, "words": 428 },
    "slug": "aspnet-mvc-db-dev-03",
    "path": "blog/aspnet-mvc-db-dev-03",
    "filePath": "blog/aspnet-mvc-db-dev-03.mdx",
    "toc": [
      { "value": "資料庫欄位有預設值時處理", "url": "#資料庫欄位有預設值時處理", "depth": 2 },
      { "value": "解決方法", "url": "#解決方法", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (三)",
      "datePublished": "2014-07-11T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (三)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-03"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (二)",
    "date": "2014-07-10T00:00:00.000Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (二)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.985, "time": 179100, "words": 597 },
    "slug": "aspnet-mvc-db-dev-02",
    "path": "blog/aspnet-mvc-db-dev-02",
    "filePath": "blog/aspnet-mvc-db-dev-02.mdx",
    "toc": [
      { "value": "使用 EF 作 CRUD", "url": "#使用-ef-作-crud", "depth": 2 },
      { "value": "資料列表", "url": "#資料列表", "depth": 3 },
      { "value": "增加資料", "url": "#增加資料", "depth": 3 },
      { "value": "增加有關連的資料", "url": "#增加有關連的資料", "depth": 3 },
      { "value": "取出單筆資料", "url": "#取出單筆資料", "depth": 3 },
      { "value": "修改資料", "url": "#修改資料", "depth": 3 },
      { "value": "刪除資料", "url": "#刪除資料", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (二)",
      "datePublished": "2014-07-10T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (二)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-02"
    }
  },
  {
    "title": "ASP.NET MVC - 使用資料庫開發 (一)",
    "date": "2014-07-09T00:00:00.000Z",
    "tags": ["asp.net mvc", "ef"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC - 使用資料庫開發 (一)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.365, "time": 261900, "words": 873 },
    "slug": "aspnet-mvc-db-dev-01",
    "path": "blog/aspnet-mvc-db-dev-01",
    "filePath": "blog/aspnet-mvc-db-dev-01.mdx",
    "toc": [
      { "value": "建立資料庫模型", "url": "#建立資料庫模型", "depth": 2 },
      { "value": "POCO (Plain Old CLR Object)", "url": "#poco-plain-old-clr-object", "depth": 2 },
      { "value": "ORM 技術", "url": "#orm-技術", "depth": 2 },
      { "value": "EF 檔案", "url": "#ef-檔案", "depth": 2 },
      { "value": "EF 的連線字串", "url": "#ef-的連線字串", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - 使用資料庫開發 (一)",
      "datePublished": "2014-07-09T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC - 使用資料庫開發 (一)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-db-dev-01"
    }
  },
  {
    "title": "第二次的 保哥 MVC 課程",
    "date": "2014-07-07T07:59:17.154Z",
    "tags": ["course"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "第二次的 保哥 MVC 課程",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.215, "time": 132900, "words": 443 },
    "slug": "course-second-will-mvc",
    "path": "blog/course-second-will-mvc",
    "filePath": "blog/course-second-will-mvc.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "第二次的 保哥 MVC 課程",
      "datePublished": "2014-07-07T07:59:17.154Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "第二次的 保哥 MVC 課程",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/course-second-will-mvc"
    }
  },
  {
    "title": "ASP.NET MVC - Fine Uploader (三)",
    "date": "2014-04-12T00:01:14.868Z",
    "tags": ["asp.net mvc", "package"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC Fine Uploader (三)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "5 min read", "minutes": 4.3, "time": 258000, "words": 860 },
    "slug": "fine-uploader-03",
    "path": "blog/fine-uploader-03",
    "filePath": "blog/fine-uploader-03.mdx",
    "toc": [
      { "value": "後端接收參數調整", "url": "#後端接收參數調整", "depth": 2 },
      { "value": "傳入額外的參數", "url": "#傳入額外的參數", "depth": 2 },
      { "value": "參考連結", "url": "#參考連結-3", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Fine Uploader (三)",
      "datePublished": "2014-04-12T00:01:14.868Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC Fine Uploader (三)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/fine-uploader-03"
    }
  },
  {
    "title": "ASP.NET MVC - Fine Uploader (二)",
    "date": "2014-04-05T08:02:21.776Z",
    "tags": ["asp.net mvc", "package"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC Fine Uploader (二)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.78, "time": 106800, "words": 356 },
    "slug": "fine-uploader-02",
    "path": "blog/fine-uploader-02",
    "filePath": "blog/fine-uploader-02.mdx",
    "toc": [{ "value": "參考連結", "url": "#參考連結-2", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Fine Uploader (二)",
      "datePublished": "2014-04-05T08:02:21.776Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC Fine Uploader (二)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/fine-uploader-02"
    }
  },
  {
    "title": "ASP.NET MVC - Fine Uploader (一)",
    "date": "2014-03-23T08:04:16.267Z",
    "tags": ["asp.net mvc", "package"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "ASP.NET MVC Fine Uploader (一)",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.915, "time": 174900, "words": 583 },
    "slug": "fine-uploader-01",
    "path": "blog/fine-uploader-01",
    "filePath": "blog/fine-uploader-01.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - Fine Uploader (一)",
      "datePublished": "2014-03-23T08:04:16.267Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "ASP.NET MVC Fine Uploader (一)",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/fine-uploader-01"
    }
  },
  {
    "title": "Base 36",
    "date": "2014-01-04T08:06:14.522Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "Base 36",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.615, "time": 96900, "words": 323 },
    "slug": "base36",
    "path": "blog/base36",
    "filePath": "blog/base36.mdx",
    "toc": [{ "value": "參考連結", "url": "#參考連結", "depth": 3 }],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Base 36",
      "datePublished": "2014-01-04T08:06:14.522Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "Base 36",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/base36"
    }
  },
  {
    "title": "About 2013",
    "date": "2013-12-31T00:00:00.000Z",
    "tags": ["murmur"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "2013 年回顧",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.91, "time": 114600, "words": 382 },
    "slug": "about-2013",
    "path": "blog/about-2013",
    "filePath": "blog/about-2013.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "About 2013",
      "datePublished": "2013-12-31T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "2013 年回顧",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/about-2013"
    }
  },
  {
    "title": "ASP.NET MVC - JSONP",
    "date": "2013-12-29T00:00:00.000Z",
    "tags": ["asp.net mvc"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 ASP.NET MVC 中，如何實作 JSONP",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.64, "time": 98400, "words": 328 },
    "slug": "aspnet-mvc-jsonp",
    "path": "blog/aspnet-mvc-jsonp",
    "filePath": "blog/aspnet-mvc-jsonp.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "ASP.NET MVC - JSONP",
      "datePublished": "2013-12-29T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 ASP.NET MVC 中，如何實作 JSONP",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/aspnet-mvc-jsonp"
    }
  },
  {
    "title": "C# - Delegate",
    "date": "2013-05-10T00:00:00.000Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# Delegate",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.285, "time": 137100, "words": 457 },
    "slug": "csharp-delegate",
    "path": "blog/csharp-delegate",
    "filePath": "blog/csharp-delegate.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - Delegate",
      "datePublished": "2013-05-10T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# Delegate",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-delegate"
    }
  },
  {
    "title": "C# - Event",
    "date": "2013-05-10T00:00:00.000Z",
    "tags": ["c#"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "C# Event",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.29, "time": 197400, "words": 658 },
    "slug": "csharp-event",
    "path": "blog/csharp-event",
    "filePath": "blog/csharp-event.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "C# - Event",
      "datePublished": "2013-05-10T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "C# Event",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/csharp-event"
    }
  },
  {
    "title": "Ubuntu - 停用觸控板",
    "date": "2012-06-13T00:00:00.000Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 Ubuntu 上，如何停用觸控板",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.425, "time": 25500, "words": 85 },
    "slug": "ubuntu-stop-touchpad",
    "path": "blog/ubuntu-stop-touchpad",
    "filePath": "blog/ubuntu-stop-touchpad.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 停用觸控板",
      "datePublished": "2012-06-13T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 Ubuntu 上，如何停用觸控板",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-stop-touchpad"
    }
  },
  {
    "title": "Ubuntu - 建立光碟 ISO 檔",
    "date": "2012-06-05T00:00:00.000Z",
    "tags": ["ubuntu"],
    "lastmod": "2024-08-16T00:00:00.000Z",
    "draft": false,
    "summary": "在 Ubuntu 上，如何建立光碟 ISO 檔",
    "layout": "PostSimple",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.3, "time": 18000, "words": 60 },
    "slug": "ubuntu-create-iso",
    "path": "blog/ubuntu-create-iso",
    "filePath": "blog/ubuntu-create-iso.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Ubuntu - 建立光碟 ISO 檔",
      "datePublished": "2012-06-05T00:00:00.000Z",
      "dateModified": "2024-08-16T00:00:00.000Z",
      "summary": "在 Ubuntu 上，如何建立光碟 ISO 檔",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/ubuntu-create-iso"
    }
  },
  {
    "title": "Deriving the OLS Estimator",
    "date": "1911-12-21T00:00:00.000Z",
    "tags": ["next js", "math", "ols"],
    "draft": true,
    "summary": "How to derive the OLS Estimator with matrix notation and a tour of math typesetting using markdown with the help of KaTeX.",
    "type": "Blog",
    "readingTime": { "text": "3 min read", "minutes": 2.81, "time": 168600, "words": 562 },
    "slug": "_sample/deriving-ols-estimator",
    "path": "blog/_sample/deriving-ols-estimator",
    "filePath": "blog/_sample/deriving-ols-estimator.mdx",
    "toc": [
      { "value": "Introduction", "url": "#introduction-2", "depth": 1 },
      { "value": "Deriving the OLS Estimator", "url": "#deriving-the-ols-estimator", "depth": 1 },
      { "value": "Least Squares", "url": "#least-squares", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Deriving the OLS Estimator",
      "datePublished": "1911-12-21T00:00:00.000Z",
      "dateModified": "1911-12-21T00:00:00.000Z",
      "summary": "How to derive the OLS Estimator with matrix notation and a tour of math typesetting using markdown with the help of KaTeX.",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/deriving-ols-estimator"
    }
  },
  {
    "title": "Images in Next.js",
    "date": "1911-11-11T00:00:00.000Z",
    "tags": ["next js", "guide"],
    "draft": true,
    "summary": "In this article we introduce adding images in the tailwind starter blog and the benefits and limitations of the next/image component.",
    "authors": ["sparrowhawk"],
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.95, "time": 117000, "words": 390 },
    "slug": "_sample/guide-to-using-images-in-nextjs",
    "path": "blog/_sample/guide-to-using-images-in-nextjs",
    "filePath": "blog/_sample/guide-to-using-images-in-nextjs.mdx",
    "toc": [
      { "value": "Introduction", "url": "#introduction", "depth": 1 },
      { "value": "Usage", "url": "#usage", "depth": 1 },
      { "value": "Benefits", "url": "#benefits", "depth": 1 },
      { "value": "Limitations", "url": "#limitations", "depth": 1 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Images in Next.js",
      "datePublished": "1911-11-11T00:00:00.000Z",
      "dateModified": "1911-11-11T00:00:00.000Z",
      "summary": "In this article we introduce adding images in the tailwind starter blog and the benefits and limitations of the next/image component.",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/guide-to-using-images-in-nextjs"
    }
  },
  {
    "title": "Markdown Guide",
    "date": "1911-10-11T00:00:00.000Z",
    "tags": ["github", "guide"],
    "draft": true,
    "summary": "Markdown cheatsheet for all your blogging needs - headers, lists, images, tables and more! An illustrated guide based on GitHub Flavored Markdown.",
    "type": "Blog",
    "readingTime": { "text": "4 min read", "minutes": 3.155, "time": 189300, "words": 631 },
    "slug": "_sample/github-markdown-guide",
    "path": "blog/_sample/github-markdown-guide",
    "filePath": "blog/_sample/github-markdown-guide.mdx",
    "toc": [
      { "value": "Introduction", "url": "#introduction-1", "depth": 1 },
      { "value": "What is Markdown?", "url": "#what-is-markdown", "depth": 1 },
      { "value": "Syntax guide", "url": "#syntax-guide", "depth": 1 },
      { "value": "Headers", "url": "#headers", "depth": 2 },
      { "value": "This is a h1 tag", "url": "#this-is-a-h1-tag", "depth": 1 },
      { "value": "This is a h2 tag", "url": "#this-is-a-h2-tag", "depth": 2 },
      { "value": "This is a h4 tag", "url": "#this-is-a-h4-tag", "depth": 4 },
      { "value": "Emphasis", "url": "#emphasis", "depth": 2 },
      { "value": "Lists", "url": "#lists", "depth": 2 },
      { "value": "Unordered", "url": "#unordered", "depth": 3 },
      { "value": "Ordered", "url": "#ordered", "depth": 3 },
      { "value": "Images", "url": "#images", "depth": 2 },
      { "value": "Links", "url": "#links", "depth": 2 },
      { "value": "Blockquotes", "url": "#blockquotes", "depth": 2 },
      { "value": "Inline code", "url": "#inline-code", "depth": 2 },
      { "value": "Syntax highlighting", "url": "#syntax-highlighting", "depth": 2 },
      { "value": "Footnotes", "url": "#footnotes", "depth": 2 },
      { "value": "Task Lists", "url": "#task-lists", "depth": 2 },
      { "value": "Tables", "url": "#tables", "depth": 2 },
      { "value": "Strikethrough", "url": "#strikethrough", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Markdown Guide",
      "datePublished": "1911-10-11T00:00:00.000Z",
      "dateModified": "1911-10-11T00:00:00.000Z",
      "summary": "Markdown cheatsheet for all your blogging needs - headers, lists, images, tables and more! An illustrated guide based on GitHub Flavored Markdown.",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/github-markdown-guide"
    }
  },
  {
    "title": "The Time Machine",
    "date": "1911-08-15T00:00:00.000Z",
    "tags": ["writings", "book", "reflection"],
    "draft": true,
    "summary": "The Time Traveller (for so it will be convenient to speak of him) was expounding a recondite matter to us. His pale grey eyes shone and twinkled, and his usually pale face was flushed and animated...",
    "type": "Blog",
    "readingTime": { "text": "9 min read", "minutes": 8.53, "time": 511800, "words": 1706 },
    "slug": "_sample/the-time-machine",
    "path": "blog/_sample/the-time-machine",
    "filePath": "blog/_sample/the-time-machine.mdx",
    "toc": [
      {
        "value": "The Time Machine by H. G. Wells",
        "url": "#the-time-machine-by-h-g-wells",
        "depth": 1
      },
      { "value": "Introduction", "url": "#introduction-4", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "The Time Machine",
      "datePublished": "1911-08-15T00:00:00.000Z",
      "dateModified": "1911-08-15T00:00:00.000Z",
      "summary": "The Time Traveller (for so it will be convenient to speak of him) was expounding a recondite matter to us. His pale grey eyes shone and twinkled, and his usually pale face was flushed and animated...",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/the-time-machine"
    }
  },
  {
    "title": "New features in v1",
    "date": "1911-08-07T15:32:14.000Z",
    "tags": ["next-js", "tailwind", "guide"],
    "lastmod": "2021-02-01T00:00:00.000Z",
    "draft": true,
    "summary": "An overview of the new features released in v1 - code block copy, multiple authors, frontmatter layout and more",
    "layout": "PostSimple",
    "bibliography": "references-data.bib",
    "type": "Blog",
    "readingTime": { "text": "12 min read", "minutes": 11.92, "time": 715200, "words": 2384 },
    "slug": "_sample/new-features-in-v1",
    "path": "blog/_sample/new-features-in-v1",
    "filePath": "blog/_sample/new-features-in-v1.mdx",
    "toc": [
      { "value": "Overview", "url": "#overview", "depth": 2 },
      { "value": "Theme colors", "url": "#theme-colors", "depth": 2 },
      { "value": "Xdm MDX compiler", "url": "#xdm-mdx-compiler", "depth": 2 },
      { "value": "Table of contents component", "url": "#table-of-contents-component", "depth": 2 },
      { "value": "Layouts", "url": "#layouts", "depth": 2 },
      { "value": "Adding new templates", "url": "#adding-new-templates", "depth": 3 },
      {
        "value": "Configuring a blog post frontmatter",
        "url": "#configuring-a-blog-post-frontmatter",
        "depth": 3
      },
      { "value": "Extend", "url": "#extend", "depth": 3 },
      { "value": "Analytics", "url": "#analytics", "depth": 2 },
      { "value": "Blog comments system", "url": "#blog-comments-system", "depth": 2 },
      { "value": "Multiple authors", "url": "#multiple-authors", "depth": 2 },
      {
        "value": "Multiple authors in blog post",
        "url": "#multiple-authors-in-blog-post",
        "depth": 3
      },
      { "value": "Copy button for code blocks", "url": "#copy-button-for-code-blocks", "depth": 2 },
      {
        "value": "Line highlighting and line numbers",
        "url": "#line-highlighting-and-line-numbers",
        "depth": 2
      },
      { "value": "Newletter component (v1.1.3)", "url": "#newletter-component-v113", "depth": 2 },
      {
        "value": "Bibliography and Citations (v1.2.1)",
        "url": "#bibliography-and-citations-v121",
        "depth": 2
      },
      { "value": "Self-hosted font (v1.5.0)", "url": "#self-hosted-font-v150", "depth": 2 },
      { "value": "Upgrade guide", "url": "#upgrade-guide", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "New features in v1",
      "datePublished": "1911-08-07T15:32:14.000Z",
      "dateModified": "2021-02-01T00:00:00.000Z",
      "summary": "An overview of the new features released in v1 - code block copy, multiple authors, frontmatter layout and more",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/new-features-in-v1"
    }
  },
  {
    "title": "Release of Tailwind Nextjs Starter Blog v2.0",
    "date": "1911-08-05T00:00:00.000Z",
    "tags": ["next-js", "tailwind", "guide", "feature"],
    "lastmod": "2023-08-05T00:00:00.000Z",
    "draft": true,
    "summary": "Release of Tailwind Nextjs Starter Blog template v2.0, refactored with Nextjs App directory and React Server Components setup.Discover the new features and how to migrate from V1.",
    "images": ["https://image.cashwu.com/twitter-card.png"],
    "type": "Blog",
    "readingTime": { "text": "10 min read", "minutes": 9.055, "time": 543300, "words": 1811 },
    "slug": "_sample/release-of-tailwind-nextjs-starter-blog-v2.0",
    "path": "blog/_sample/release-of-tailwind-nextjs-starter-blog-v2.0",
    "filePath": "blog/_sample/release-of-tailwind-nextjs-starter-blog-v2.0.mdx",
    "toc": [
      { "value": "Introduction", "url": "#introduction", "depth": 2 },
      { "value": "V1 to V2", "url": "#v1-to-v2", "depth": 2 },
      {
        "value": "Next.js App Directory and React Server Components",
        "url": "#nextjs-app-directory-and-react-server-components",
        "depth": 2
      },
      { "value": "Typescript First", "url": "#typescript-first", "depth": 2 },
      { "value": "Contentlayer", "url": "#contentlayer", "depth": 2 },
      { "value": "Pliny", "url": "#pliny", "depth": 2 },
      { "value": "New Search Component", "url": "#new-search-component", "depth": 2 },
      { "value": "Algolia", "url": "#algolia", "depth": 3 },
      { "value": "Kbar", "url": "#kbar", "depth": 3 },
      { "value": "Styling and Layout Updates", "url": "#styling-and-layout-updates", "depth": 2 },
      { "value": "Theming", "url": "#theming", "depth": 3 },
      { "value": "New Layouts", "url": "#new-layouts", "depth": 3 },
      { "value": "Migration Recommendations", "url": "#migration-recommendations", "depth": 2 },
      { "value": "Conclusion", "url": "#conclusion", "depth": 2 },
      { "value": "Support", "url": "#support-1", "depth": 2 },
      { "value": "Licence", "url": "#licence-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Release of Tailwind Nextjs Starter Blog v2.0",
      "datePublished": "1911-08-05T00:00:00.000Z",
      "dateModified": "2023-08-05T00:00:00.000Z",
      "summary": "Release of Tailwind Nextjs Starter Blog template v2.0, refactored with Nextjs App directory and React Server Components setup.Discover the new features and how to migrate from V1.",
      "image": "https://image.cashwu.com/twitter-card.png",
      "url": "https://blog.cashwu.com/blog/_sample/release-of-tailwind-nextjs-starter-blog-v2.0"
    }
  },
  {
    "title": "O Canada",
    "date": "1911-07-15T00:00:00.000Z",
    "tags": ["holiday", "canada", "images"],
    "draft": true,
    "summary": "The scenic lands of Canada featuring maple leaves, snow-capped mountains, turquoise lakes and Toronto. Take in the sights in this photo gallery exhibition and see how easy it is to replicate with some MDX magic and tailwind classes.",
    "images": ["https://image.cashwu.com/canada/mountains.jpg"],
    "layout": "PostBanner",
    "type": "Blog",
    "readingTime": { "text": "2 min read", "minutes": 1.18, "time": 70800, "words": 236 },
    "slug": "_sample/pictures-of-canada",
    "path": "blog/_sample/pictures-of-canada",
    "filePath": "blog/_sample/pictures-of-canada.mdx",
    "toc": [
      { "value": "Gallery", "url": "#gallery", "depth": 1 },
      { "value": "Implementation", "url": "#implementation", "depth": 1 },
      { "value": "Photo Credits", "url": "#photo-credits", "depth": 3 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "O Canada",
      "datePublished": "1911-07-15T00:00:00.000Z",
      "dateModified": "1911-07-15T00:00:00.000Z",
      "summary": "The scenic lands of Canada featuring maple leaves, snow-capped mountains, turquoise lakes and Toronto. Take in the sights in this photo gallery exhibition and see how easy it is to replicate with some MDX magic and tailwind classes.",
      "image": "https://image.cashwu.com/canada/mountains.jpg",
      "url": "https://blog.cashwu.com/blog/_sample/pictures-of-canada"
    }
  },
  {
    "title": "Introducing Multi-part Posts with Nested Routing",
    "date": "1911-05-02T00:00:00.000Z",
    "tags": ["multi-author", "next-js", "feature"],
    "draft": true,
    "summary": "The blog template supports posts in nested sub-folders. This can be used to group posts of similar content e.g. a multi-part course. This post is itself an example of a nested route!",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.845, "time": 50700, "words": 169 },
    "slug": "_sample/nested-route/introducing-multi-part-posts-with-nested-routing",
    "path": "blog/_sample/nested-route/introducing-multi-part-posts-with-nested-routing",
    "filePath": "blog/_sample/nested-route/introducing-multi-part-posts-with-nested-routing.mdx",
    "toc": [
      { "value": "Nested Routes", "url": "#nested-routes", "depth": 1 },
      { "value": "How", "url": "#how", "depth": 2 },
      { "value": "Use Cases", "url": "#use-cases", "depth": 2 },
      { "value": "Note", "url": "#note-1", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Introducing Multi-part Posts with Nested Routing",
      "datePublished": "1911-05-02T00:00:00.000Z",
      "dateModified": "1911-05-02T00:00:00.000Z",
      "summary": "The blog template supports posts in nested sub-folders. This can be used to group posts of similar content e.g. a multi-part course. This post is itself an example of a nested route!",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/nested-route/introducing-multi-part-posts-with-nested-routing"
    }
  },
  {
    "title": "Sample .md file",
    "date": "1911-03-08T00:00:00.000Z",
    "tags": ["markdown", "code", "features"],
    "draft": true,
    "summary": "Example of a markdown file with code blocks and syntax highlighting",
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.595, "time": 35700, "words": 119 },
    "slug": "_sample/code-sample",
    "path": "blog/_sample/code-sample",
    "filePath": "blog/_sample/code-sample.mdx",
    "toc": [
      { "value": "Inline Highlighting", "url": "#inline-highlighting", "depth": 2 },
      { "value": "Code Blocks", "url": "#code-blocks", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Sample .md file",
      "datePublished": "1911-03-08T00:00:00.000Z",
      "dateModified": "1911-03-08T00:00:00.000Z",
      "summary": "Example of a markdown file with code blocks and syntax highlighting",
      "image": "https://image.cashwu.com/cover.webp",
      "url": "https://blog.cashwu.com/blog/_sample/code-sample"
    }
  },
  {
    "title": "My fancy title",
    "date": "1911-01-31T00:00:00.000Z",
    "tags": ["hello"],
    "draft": true,
    "summary": "draft post",
    "images": [],
    "type": "Blog",
    "readingTime": { "text": "1 min read", "minutes": 0.03, "time": 1800, "words": 6 },
    "slug": "_sample/my-fancy-title",
    "path": "blog/_sample/my-fancy-title",
    "filePath": "blog/_sample/my-fancy-title.mdx",
    "toc": [],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "My fancy title",
      "datePublished": "1911-01-31T00:00:00.000Z",
      "dateModified": "1911-01-31T00:00:00.000Z",
      "summary": "draft post",
      "url": "https://blog.cashwu.com/blog/_sample/my-fancy-title"
    }
  },
  {
    "title": "Introducing Tailwind Nextjs Starter Blog",
    "date": "1911-01-12T00:00:00.000Z",
    "tags": ["next-js", "tailwind", "guide"],
    "lastmod": "2024-06-02T00:00:00.000Z",
    "draft": true,
    "summary": "Looking for a performant, out of the box template, with all the best in web technology to support your blogging needs? Checkout the Tailwind Nextjs Starter Blog template.",
    "images": [
      "https://image.cashwu.com/canada/mountains.jpg",
      "/static/images/canada/toronto.jpg"
    ],
    "authors": ["default", "sparrowhawk"],
    "type": "Blog",
    "readingTime": { "text": "7 min read", "minutes": 6.035, "time": 362100, "words": 1207 },
    "slug": "_sample/introducing-tailwind-nextjs-starter-blog",
    "path": "blog/_sample/introducing-tailwind-nextjs-starter-blog",
    "filePath": "blog/_sample/introducing-tailwind-nextjs-starter-blog.mdx",
    "toc": [
      {
        "value": "Tailwind Nextjs Starter Blog",
        "url": "#tailwind-nextjs-starter-blog",
        "depth": 1
      },
      { "value": "Examples", "url": "#examples", "depth": 2 },
      { "value": "Motivation", "url": "#motivation", "depth": 2 },
      { "value": "Features", "url": "#features", "depth": 2 },
      { "value": "Sample posts", "url": "#sample-posts", "depth": 2 },
      { "value": "Quick Start Guide", "url": "#quick-start-guide", "depth": 2 },
      { "value": "Development", "url": "#development", "depth": 2 },
      { "value": "Extend / Customize", "url": "#extend--customize", "depth": 2 },
      { "value": "Post", "url": "#post", "depth": 2 },
      { "value": "Frontmatter", "url": "#frontmatter", "depth": 3 },
      { "value": "Compose", "url": "#compose", "depth": 3 },
      { "value": "Deploy", "url": "#deploy", "depth": 2 },
      { "value": "Support", "url": "#support", "depth": 2 },
      { "value": "Licence", "url": "#licence", "depth": 2 }
    ],
    "structuredData": {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": "Introducing Tailwind Nextjs Starter Blog",
      "datePublished": "1911-01-12T00:00:00.000Z",
      "dateModified": "2024-06-02T00:00:00.000Z",
      "summary": "Looking for a performant, out of the box template, with all the best in web technology to support your blogging needs? Checkout the Tailwind Nextjs Starter Blog template.",
      "image": "https://image.cashwu.com/canada/mountains.jpg",
      "url": "https://blog.cashwu.com/blog/_sample/introducing-tailwind-nextjs-starter-blog"
    }
  }
]
